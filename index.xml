<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PinkHello</title><link>https://pinkhello.me/</link><description>Recent content on PinkHello</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>PinkHello, All Rights Reserved</copyright><lastBuildDate>Thu, 17 Jun 2021 09:53:51 +0800</lastBuildDate><atom:link href="https://pinkhello.me/index.xml" rel="self" type="application/rss+xml"/><item><title>13 Kafka与Debezium构建CDC管道</title><link>https://pinkhello.me/posts/13-kafka%E4%B8%8Edebezium%E6%9E%84%E5%BB%BAcdc%E7%AE%A1%E9%81%93/</link><pubDate>Thu, 17 Jun 2021 09:53:51 +0800</pubDate><guid>https://pinkhello.me/posts/13-kafka%E4%B8%8Edebezium%E6%9E%84%E5%BB%BAcdc%E7%AE%A1%E9%81%93/</guid><description>PinkHello https://pinkhello.me/posts/13-kafka%E4%B8%8Edebezium%E6%9E%84%E5%BB%BAcdc%E7%AE%A1%E9%81%93/ -&lt;h1 id="建设篇">建设篇&lt;/h1>
&lt;h2 id="1什么是-debezium">1、什么是 debezium?&lt;/h2>
&lt;p>&lt;a href="https://debezium.io/">https://debezium.io/&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Tutorial
&lt;a href="https://debezium.io/documentation/reference/1.3/tutorial.html">https://debezium.io/documentation/reference/1.3/tutorial.html&lt;/a>&lt;/p>
&lt;h2 id="2debezium-如何工作的">2、Debezium 如何工作的&lt;/h2>
&lt;p>&lt;img src="https://pinkhello.me/Kafka%E4%B8%8EDebezium%E6%9E%84%E5%BB%BACDC%E7%AE%A1%E9%81%93/debezium-architecture.png" alt="Debezium工作流程">&lt;/p>
&lt;h3 id="21-debezium-支持的数据库类型">2.1 Debezium 支持的数据库类型&lt;/h3>
&lt;ul>
&lt;li>MySQL&lt;/li>
&lt;li>MongoDB&lt;/li>
&lt;li>PostgreSQL&lt;/li>
&lt;li>Oracle&lt;/li>
&lt;li>SQL Server&lt;/li>
&lt;li>Db2&lt;/li>
&lt;li>Cassandra&lt;/li>
&lt;/ul>
&lt;h3 id="22-debezium-三种方式运行">2.2 Debezium 三种方式运行&lt;/h3>
&lt;ul>
&lt;li>Kafka Connect&lt;/li>
&lt;li>Debezium Server&lt;/li>
&lt;li>Embedded Engine&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/debezium/debezium-examples/tree/master/kinesis">https://github.com/debezium/debezium-examples/tree/master/kinesis&lt;/a>&lt;/p>
&lt;h2 id="3在-k8s-中构建基础debezium集群环境">3、在 K8S 中构建基础Debezium集群环境&lt;/h2>
&lt;p>镜像准备&lt;/p>
&lt;ul>
&lt;li>kafka | debezium &lt;a href="https://hub.docker.com/r/debezium/kafka">https://hub.docker.com/r/debezium/kafka&lt;/a>&lt;/li>
&lt;li>zookeeper | debezium &lt;a href="https://hub.docker.com/r/debezium/zookeeper">https://hub.docker.com/r/debezium/zookeeper&lt;/a>&lt;/li>
&lt;li>connect | debezium &lt;a href="https://hub.docker.com/r/debezium/connect">https://hub.docker.com/r/debezium/connect&lt;/a>&lt;/li>
&lt;li>schema-registry | confluentinc &lt;a href="https://hub.docker.com/r/confluentinc/cp-schema-registry">https://hub.docker.com/r/confluentinc/cp-schema-registry&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ps：
debezium 参考地址 &lt;a href="https://github.com/debezium/docker-images">https://github.com/debezium/docker-images&lt;/a>
confluentinc 参考地址 &lt;a href="https://github.com/confluentinc/cp-all-in-one/tree/latest/cp-all-in-one">https://github.com/confluentinc/cp-all-in-one/tree/latest/cp-all-in-one&lt;/a>&lt;/p>
&lt;h3 id="31-k8s基础知识">3.1 K8S基础知识&lt;/h3>
&lt;ul>
&lt;li>kafka 与 zookeeper 建设为 stateful 状态集群&lt;/li>
&lt;li>schema-registry 主要为了 支持 avro 格式这些不需要写到 kafka 消息头里面，减少消息的大小，额外的服务，属于 kafka 生态，存储依赖 kafka broker保证稳定性。&lt;/li>
&lt;li>k8s steteful 集群 0&amp;hellip;~ n 个 POD&lt;/li>
&lt;li>zookeeper 里面 zoo.cfg 指定的是从 1 开始&lt;/li>
&lt;li>kafka 里面 broker 也是从 1 开始&lt;/li>
&lt;/ul>
&lt;h3 id="32-zookeeper-构建">3.2 zookeeper 构建&lt;/h3>
&lt;ul>
&lt;li>对应的 docker-entrypoint.sh 需要改写，注重 zoo.cfg 的生成&lt;/li>
&lt;li>开放 2888 端口 3888 端口 2181 端口&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#228b22"># 使用的 debezium zk 镜像&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#228b22"># https://github.com/debezium/docker-images/blob/master/zookeeper/1.4/README.md&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Service&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper-hs&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">2888&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>server&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">3888&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>leader-election&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">2181&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>client&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">clusterIP&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>None&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>apps/v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>StatefulSet&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">serviceName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper-hs&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">3&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">updateStrategy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>RollingUpdate&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">podManagementPolicy&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>OrderedReady&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">template&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">affinity&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">podAntiAffinity&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requiredDuringSchedulingIgnoredDuringExecution&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">labelSelector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">matchExpressions&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">key&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;app&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">operator&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>In&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">values&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- zookeeper&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">topologyKey&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;kubernetes.io/hostname&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">securityContext&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fsGroup&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1000&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">runAsUser&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1000&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">containers&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Always&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>debezium/zookeeper:1.3&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">2181&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>client&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">2888&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>server&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">3888&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>leader-election&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requests&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">cpu&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>50m&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">memory&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>1500Mi&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">command&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- bash&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- -ec&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- |&lt;span style="color:#cd5555">
&lt;/span>&lt;span style="color:#cd5555"> if [ ! -d &amp;#34;/zookeeper/zdata/data&amp;#34; ];then
&lt;/span>&lt;span style="color:#cd5555"> mkdir /zookeeper/zdata/data
&lt;/span>&lt;span style="color:#cd5555"> fi
&lt;/span>&lt;span style="color:#cd5555"> if [ ! -d &amp;#34;/zookeeper/zdata/txns&amp;#34; ];then
&lt;/span>&lt;span style="color:#cd5555"> mkdir /zookeeper/zdata/txns
&lt;/span>&lt;span style="color:#cd5555"> fi
&lt;/span>&lt;span style="color:#cd5555"> export INDEX=${HOSTNAME##*-}
&lt;/span>&lt;span style="color:#cd5555"> echo $INDEX
&lt;/span>&lt;span style="color:#cd5555"> export SERVER_ID=$(( INDEX + 1 ))
&lt;/span>&lt;span style="color:#cd5555"> export SERVER_COUNT=3
&lt;/span>&lt;span style="color:#cd5555"> export LOG_LEVEL=INFO
&lt;/span>&lt;span style="color:#cd5555"> cp -rn $ZK_HOME/conf.orig/* $ZK_HOME/conf
&lt;/span>&lt;span style="color:#cd5555"> sed -i -r -e &amp;#34;s|\\$\\{zookeeper.root.logger\\}|$LOG_LEVEL, CONSOLE|g&amp;#34; $ZK_HOME/conf/log4j.properties
&lt;/span>&lt;span style="color:#cd5555"> sed -i -r -e &amp;#34;s|\\$\\{zookeeper.console.threshold\\}|$LOG_LEVEL|g&amp;#34; $ZK_HOME/conf/log4j.properties
&lt;/span>&lt;span style="color:#cd5555"> echo &amp;#34;&amp;#34; &amp;gt;&amp;gt; $ZK_HOME/conf/zoo.cfg
&lt;/span>&lt;span style="color:#cd5555"> echo &amp;#34;#Server List&amp;#34; &amp;gt;&amp;gt; $ZK_HOME/conf/zoo.cfg
&lt;/span>&lt;span style="color:#cd5555"> for i in $( eval echo {1..$SERVER_COUNT});do
&lt;/span>&lt;span style="color:#cd5555"> export HS_INDEX=$((i - 1))
&lt;/span>&lt;span style="color:#cd5555"> if [ &amp;#34;$SERVER_ID&amp;#34; = &amp;#34;$i&amp;#34; ];then
&lt;/span>&lt;span style="color:#cd5555"> echo &amp;#34;server.$i=0.0.0.0:2888:3888&amp;#34; &amp;gt;&amp;gt; $ZK_HOME/conf/zoo.cfg
&lt;/span>&lt;span style="color:#cd5555"> else
&lt;/span>&lt;span style="color:#cd5555"> echo &amp;#34;server.$i=zookeeper-$HS_INDEX.zookeeper-hs:2888:3888&amp;#34; &amp;gt;&amp;gt; $ZK_HOME/conf/zoo.cfg
&lt;/span>&lt;span style="color:#cd5555"> fi
&lt;/span>&lt;span style="color:#cd5555"> done
&lt;/span>&lt;span style="color:#cd5555"> echo ${SERVER_ID} &amp;gt; $ZK_HOME/zdata/data/myid
&lt;/span>&lt;span style="color:#cd5555"> sed -i &amp;#34;s|/zookeeper/data|/zookeeper/zdata/data|g&amp;#34; $ZK_HOME/conf/zoo.cfg
&lt;/span>&lt;span style="color:#cd5555"> sed -i &amp;#34;s|/zookeeper/txns|/zookeeper/zdata/txns|g&amp;#34; $ZK_HOME/conf/zoo.cfg
&lt;/span>&lt;span style="color:#cd5555"> export ZOOCFGDIR=&amp;#34;$ZK_HOME/conf&amp;#34;
&lt;/span>&lt;span style="color:#cd5555"> export ZOOCFG=&amp;#34;zoo.cfg&amp;#34;
&lt;/span>&lt;span style="color:#cd5555"> exec $ZK_HOME/bin/zkServer.sh start-foreground&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zk-data&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>/zookeeper/zdata&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">volumeClaimTemplates&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zk-data&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">accessModes&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>[&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;ReadWriteOnce&amp;#34;&lt;/span>&lt;span style="color:#bbb"> &lt;/span>]&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">storageClassName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>alicloud-disk-efficiency&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requests&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">storage&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>20Gi&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Service&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper-hs&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">2888&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>server&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">3888&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>leader-election&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">2181&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>client&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">clusterIP&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>None&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考文档 &lt;a href="https://github.com/debezium/docker-images/blob/master/zookeeper/1.3/README.md">https://github.com/debezium/docker-images/blob/master/zookeeper/1.3/README.md&lt;/a>&lt;/p>
&lt;h3 id="33-kafka-构建">3.3 kafka 构建&lt;/h3>
&lt;ul>
&lt;li>Kafka BrokerID 要变更，通过 POD 的 Index&lt;/li>
&lt;li>KAFKA_LISTENERS 与 KAFKA_ADVERTISED_LISTENERS 的配置&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>apps/v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>StatefulSet&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">serviceName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">3&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">updateStrategy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>RollingUpdate&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">podManagementPolicy&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>OrderedReady&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">template&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">affinity&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">podAntiAffinity&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requiredDuringSchedulingIgnoredDuringExecution&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">labelSelector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">matchExpressions&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">key&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;app&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">operator&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>In&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">values&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- kafka&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">topologyKey&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;kubernetes.io/hostname&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">securityContext&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fsGroup&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1000&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">runAsUser&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1000&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">containers&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Always&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>debezium/kafka:1.3&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">9092&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">9093&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requests&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">cpu&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>100m&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">memory&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>1500Mi&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">env&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>ZOOKEEPER_CONNECT&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;zookeeper-0.zookeeper-hs:2181,zookeeper-1.zookeeper-hs:2181,zookeeper-2.zookeeper-hs:2181&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>LOG_LEVEL&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;INFO&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>KAFKA_LISTENER_SECURITY_PROTOCOL_MAP&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;PLAINTEXT:PLAINTEXT,EXTERNAL_PLAINTEXT:PLAINTEXT&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>KAFKA_INTER_BROKER_LISTENER_NAME&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;PLAINTEXT&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>KAFKA_LISTENERS&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;PLAINTEXT://0.0.0.0:9092,EXTERNAL_PLAINTEXT://0.0.0.0:9093&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>POD_IP&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">valueFrom&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fieldRef&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fieldPath&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>status.podIP&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">command&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- bash&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- -ec&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- |&lt;span style="color:#cd5555">
&lt;/span>&lt;span style="color:#cd5555"> export INDEX=${HOSTNAME##*-}
&lt;/span>&lt;span style="color:#cd5555"> export BROKER_ID=$((INDEX + 1))
&lt;/span>&lt;span style="color:#cd5555"> PORT=$((INDEX + 9093))
&lt;/span>&lt;span style="color:#cd5555"> export JMX_PORT=$((INDEX + 9999))
&lt;/span>&lt;span style="color:#cd5555"> export KAFKA_ADVERTISED_LISTENERS=&amp;#34;PLAINTEXT://${POD_IP}:9092,EXTERNAL_PLAINTEXT://${LB_IP}:${PORT}&amp;#34;
&lt;/span>&lt;span style="color:#cd5555"> exec /docker-entrypoint.sh start&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-data&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>/kafka/data&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">volumeClaimTemplates&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-data&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">accessModes&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>[&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;ReadWriteOnce&amp;#34;&lt;/span>&lt;span style="color:#bbb"> &lt;/span>]&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">storageClassName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>alicloud-disk-efficiency&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requests&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">storage&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>20Gi&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Service&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-{index}&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">annotations&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># 参考阿里云LB Service 配置 自动创建 好几种 LB类型，这边是内网LB&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">service.beta.kubernetes.io/alicloud-loadbalancer-address-type&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>intranet&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">service.beta.kubernetes.io/alicloud-loadbalancer-id&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>{LB实例ID}&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">service.beta.kubernetes.io/alicloud-loadbalancer-force-override-listeners&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#39;true&amp;#39;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">externalTrafficPolicy&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Local&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>LoadBalancer&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">statefulset.kubernetes.io/pod-name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-{index}&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>external&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>{{&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">9093&lt;/span>&lt;span style="color:#bbb"> &lt;/span>+ index }}&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">protocol&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>TCP&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">9093&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>jmx&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>{{&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">9999&lt;/span>&lt;span style="color:#bbb"> &lt;/span>+ index }}&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">protocol&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>TCP&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>{{&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">9999&lt;/span>&lt;span style="color:#bbb"> &lt;/span>+ index }}&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>internal&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">9092&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">protocol&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>TCP&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">9092&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">piVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>networking.k8s.io/v1beta1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Ingress&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">annotations&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">nginx.ingress.kubernetes.io/enable-global-auth&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">rules&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">host&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager.{域名}.com&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">http&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">paths&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">path&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>/&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">backend&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">serviceName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">servicePort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">80&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Service&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>http&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">80&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">9000&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>apps/v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Deployment&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">template&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">containers&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Always&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>dockerkafka/kafka-manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">9000&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">env&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>ZK_HOSTS&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;zookeeper-0.zookeeper-hs:2181,zookeeper-1.zookeeper-hs:2181,zookeeper-2.zookeeper-hs:2181&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requests&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">cpu&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>40m&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">memory&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>500Mi&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考文档 &lt;a href="https://github.com/debezium/docker-images/blob/master/kafka/1.4/README.md">https://github.com/debezium/docker-images/blob/master/kafka/1.4/README.md&lt;/a>&lt;/p>
&lt;h3 id="33-kafka-schema-registry-构建">3.3 kafka schema-registry 构建&lt;/h3>
&lt;ul>
&lt;li>Docker 基础镜像环境启动脚本 &lt;a href="https://github.com/confluentinc/schema-registry-images/blob/master/schema-registry/include/etc/confluent/docker/">https://github.com/confluentinc/schema-registry-images/blob/master/schema-registry/include/etc/confluent/docker/&lt;/a>&lt;/li>
&lt;li>先启动 pod 再映射 service，否则启动报错, 在这个项目里面有个 SCHEMA_REGISTRY_PORT,在基础启动脚本里面会主动退出&lt;/li>
&lt;li>配置 ZK 的话，在kafka listener 里面要有类型 PLAINTEXT， 集群内网外网环境配置了 KAFKA_LISTENER_SECURITY_PROTOCOL_MAP，按照正常的Kafka是正常的，但是 schema-registry 实现的是没有去找的，未做映射，只要没有 PLAINTEXT 就报错退出，启动失败&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>apps/v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Deployment&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>schema-registry&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>schema-registry&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>schema-registry&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">template&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>schema-registry&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">securityContext&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">fsGroup&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1000&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">runAsUser&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1000&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">containers&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>schema-registry&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Always&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>confluentinc/cp-schema-registry:6.0.0&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">8081&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">env&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>SCHEMA_REGISTRY_HOST_NAME&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>schema-registry&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>zookeeper-0.zookeeper-hs:2181,zookeeper-1.zookeeper-hs:2181,zookeeper-2.zookeeper-hs:2181&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-0:9092,kafka-1:9092,kafka-2:9092&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requests&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">cpu&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>40m&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">memory&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>500Mi&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Service&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>schema-registry&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>schema-registry&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>http&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">8081&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>schema-registry&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考文档 &lt;a href="https://github.com/confluentinc/cp-all-in-one/blob/latest/cp-all-in-one-cloud/docker-compose.yml">https://github.com/confluentinc/cp-all-in-one/blob/latest/cp-all-in-one-cloud/docker-compose.yml&lt;/a>&lt;/p>
&lt;h3 id="33-kafka-connect-建设">3.3 kafka connect 建设&lt;/h3>
&lt;ul>
&lt;li>配置参数 等等 &lt;a href="http://kafka.apache.org/documentation/#connectconfigs">http://kafka.apache.org/documentation/#connectconfigs&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Service&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>connect&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>connect&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>http&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">80&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">8083&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>connect&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>apps/v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Deployment&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>connect&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>connect&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">3&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>connect&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">template&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>connect&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">containers&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>connect&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Always&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>debezium/connect:1.3&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">8083&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">env&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>LOG_LEVEL&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;INFO&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>BOOTSTRAP_SERVERS&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;kafka-0:9092,kafka-1:9092,kafka-2:9092&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>GROUP_ID&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;test_connect&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>CONFIG_STORAGE_TOPIC&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;test_connect_configs&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>OFFSET_STORAGE_TOPIC&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;test_connect_offset&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>STATUS_STORAGE_TOPIC&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;test_connect_status&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>KEY_CONVERTER&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;io.confluent.connect.avro.AvroConverter&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>VALUE_CONVERTER&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;io.confluent.connect.avro.AvroConverter&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>INTERNAL_KEY_CONVERTER&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;org.apache.kafka.connect.json.JsonConverter&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>INTERNAL_VALUE_CONVERTER&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;org.apache.kafka.connect.json.JsonConverter&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_UR&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;http://schema-registry:8081&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_UR&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;http://schema-registry:8081&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requests&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">cpu&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>40m&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">memory&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>500Mi&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#228b22"># 使用 kafka-connect-ui构建&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>networking.k8s.io/v1beta1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Ingress&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">annotations&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">nginx.ingress.kubernetes.io/enable-global-auth&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">rules&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">host&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect.{域名}.com&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">http&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">paths&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">path&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>/&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">backend&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">serviceName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">servicePort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">80&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Service&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>http&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">port&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">80&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">targetPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">8000&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>apps/v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Deployment&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">selector&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">matchLabels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">template&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">app&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">containers&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">imagePullPolicy&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Always&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>landoop/kafka-connect-ui&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">8000&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">env&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>CONNECT_URL&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">value&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;http://connect&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requests&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">cpu&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>40m&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">memory&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>500Mi&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考文档&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/debezium/docker-images/blob/master/connect/1.4/README.md">https://github.com/debezium/docker-images/blob/master/connect/1.4/README.md&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/debezium/debezium-examples/blob/master/tutorial/docker-compose-mysql-avro-connector.yaml">https://github.com/debezium/debezium-examples/blob/master/tutorial/docker-compose-mysql-avro-connector.yaml&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="数据湖篇">数据湖篇&lt;/h1>
&lt;h2 id="1hudi-data-lake">1、Hudi Data Lake？&lt;/h2>
&lt;p>之前构建了基于 &lt;code>Debezium&lt;/code> 捕获基本的数据变化，发送至 &lt;code>Kafka&lt;/code>, 后面的对接方可以是哪些呢？这些是要处理的&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>Apache Hudi 是构建在 HDFS/S3 等大数据量的存储，旨在解决大数据生态系统中需要&lt;code>插入更新&lt;/code>及&lt;code>增量消费&lt;/code>的摄取管道和 &lt;code>ETL管道的低效&lt;/code>问题。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Near Real-Time Ingestion （近实时获取）&lt;/p>
&lt;p>将数据从外部数据&lt;code>event logs, databases, external sources&lt;/code>提取到&lt;code>Hadoop Data Lake&lt;/code>。
对于&lt;code>RDBMS&lt;/code>摄取，&lt;code>Hudi&lt;/code>通过&lt;code>Upserts&lt;/code>提供了更快的负载，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Near Real-time Analytics （近实时分析）&lt;/p>
&lt;p>&lt;code>Hadoop上&lt;/code>的交互式SQL解决方案（如&lt;code>Presto&lt;/code>和&lt;code>SparkSQL&lt;/code>）。通过&lt;code>Hudi&lt;/code>将数据的更新时间缩短至几分钟，还可以对存储在&lt;code>DFS&lt;/code>中的多个大小更大的表进行实时分析。
而且，&lt;code>Hudi&lt;/code> 没有外部依赖项（如&lt;code>HBase&lt;/code>群集），因此可以在不增加运营开销的情况下，对更新鲜的分析进行更快的分析。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Incremental Processing Pipelines （增量处理管道）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Data Dispersal From DFS （分散数据）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://pinkhello.me/Kafka%E4%B8%8EDebezium%E6%9E%84%E5%BB%BACDC%E7%AE%A1%E9%81%93/hudi-lake.png" alt="Hudi架构">&lt;/p>
&lt;h2 id="2timeline">2、Timeline&lt;/h2>
&lt;p>Hudi的核心是维护&lt;code>timeline&lt;/code>在不同&lt;code>instants&lt;/code>时间上对表上执行的所有操作中一个操作，这有助于提供表的即时视图，
同时还有效地支持按到达顺序对数据进行检索。&lt;/p>
&lt;p>Hudi瞬间包含以下组件&lt;/p>
&lt;ul>
&lt;li>Instant action ：在表格上执行的操作类型&lt;/li>
&lt;li>Instant time ：即时时间通常是一个时间戳记（例如：20190117010349），该时间戳记以动作开始时间的顺序单调增加。&lt;/li>
&lt;li>state ：即时状态&lt;/li>
&lt;/ul>
&lt;p>Hudi保证在&lt;code>timeline&lt;/code>上执行的操作基于当前时间是原子性和时间轴上一致的。&lt;/p>
&lt;p>执行的关键动作包括&lt;/p>
&lt;ul>
&lt;li>COMMITS - 提交记录 一批记录原子写入表中 提交表示将一批记录原子写入表中。&lt;/li>
&lt;li>CLEANS - 后台清除表中不需要的文件旧版本记录。&lt;/li>
&lt;li>DELTA_COMMIT - 增量提交是指将一批记录原子写入&lt;code>MergeOnRead&lt;/code>类型表中，其中一些/所有 数据 可以只写到增量日志中。&lt;/li>
&lt;li>COMPACTION - 调和&lt;code>Hudi&lt;/code>中不同数据结构的后台活动，例如：将更新从基于行的日志文件移动到列格式。在内部，压缩表现为时间轴上的特殊提交&lt;/li>
&lt;li>ROLLBACK - 表示提交/增量提交不成功且已回滚，删除了在写入过程中产生的任何部分文件&lt;/li>
&lt;li>SAVEPOINT - 将某些文件组标记为“已保存”，以便清理程序不会删除它们。在发生灾难/数据恢复的情况下，它有助于将表还原到时间轴上的某个点。&lt;/li>
&lt;/ul>
&lt;p>任何给定的瞬间都可以处于以下状态之一&lt;/p>
&lt;ul>
&lt;li>REQUESTED -表示已经安排了动作，但尚未开始&lt;/li>
&lt;li>INFLIGHT -表示当前正在执行该操作&lt;/li>
&lt;li>COMPLETED -表示在时间表上完成了一项操作
&lt;img src="https://pinkhello.me/Kafka%E4%B8%8EDebezium%E6%9E%84%E5%BB%BACDC%E7%AE%A1%E9%81%93/hudi_c.png" alt="COW">&lt;/li>
&lt;/ul>
&lt;h2 id="3hudi-的存储类型">3、Hudi 的存储类型&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>COW Copy On Write 快照查询 + 增量查询&lt;/p>
&lt;p>数据仅仅以 列文件格式 parquet 存储，每次写操作后数据的同步 Merge 以更新版本并重写文件，COW表中数据使用是最新的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://pinkhello.me/Kafka%E4%B8%8EDebezium%E6%9E%84%E5%BB%BACDC%E7%AE%A1%E9%81%93/hudi_cow.png" alt="COW">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>MOR merge on read 快照查询 + 增量查询 + 读取优化&lt;/p>
&lt;p>数据以 列文件格式 parquet 和 基于 行文件格式 avro 组合存储。每次写入操作将增量创建文件。然后 compact 以生成 列文件 的最新版&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://pinkhello.me/Kafka%E4%B8%8EDebezium%E6%9E%84%E5%BB%BACDC%E7%AE%A1%E9%81%93/hudi_mor.png" alt="MOR">&lt;/p>
- https://pinkhello.me/posts/13-kafka%E4%B8%8Edebezium%E6%9E%84%E5%BB%BAcdc%E7%AE%A1%E9%81%93/ - PinkHello, All Rights Reserved</description></item><item><title>RocketMQ源码阅读 NameServer</title><link>https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-nameserver/</link><pubDate>Tue, 25 May 2021 19:00:00 +0800</pubDate><guid>https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-nameserver/</guid><description>PinkHello https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-nameserver/ -&lt;h1 id="nameserver-角色">NameServer 角色&lt;/h1>
&lt;p>&lt;code>NameSever&lt;/code> 在 &lt;code>RocketMQ&lt;/code> 起到重要的角色，承担着路由管理、服务注册、服务发现等核心功能。&lt;/p>
&lt;ul>
&lt;li>接收 &lt;code>Broker&lt;/code> 的请求注册 &lt;code>Broker&lt;/code> 路由信息&lt;/li>
&lt;li>接收 &lt;code>Client&lt;/code> 请求根据某个 &lt;code>topic&lt;/code> 获取所有到 &lt;code>broker&lt;/code> 的路由信息&lt;/li>
&lt;/ul>
&lt;h1 id="namesrv-核心类">NameSrv 核心类&lt;/h1>
&lt;ul>
&lt;li>&lt;code>NamesrvStartup&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">NamesrvStartup&lt;/span> {
&lt;span style="color:#228b22">//...
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> NamesrvController &lt;span style="color:#008b45">main0&lt;/span>(String[] args) {
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
NamesrvController controller = createNamesrvController(args);
&lt;span style="color:#228b22">//启动 NamesrvController
&lt;/span>&lt;span style="color:#228b22">&lt;/span> start(controller);
String tip = &lt;span style="color:#cd5555">&amp;#34;The Name Server boot success. serializeType=&amp;#34;&lt;/span> + RemotingCommand.&lt;span style="color:#658b00">getSerializeTypeConfigInThisServer&lt;/span>();
log.&lt;span style="color:#658b00">info&lt;/span>(tip);
System.&lt;span style="color:#658b00">out&lt;/span>.&lt;span style="color:#658b00">printf&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;%s%n&amp;#34;&lt;/span>, tip);
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> controller;
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (Throwable e) {
e.&lt;span style="color:#658b00">printStackTrace&lt;/span>();
System.&lt;span style="color:#658b00">exit&lt;/span>(-1);
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
}
&lt;span style="color:#228b22">//...
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">/**
&lt;/span>&lt;span style="color:#228b22"> * 启动 NamesrvController
&lt;/span>&lt;span style="color:#228b22"> * @param controller
&lt;/span>&lt;span style="color:#228b22"> * @return
&lt;/span>&lt;span style="color:#228b22"> * @throws Exception
&lt;/span>&lt;span style="color:#228b22"> */&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> NamesrvController &lt;span style="color:#008b45">start&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> NamesrvController controller) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> Exception {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">null&lt;/span> == controller) {
&lt;span style="color:#8b008b;font-weight:bold">throw&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> IllegalArgumentException(&lt;span style="color:#cd5555">&amp;#34;NamesrvController is null&amp;#34;&lt;/span>);
}
&lt;span style="color:#228b22">// NamesrvController 初始化
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">boolean&lt;/span> initResult = controller.&lt;span style="color:#658b00">initialize&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!initResult) {
controller.&lt;span style="color:#658b00">shutdown&lt;/span>();
System.&lt;span style="color:#658b00">exit&lt;/span>(-3);
}
&lt;span style="color:#228b22">// 启动后的钩子
&lt;/span>&lt;span style="color:#228b22">&lt;/span> Runtime.&lt;span style="color:#658b00">getRuntime&lt;/span>().&lt;span style="color:#658b00">addShutdownHook&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ShutdownHookThread(log, &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Callable&amp;lt;Void&amp;gt;() {
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> Void &lt;span style="color:#008b45">call&lt;/span>() &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> Exception {
controller.&lt;span style="color:#658b00">shutdown&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
}
}));
controller.&lt;span style="color:#658b00">start&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> controller;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>NamesrvController&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">NamesrvController&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">boolean&lt;/span> &lt;span style="color:#008b45">initialize&lt;/span>() {
&lt;span style="color:#228b22">//从配置文件以及一系列的配置中，捞取配置放入到 Config Manager
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">kvConfigManager&lt;/span>.&lt;span style="color:#658b00">load&lt;/span>();
&lt;span style="color:#228b22">//创建 Netty 通信 Server
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">remotingServer&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> NettyRemotingServer(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">nettyServerConfig&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">brokerHousekeepingService&lt;/span>);
&lt;span style="color:#228b22">//创建线程池
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">remotingExecutor&lt;/span> =
Executors.&lt;span style="color:#658b00">newFixedThreadPool&lt;/span>(nettyServerConfig.&lt;span style="color:#658b00">getServerWorkerThreads&lt;/span>(), &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ThreadFactoryImpl(&lt;span style="color:#cd5555">&amp;#34;RemotingExecutorThread_&amp;#34;&lt;/span>));
&lt;span style="color:#228b22">// 注册事件处理器
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">registerProcessor&lt;/span>();
&lt;span style="color:#228b22">//扫描broker &amp;amp; 移除不存活的broker 间隔 10s 执行
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">scheduledExecutorService&lt;/span>.&lt;span style="color:#658b00">scheduleAtFixedRate&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Runnable() {
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">run&lt;/span>() {
NamesrvController.&lt;span style="color:#658b00">this&lt;/span>.&lt;span style="color:#658b00">routeInfoManager&lt;/span>.&lt;span style="color:#658b00">scanNotActiveBroker&lt;/span>();
}
}, 5, 10, TimeUnit.&lt;span style="color:#658b00">SECONDS&lt;/span>);
&lt;span style="color:#228b22">//间隔 10 min 中, 打印配置
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">scheduledExecutorService&lt;/span>.&lt;span style="color:#658b00">scheduleAtFixedRate&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Runnable() {
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">run&lt;/span>() {
NamesrvController.&lt;span style="color:#658b00">this&lt;/span>.&lt;span style="color:#658b00">kvConfigManager&lt;/span>.&lt;span style="color:#658b00">printAllPeriodically&lt;/span>();
}
}, 1, 10, TimeUnit.&lt;span style="color:#658b00">MINUTES&lt;/span>);
&lt;span style="color:#228b22">//todo ....SSL 的代码，忽略
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>;
}
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">registerProcessor&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (namesrvConfig.&lt;span style="color:#658b00">isClusterTest&lt;/span>()) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">remotingServer&lt;/span>.&lt;span style="color:#658b00">registerDefaultProcessor&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ClusterTestRequestProcessor(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>, namesrvConfig.&lt;span style="color:#658b00">getProductEnvName&lt;/span>()),
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">remotingExecutor&lt;/span>);
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">remotingServer&lt;/span>.&lt;span style="color:#658b00">registerDefaultProcessor&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> DefaultRequestProcessor(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>), &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">remotingExecutor&lt;/span>);
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>KvConfigManager&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">KVConfigManager&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> ReadWriteLock lock = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ReentrantReadWriteLock();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> HashMap&amp;lt;String&lt;span style="color:#228b22">/* Namespace */&lt;/span>, HashMap&amp;lt;String&lt;span style="color:#228b22">/* Key */&lt;/span>, String&lt;span style="color:#228b22">/* Value */&lt;/span>&amp;gt;&amp;gt; configTable =
&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> HashMap&amp;lt;String, HashMap&amp;lt;String, String&amp;gt;&amp;gt;();
&lt;span style="color:#228b22">//.....
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">load&lt;/span>() {
String content = &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
content = MixAll.&lt;span style="color:#658b00">file2String&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">namesrvController&lt;/span>.&lt;span style="color:#658b00">getNamesrvConfig&lt;/span>().&lt;span style="color:#658b00">getKvConfigPath&lt;/span>());
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (IOException e) {
log.&lt;span style="color:#658b00">warn&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;Load KV config table exception&amp;#34;&lt;/span>, e);
}
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (content != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
KVConfigSerializeWrapper kvConfigSerializeWrapper =
KVConfigSerializeWrapper.&lt;span style="color:#658b00">fromJson&lt;/span>(content, KVConfigSerializeWrapper.&lt;span style="color:#658b00">class&lt;/span>);
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">null&lt;/span> != kvConfigSerializeWrapper) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">configTable&lt;/span>.&lt;span style="color:#658b00">putAll&lt;/span>(kvConfigSerializeWrapper.&lt;span style="color:#658b00">getConfigTable&lt;/span>());
log.&lt;span style="color:#658b00">info&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;load KV config table OK&amp;#34;&lt;/span>);
}
}
}
&lt;span style="color:#228b22">//..... 其他代码省略
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// 周期打印配置的
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">printAllPeriodically&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">lock&lt;/span>.&lt;span style="color:#658b00">readLock&lt;/span>().&lt;span style="color:#658b00">lockInterruptibly&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
log.&lt;span style="color:#658b00">info&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;--------------------------------------------------------&amp;#34;&lt;/span>);
{
log.&lt;span style="color:#658b00">info&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;configTable SIZE: {}&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">configTable&lt;/span>.&lt;span style="color:#658b00">size&lt;/span>());
Iterator&amp;lt;Entry&amp;lt;String, HashMap&amp;lt;String, String&amp;gt;&amp;gt;&amp;gt; it =
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">configTable&lt;/span>.&lt;span style="color:#658b00">entrySet&lt;/span>().&lt;span style="color:#658b00">iterator&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">while&lt;/span> (it.&lt;span style="color:#658b00">hasNext&lt;/span>()) {
Entry&amp;lt;String, HashMap&amp;lt;String, String&amp;gt;&amp;gt; next = it.&lt;span style="color:#658b00">next&lt;/span>();
Iterator&amp;lt;Entry&amp;lt;String, String&amp;gt;&amp;gt; itSub = next.&lt;span style="color:#658b00">getValue&lt;/span>().&lt;span style="color:#658b00">entrySet&lt;/span>().&lt;span style="color:#658b00">iterator&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">while&lt;/span> (itSub.&lt;span style="color:#658b00">hasNext&lt;/span>()) {
Entry&amp;lt;String, String&amp;gt; nextSub = itSub.&lt;span style="color:#658b00">next&lt;/span>();
log.&lt;span style="color:#658b00">info&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;configTable NS: {} Key: {} Value: {}&amp;#34;&lt;/span>, next.&lt;span style="color:#658b00">getKey&lt;/span>(), nextSub.&lt;span style="color:#658b00">getKey&lt;/span>(),
nextSub.&lt;span style="color:#658b00">getValue&lt;/span>());
}
}
}
} &lt;span style="color:#8b008b;font-weight:bold">finally&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">lock&lt;/span>.&lt;span style="color:#658b00">readLock&lt;/span>().&lt;span style="color:#658b00">unlock&lt;/span>();
}
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (InterruptedException e) {
log.&lt;span style="color:#658b00">error&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;printAllPeriodically InterruptedException&amp;#34;&lt;/span>, e);
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>RouteInfoManager&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">RouteInfoManager&lt;/span> {
&lt;span style="color:#228b22">//读写锁
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> ReadWriteLock lock = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ReentrantReadWriteLock();
&lt;span style="color:#228b22">// Topic 和 队列信息
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> HashMap&amp;lt;String&lt;span style="color:#228b22">/* topic */&lt;/span>, List&amp;lt;QueueData&amp;gt;&amp;gt; topicQueueTable;
&lt;span style="color:#228b22">// BrokerName 和 以 BrokerName 为单位的 Broker集合
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> HashMap&amp;lt;String&lt;span style="color:#228b22">/* brokerName */&lt;/span>, BrokerData&amp;gt; brokerAddrTable;
&lt;span style="color:#228b22">// 集群 以及 属于该集群的 brokerName 列表
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> HashMap&amp;lt;String&lt;span style="color:#228b22">/* clusterName */&lt;/span>, Set&amp;lt;String&lt;span style="color:#228b22">/* brokerName */&lt;/span>&amp;gt;&amp;gt; clusterAddrTable;
&lt;span style="color:#228b22">// 存活的 broker 地址列表
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> HashMap&amp;lt;String&lt;span style="color:#228b22">/* brokerAddr */&lt;/span>, BrokerLiveInfo&amp;gt; brokerLiveTable;
&lt;span style="color:#228b22">// broker 对应的 filter server 列表
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> HashMap&amp;lt;String&lt;span style="color:#228b22">/* brokerAddr */&lt;/span>, List&amp;lt;String&amp;gt;&lt;span style="color:#228b22">/* Filter Server */&lt;/span>&amp;gt; filterServerTable;
&lt;span style="color:#228b22">//...... 全部是关于上面这些缓存数据的修改更新等等代码
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
&lt;span style="color:#228b22">//额外的扫描清理方法
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">scanNotActiveBroker&lt;/span>() {
Iterator&amp;lt;Entry&amp;lt;String, BrokerLiveInfo&amp;gt;&amp;gt; it = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">brokerLiveTable&lt;/span>.&lt;span style="color:#658b00">entrySet&lt;/span>().&lt;span style="color:#658b00">iterator&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">while&lt;/span> (it.&lt;span style="color:#658b00">hasNext&lt;/span>()) {
Entry&amp;lt;String, BrokerLiveInfo&amp;gt; next = it.&lt;span style="color:#658b00">next&lt;/span>();
&lt;span style="color:#00688b;font-weight:bold">long&lt;/span> last = next.&lt;span style="color:#658b00">getValue&lt;/span>().&lt;span style="color:#658b00">getLastUpdateTimestamp&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> ((last + BROKER_CHANNEL_EXPIRED_TIME) &amp;lt; System.&lt;span style="color:#658b00">currentTimeMillis&lt;/span>()) {
RemotingUtil.&lt;span style="color:#658b00">closeChannel&lt;/span>(next.&lt;span style="color:#658b00">getValue&lt;/span>().&lt;span style="color:#658b00">getChannel&lt;/span>());
it.&lt;span style="color:#658b00">remove&lt;/span>();
log.&lt;span style="color:#658b00">warn&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;The broker channel expired, {} {}ms&amp;#34;&lt;/span>, next.&lt;span style="color:#658b00">getKey&lt;/span>(), BROKER_CHANNEL_EXPIRED_TIME);
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">onChannelDestroy&lt;/span>(next.&lt;span style="color:#658b00">getKey&lt;/span>(), next.&lt;span style="color:#658b00">getValue&lt;/span>().&lt;span style="color:#658b00">getChannel&lt;/span>());
}
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>DefaultRequestProcessor&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">DefaultRequestProcessor&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> AsyncNettyRequestProcessor &lt;span style="color:#8b008b;font-weight:bold">implements&lt;/span> NettyRequestProcessor {
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> RemotingCommand &lt;span style="color:#008b45">processRequest&lt;/span>(ChannelHandlerContext ctx,
RemotingCommand request) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> RemotingCommandException {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (ctx != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
log.&lt;span style="color:#658b00">debug&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;receive request, {} {} {}&amp;#34;&lt;/span>,
request.&lt;span style="color:#658b00">getCode&lt;/span>(),
RemotingHelper.&lt;span style="color:#658b00">parseChannelRemoteAddr&lt;/span>(ctx.&lt;span style="color:#658b00">channel&lt;/span>()),
request);
}
&lt;span style="color:#8b008b;font-weight:bold">switch&lt;/span> (request.&lt;span style="color:#658b00">getCode&lt;/span>()) {
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">PUT_KV_CONFIG&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">putKVConfig&lt;/span>(ctx, request); &lt;span style="color:#228b22">// KvConfigManager 存放配置并持久化
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_KV_CONFIG&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">getKVConfig&lt;/span>(ctx, request); &lt;span style="color:#228b22">// KvConfigManager 查询配置
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">DELETE_KV_CONFIG&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">deleteKVConfig&lt;/span>(ctx, request); &lt;span style="color:#228b22">// KvConfigManager 删除配置
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">QUERY_DATA_VERSION&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> queryBrokerTopicConfig(ctx, request); &lt;span style="color:#228b22">// 查询数据的版本信息
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">REGISTER_BROKER&lt;/span>:
Version brokerVersion = MQVersion.&lt;span style="color:#658b00">value2Version&lt;/span>(request.&lt;span style="color:#658b00">getVersion&lt;/span>());
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (brokerVersion.&lt;span style="color:#658b00">ordinal&lt;/span>() &amp;gt;= MQVersion.&lt;span style="color:#658b00">Version&lt;/span>.&lt;span style="color:#658b00">V3_0_11&lt;/span>.&lt;span style="color:#658b00">ordinal&lt;/span>()) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">registerBrokerWithFilterServer&lt;/span>(ctx, request); &lt;span style="color:#228b22">// 注册 broker
&lt;/span>&lt;span style="color:#228b22">&lt;/span> } &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">registerBroker&lt;/span>(ctx, request);
}
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">UNREGISTER_BROKER&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">unregisterBroker&lt;/span>(ctx, request); &lt;span style="color:#228b22">// 解除注册 broker
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_ROUTEINFO_BY_TOPIC&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">getRouteInfoByTopic&lt;/span>(ctx, request); &lt;span style="color:#228b22">// 根据topic 获取 routeinfo
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_BROKER_CLUSTER_INFO&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">getBrokerClusterInfo&lt;/span>(ctx, request); &lt;span style="color:#228b22">//获取 broker 信息
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">WIPE_WRITE_PERM_OF_BROKER&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">wipeWritePermOfBroker&lt;/span>(ctx, request); &lt;span style="color:#228b22">// 获取 offset 信息
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_ALL_TOPIC_LIST_FROM_NAMESERVER&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> getAllTopicListFromNameserver(ctx, request); &lt;span style="color:#228b22">// 获取所有的 topic 列表
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">DELETE_TOPIC_IN_NAMESRV&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> deleteTopicInNamesrv(ctx, request); &lt;span style="color:#228b22">// 删除
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_KVLIST_BY_NAMESPACE&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">getKVListByNamespace&lt;/span>(ctx, request); &lt;span style="color:#228b22">// 获取 kvlist
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_TOPICS_BY_CLUSTER&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">getTopicsByCluster&lt;/span>(ctx, request); &lt;span style="color:#228b22">// 根据 cluster 获取 topic 列表
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_SYSTEM_TOPIC_LIST_FROM_NS&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">getSystemTopicListFromNs&lt;/span>(ctx, request);
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_UNIT_TOPIC_LIST&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">getUnitTopicList&lt;/span>(ctx, request);
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_HAS_UNIT_SUB_TOPIC_LIST&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">getHasUnitSubTopicList&lt;/span>(ctx, request);
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_HAS_UNIT_SUB_UNUNIT_TOPIC_LIST&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">getHasUnitSubUnUnitTopicList&lt;/span>(ctx, request);
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">UPDATE_NAMESRV_CONFIG&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">updateConfig&lt;/span>(ctx, request); &lt;span style="color:#228b22">// 更新 namesrv 配置
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RequestCode.&lt;span style="color:#658b00">GET_NAMESRV_CONFIG&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">getConfig&lt;/span>(ctx, request); &lt;span style="color:#228b22">// 获取 namesrv 配置
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">default&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">break&lt;/span>;
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
}
&lt;span style="color:#228b22">//...... 其他代码省略.....
&lt;/span>&lt;span style="color:#228b22">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="namesrv-启动流程">NameSrv 启动流程&lt;/h1>
&lt;p>&lt;img src="https://pinkhello.me/rocketmq/rocketmq-namesrv.jpg" alt="rocketmq_namesrv">&lt;/p>
&lt;ul>
&lt;li>入口从 &lt;code>NamesrvStartup#main0&lt;/code> 启动进入, 创建了一个 核心类 &lt;code>NamesrvController&lt;/code> 实例, &lt;code>NamesrvController#createNamesrvController&lt;/code> 开启了配置参数、网络参数的配置&lt;/li>
&lt;li>第二步，从 &lt;code>start&lt;/code> 方法开启 调用 &lt;code>NamesrvController#initialize&lt;/code> 方法&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;code>KvConfigManager#load&lt;/code> 从配置里面捞取配置合并配置到内存中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>构建了 &lt;code>NettyRemotingServer&lt;/code> 实例&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第6步 注册指令处理器，用于从网络接收到的指令，异步在线程池中执行业务&lt;/li>
&lt;li>第7、8步 定时器进行扫描检查和移除非活的有问题的 broker&lt;/li>
&lt;li>第9、10步 定期打印配置&lt;/li>
&lt;li>最后是 &lt;code>start&lt;/code> 方法&lt;/li>
&lt;li>
&lt;ul>
&lt;li>开启了 &lt;code>netty romting server&lt;/code> 开启 &lt;code>netty&lt;/code> 服务监听&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>开启 &lt;code>fileWatchService&lt;/code> 监听&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
- https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-nameserver/ - PinkHello, All Rights Reserved</description></item><item><title>RocketMQ源码阅读 通信组件</title><link>https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E9%80%9A%E4%BF%A1%E7%BB%84%E4%BB%B6/</link><pubDate>Sat, 22 May 2021 16:09:45 +0800</pubDate><guid>https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E9%80%9A%E4%BF%A1%E7%BB%84%E4%BB%B6/</guid><description>PinkHello https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E9%80%9A%E4%BF%A1%E7%BB%84%E4%BB%B6/ -&lt;h1 id="rocketmq-核心基石">RocketMQ 核心基石&lt;/h1>
&lt;p>前面已经介绍了 &lt;code>RocketMQ&lt;/code> 的基本的概念和组件。今天我们开启真正的源码的阅读诗篇, &lt;code>RocketMQ&lt;/code> 消息系各个组件 &lt;code>Producer&lt;/code>、&lt;code>Consumer&lt;/code>、&lt;code>Broker&lt;/code>、&lt;code>NameSrv&lt;/code> 通通离不开交互，那是使用的什么交互的呢。答案是TCP长链接。
而 &lt;code>RocketMQ&lt;/code> 开源代码内部，对通信相关的进行了一次封装，都在 rocketmq-remoting 模块下，这个模块被其他 &lt;code>client&lt;/code>、&lt;code>broker&lt;/code>、&lt;code>namesrv&lt;/code> 应用。&lt;/p>
&lt;p>直接先说 &lt;code>remoting&lt;/code> 的实现是基于 &lt;code>netty&lt;/code> 做了封装、启动了服务端和客户端，支持三种消息的发送方式:&lt;/p>
&lt;ul>
&lt;li>同步发送&lt;/li>
&lt;li>单向发送 (不需要关注响应)&lt;/li>
&lt;li>异步发送&lt;/li>
&lt;/ul>
&lt;p>下图为异步通信流程
&lt;img src="https://pinkhello.me/rocketmq/rocketmq_remoting.png" alt="rocketmq_remoting">&lt;/p>
&lt;h1 id="remoting-包下的核心接口体系">remoting 包下的核心接口体系&lt;/h1>
&lt;p>&lt;img src="https://pinkhello.me/rocketmq/package-remoting-uml.png" alt="remoting uml">&lt;/p>
&lt;h2 id="接口-remotingservice">接口 RemotingService&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">interface&lt;/span> &lt;span style="color:#008b45;font-weight:bold">RemotingService&lt;/span> {
&lt;span style="color:#228b22">// 开启
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">start&lt;/span>();
&lt;span style="color:#228b22">// 关闭
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">shutdown&lt;/span>();
&lt;span style="color:#228b22">// 注册 RPCHook
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">registerRPCHook&lt;/span>(RPCHook rpcHook);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="接口-remotingserver">接口 RemotingServer&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">interface&lt;/span> &lt;span style="color:#008b45;font-weight:bold">RemotingServer&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> RemotingService {
&lt;span style="color:#228b22">// 注册请求类型的处理器 【common 模块的 org.apache.rocketmq.common.protocol.RequestCode]
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">registerProcessor&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> requestCode, &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> NettyRequestProcessor processor,
&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> ExecutorService executor);
&lt;span style="color:#228b22">// 注册默认的处理器
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">registerDefaultProcessor&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> NettyRequestProcessor processor, &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> ExecutorService executor);
&lt;span style="color:#228b22">// 本地的端口
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">localListenPort&lt;/span>();
&lt;span style="color:#228b22">// 根据 requestCode 获取处理器和业务线程池
&lt;/span>&lt;span style="color:#228b22">&lt;/span> Pair&amp;lt;NettyRequestProcessor, ExecutorService&amp;gt; &lt;span style="color:#008b45">getProcessorPair&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> requestCode);
&lt;span style="color:#228b22">// 同步发送
&lt;/span>&lt;span style="color:#228b22">&lt;/span> RemotingCommand &lt;span style="color:#008b45">invokeSync&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> Channel channel, &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> RemotingCommand request,
&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> &lt;span style="color:#00688b;font-weight:bold">long&lt;/span> timeoutMillis) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> InterruptedException, RemotingSendRequestException,
RemotingTimeoutException;
&lt;span style="color:#228b22">// 异步发送
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">invokeAsync&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> Channel channel, &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> RemotingCommand request, &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> &lt;span style="color:#00688b;font-weight:bold">long&lt;/span> timeoutMillis,
&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> InvokeCallback invokeCallback) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> InterruptedException,
RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException;
&lt;span style="color:#228b22">// 单向发送
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">invokeOneway&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> Channel channel, &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> RemotingCommand request, &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> &lt;span style="color:#00688b;font-weight:bold">long&lt;/span> timeoutMillis)
&lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> InterruptedException, RemotingTooMuchRequestException, RemotingTimeoutException,
RemotingSendRequestException;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="实现-nettyremotingserver">实现 NettyRemotingServer&lt;/h2>
&lt;p>这边选择性的进行摘取记录描述啊&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">NettyRemotingServer&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> NettyRemotingAbstract &lt;span style="color:#8b008b;font-weight:bold">implements&lt;/span> RemotingServer {
&lt;span style="color:#228b22">// todo 此处代码省略号...
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// 构造
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#008b45">NettyRemotingServer&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> NettyServerConfig nettyServerConfig,
&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> ChannelEventListener channelEventListener) {
&lt;span style="color:#228b22">//调用 NettyRemotingAbstract 的构造初始化相关配置
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">super&lt;/span>(nettyServerConfig.&lt;span style="color:#658b00">getServerOnewaySemaphoreValue&lt;/span>(), nettyServerConfig.&lt;span style="color:#658b00">getServerAsyncSemaphoreValue&lt;/span>());
&lt;span style="color:#228b22">//开启一个ServerBootstrap
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">serverBootstrap&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ServerBootstrap();
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">nettyServerConfig&lt;/span> = nettyServerConfig;
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">channelEventListener&lt;/span> = channelEventListener;
&lt;span style="color:#228b22">//默认的 React
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> publicThreadNums = nettyServerConfig.&lt;span style="color:#658b00">getServerCallbackExecutorThreads&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (publicThreadNums &amp;lt;= 0) {
publicThreadNums = 4;
}
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">publicExecutor&lt;/span> = Executors.&lt;span style="color:#658b00">newFixedThreadPool&lt;/span>(publicThreadNums, &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ThreadFactory() {
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> AtomicInteger threadIndex = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> AtomicInteger(0);
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> Thread &lt;span style="color:#008b45">newThread&lt;/span>(Runnable r) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Thread(r, &lt;span style="color:#cd5555">&amp;#34;NettyServerPublicExecutor_&amp;#34;&lt;/span> + &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">threadIndex&lt;/span>.&lt;span style="color:#658b00">incrementAndGet&lt;/span>());
}
});
&lt;span style="color:#228b22">//根据系统环境或指的配置选择使用 Epoll 还是 Nio 模式
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (useEpoll()) {
&lt;span style="color:#228b22">//构建 EventLoopGroup 只有1个线程
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">eventLoopGroupBoss&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> EpollEventLoopGroup(1, &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ThreadFactory() {
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> AtomicInteger threadIndex = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> AtomicInteger(0);
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> Thread &lt;span style="color:#008b45">newThread&lt;/span>(Runnable r) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Thread(r, String.&lt;span style="color:#658b00">format&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;NettyEPOLLBoss_%d&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">threadIndex&lt;/span>.&lt;span style="color:#658b00">incrementAndGet&lt;/span>()));
}
});
&lt;span style="color:#228b22">//构建 eventLoopGroupSelector
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">eventLoopGroupSelector&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> EpollEventLoopGroup(nettyServerConfig.&lt;span style="color:#658b00">getServerSelectorThreads&lt;/span>(), &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ThreadFactory() {
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> AtomicInteger threadIndex = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> AtomicInteger(0);
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> threadTotal = nettyServerConfig.&lt;span style="color:#658b00">getServerSelectorThreads&lt;/span>();
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> Thread &lt;span style="color:#008b45">newThread&lt;/span>(Runnable r) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Thread(r, String.&lt;span style="color:#658b00">format&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;NettyServerEPOLLSelector_%d_%d&amp;#34;&lt;/span>, threadTotal, &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">threadIndex&lt;/span>.&lt;span style="color:#658b00">incrementAndGet&lt;/span>()));
}
});
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;span style="color:#228b22">// todo 此处代码省略号...
&lt;/span>&lt;span style="color:#228b22">&lt;/span> }
&lt;span style="color:#228b22">//夹在SSL上下文
&lt;/span>&lt;span style="color:#228b22">&lt;/span> loadSslContext();
}
&lt;span style="color:#228b22">//todo 此处代码省略号...
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
&lt;span style="color:#228b22">// 核心的 启动方法
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">start&lt;/span>() {
&lt;span style="color:#228b22">//构建 Worker线程，根据配置
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">defaultEventExecutorGroup&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> DefaultEventExecutorGroup(
nettyServerConfig.&lt;span style="color:#658b00">getServerWorkerThreads&lt;/span>(),
&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ThreadFactory() {
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> AtomicInteger threadIndex = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> AtomicInteger(0);
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> Thread &lt;span style="color:#008b45">newThread&lt;/span>(Runnable r) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Thread(r, &lt;span style="color:#cd5555">&amp;#34;NettyServerCodecThread_&amp;#34;&lt;/span> + &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">threadIndex&lt;/span>.&lt;span style="color:#658b00">incrementAndGet&lt;/span>());
}
});
&lt;span style="color:#228b22">// 准备共享式的Hanlders 包含了SSL 、编解码、连接管理、业务handler
&lt;/span>&lt;span style="color:#228b22">&lt;/span> prepareSharableHandlers();
&lt;span style="color:#228b22">//开启一个 Netty Server
&lt;/span>&lt;span style="color:#228b22">&lt;/span> ServerBootstrap childHandler =
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">serverBootstrap&lt;/span>.&lt;span style="color:#658b00">group&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">eventLoopGroupBoss&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">eventLoopGroupSelector&lt;/span>)
.&lt;span style="color:#658b00">channel&lt;/span>(useEpoll() ? EpollServerSocketChannel.&lt;span style="color:#658b00">class&lt;/span> : NioServerSocketChannel.&lt;span style="color:#658b00">class&lt;/span>)
.&lt;span style="color:#658b00">option&lt;/span>(ChannelOption.&lt;span style="color:#658b00">SO_BACKLOG&lt;/span>, 1024)
.&lt;span style="color:#658b00">option&lt;/span>(ChannelOption.&lt;span style="color:#658b00">SO_REUSEADDR&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>)
.&lt;span style="color:#658b00">option&lt;/span>(ChannelOption.&lt;span style="color:#658b00">SO_KEEPALIVE&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>)
.&lt;span style="color:#658b00">childOption&lt;/span>(ChannelOption.&lt;span style="color:#658b00">TCP_NODELAY&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>)
.&lt;span style="color:#658b00">childOption&lt;/span>(ChannelOption.&lt;span style="color:#658b00">SO_SNDBUF&lt;/span>, nettyServerConfig.&lt;span style="color:#658b00">getServerSocketSndBufSize&lt;/span>())
.&lt;span style="color:#658b00">childOption&lt;/span>(ChannelOption.&lt;span style="color:#658b00">SO_RCVBUF&lt;/span>, nettyServerConfig.&lt;span style="color:#658b00">getServerSocketRcvBufSize&lt;/span>())
.&lt;span style="color:#658b00">localAddress&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> InetSocketAddress(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">nettyServerConfig&lt;/span>.&lt;span style="color:#658b00">getListenPort&lt;/span>()))
.&lt;span style="color:#658b00">childHandler&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ChannelInitializer&amp;lt;SocketChannel&amp;gt;() {
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">initChannel&lt;/span>(SocketChannel ch) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> Exception {
ch.&lt;span style="color:#658b00">pipeline&lt;/span>()
.&lt;span style="color:#658b00">addLast&lt;/span>(defaultEventExecutorGroup, HANDSHAKE_HANDLER_NAME, handshakeHandler)
.&lt;span style="color:#658b00">addLast&lt;/span>(defaultEventExecutorGroup,
encoder,
&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> NettyDecoder(),
&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> IdleStateHandler(0, 0, nettyServerConfig.&lt;span style="color:#658b00">getServerChannelMaxIdleTimeSeconds&lt;/span>()),
connectionManageHandler,
serverHandler
);
}
});
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (nettyServerConfig.&lt;span style="color:#658b00">isServerPooledByteBufAllocatorEnable&lt;/span>()) {
childHandler.&lt;span style="color:#658b00">childOption&lt;/span>(ChannelOption.&lt;span style="color:#658b00">ALLOCATOR&lt;/span>, PooledByteBufAllocator.&lt;span style="color:#658b00">DEFAULT&lt;/span>);
}
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
&lt;span style="color:#228b22">// 开启一个 Netty Server
&lt;/span>&lt;span style="color:#228b22">&lt;/span> ChannelFuture sync = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">serverBootstrap&lt;/span>.&lt;span style="color:#658b00">bind&lt;/span>().&lt;span style="color:#658b00">sync&lt;/span>();
InetSocketAddress addr = (InetSocketAddress) sync.&lt;span style="color:#658b00">channel&lt;/span>().&lt;span style="color:#658b00">localAddress&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">port&lt;/span> = addr.&lt;span style="color:#658b00">getPort&lt;/span>();
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (InterruptedException e1) {
&lt;span style="color:#8b008b;font-weight:bold">throw&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RuntimeException(&lt;span style="color:#cd5555">&amp;#34;this.serverBootstrap.bind().sync() InterruptedException&amp;#34;&lt;/span>, e1);
}
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">channelEventListener&lt;/span> != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">nettyEventExecutor&lt;/span>.&lt;span style="color:#658b00">start&lt;/span>();
}
&lt;span style="color:#228b22">// 开启扫描 ResponseTable 的检查线程
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">timer&lt;/span>.&lt;span style="color:#658b00">scheduleAtFixedRate&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> TimerTask() {
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">run&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
NettyRemotingServer.&lt;span style="color:#658b00">this&lt;/span>.&lt;span style="color:#658b00">scanResponseTable&lt;/span>();
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (Throwable e) {
log.&lt;span style="color:#658b00">error&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;scanResponseTable exception&amp;#34;&lt;/span>, e);
}
}
}, 1000 * 3, 1000);
}
&lt;span style="color:#228b22">//todo 此处代码省略号...
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
&lt;span style="color:#228b22">// 这个是核心代码
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#707a7c">@ChannelHandler.Sharable&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">NettyServerHandler&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> SimpleChannelInboundHandler&amp;lt;RemotingCommand&amp;gt; {
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">protected&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">channelRead0&lt;/span>(ChannelHandlerContext ctx, RemotingCommand msg) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> Exception {
&lt;span style="color:#228b22">// 调用消息处理的方法 这个方法 在 NettyRemotingAbstract 类内上
&lt;/span>&lt;span style="color:#228b22">&lt;/span> processMessageReceived(ctx, msg);
}
}
&lt;span style="color:#228b22">//todo 此处代码省略号...
&lt;/span>&lt;span style="color:#228b22">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">abstract&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">NettyRemotingAbstract&lt;/span> {
&lt;span style="color:#228b22">// 根据消息的类型进行处理，是请求还是响应的CMD
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">processMessageReceived&lt;/span>(ChannelHandlerContext ctx, RemotingCommand msg) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> Exception {
&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> RemotingCommand cmd = msg;
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (cmd != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
&lt;span style="color:#8b008b;font-weight:bold">switch&lt;/span> (cmd.&lt;span style="color:#658b00">getType&lt;/span>()) {
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> REQUEST_COMMAND:
&lt;span style="color:#228b22">//处理请求指令
&lt;/span>&lt;span style="color:#228b22">&lt;/span> processRequestCommand(ctx, cmd);
&lt;span style="color:#8b008b;font-weight:bold">break&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> RESPONSE_COMMAND:
&lt;span style="color:#228b22">//处理响应指令
&lt;/span>&lt;span style="color:#228b22">&lt;/span> processResponseCommand(ctx, cmd);
&lt;span style="color:#8b008b;font-weight:bold">break&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">default&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">break&lt;/span>;
}
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>好了，到现在我们大体的 remoting server 端的大体的入口和核心处理方法差不多了，后面补充一下 RocketMQ Netty Reactor 多线程的设计&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/rocketmq/rocketmq_reactor_thread.png" alt="rocketmq_reactor_thread">&lt;/p>
&lt;p>简单概括： &lt;code>1-N-M1-M2&lt;/code> 模型&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">线程数&lt;/th>
&lt;th style="text-align:left">线程名&lt;/th>
&lt;th style="text-align:left">线程具体说明&lt;/th>
&lt;th style="text-align:left">代码默认值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">NettyBoss_%d&lt;/td>
&lt;td style="text-align:left">Reactor主线程&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">N&lt;/td>
&lt;td style="text-align:left">NettyServerEPOLLSelector_%d_%d&lt;/td>
&lt;td style="text-align:left">Reactor线程池&lt;/td>
&lt;td style="text-align:left">3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">M1&lt;/td>
&lt;td style="text-align:left">NettyServerCodecThread_%d&lt;/td>
&lt;td style="text-align:left">Worker线程池&lt;/td>
&lt;td style="text-align:left">8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">M2&lt;/td>
&lt;td style="text-align:left">RemotingExecutorThread_%d&lt;/td>
&lt;td style="text-align:left">业务&lt;code>processor&lt;/code>处理线程池&lt;/td>
&lt;td style="text-align:left">8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>[Reactor主线程] &lt;code>1&lt;/code>, 一个 &lt;code>Reactor主线程&lt;/code>(&lt;code>eventLoopGroupBoss&lt;/code>) 负责监听 &lt;code>TCP&lt;/code>网络链接请求，建立好链接，创建&lt;code>SocketChannel&lt;/code>、并注册到&lt;code>selector&lt;/code>上。&lt;/li>
&lt;li>[Reactor线程池] &lt;code>N=3&lt;/code>, &lt;code>RocketMQ&lt;/code> 根据&lt;code>OS或者配置&lt;/code>选择&lt;code>NIO&lt;/code>还是&lt;code>Epoll&lt;/code>，然后监听真正的网络数据。后面拿到数据后，丢给 &lt;code>Reactor线程池&lt;/code> (&lt;code>eventLoopGroupSelector&lt;/code>),&lt;/li>
&lt;li>[Worker线程池] &lt;code>M1=8&lt;/code>, 在执行业务逻辑之前的 &lt;code>SSL验证&lt;/code>、&lt;code>编解码&lt;/code>、&lt;code>空闲检查&lt;/code>、&lt;code>网络连接管理&lt;/code>等等，这些工作交给了 &lt;code>defaultEventExecutorGroup&lt;/code>&lt;/li>
&lt;li>[业务&lt;code>processor&lt;/code>处理线程池] &lt;code>M2=8&lt;/code>, 处理业务操作的放在了业务线程池来执行，根据 &lt;code>RemotingCommand&lt;/code> 的&lt;code>业务码 code&lt;/code> 在 &lt;code>processorTable&lt;/code> 缓存中获取到对应的 &lt;code>processor&lt;/code>, 然后封装成&lt;code>Task任务&lt;/code>，提交给&lt;code>业务processor&lt;/code>处理线程池来执行 (eg: &lt;code>sendMessageExecutor&lt;/code>,消息发送为例)&lt;/li>
&lt;/ul>
&lt;p>备注: 特别要说明 业务&lt;code>processor&lt;/code>处理线程池 不一定是&lt;code>8&lt;/code>,具体看代码:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">NettyRemotingServer&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> NettyRemotingAbstract &lt;span style="color:#8b008b;font-weight:bold">implements&lt;/span> RemotingServer{
&lt;span style="color:#228b22">//todo .....
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">//注册Processor，一般 executor ！= null
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">registerProcessor&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> requestCode, NettyRequestProcessor processor, ExecutorService executor) {
ExecutorService executorThis = executor;
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">null&lt;/span> == executor) {
executorThis = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">publicExecutor&lt;/span>;
}
Pair&amp;lt;NettyRequestProcessor, ExecutorService&amp;gt; pair = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Pair&amp;lt;NettyRequestProcessor, ExecutorService&amp;gt;(processor, executorThis);
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">processorTable&lt;/span>.&lt;span style="color:#658b00">put&lt;/span>(requestCode, pair);
}
&lt;span style="color:#228b22">//注册默认的Processor，一般 executor ！= null
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">registerDefaultProcessor&lt;/span>(NettyRequestProcessor processor, ExecutorService executor) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">defaultRequestProcessor&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Pair&amp;lt;NettyRequestProcessor, ExecutorService&amp;gt;(processor, executor);
}
&lt;span style="color:#228b22">//todo .....
&lt;/span>&lt;span style="color:#228b22">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这边结合理解差不多了。&lt;/p>
&lt;h1 id="remotingcommand">RemotingCommand&lt;/h1>
&lt;p>上面看见了在处理消息的时候一个很核心的类 下面来看一下这个类 org.apache.rocketmq.remoting.protocol.RemotingCommand&lt;/p>
&lt;p>它其实是 rocketmq的指令协议&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Header字段&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>Request说明&lt;/th>
&lt;th>Response说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>code&lt;/td>
&lt;td>int&lt;/td>
&lt;td>请求操作码，应答方根据不同的请求码进行不同的业务处理&lt;/td>
&lt;td>应答响应码。0表示成功，非0则表示各种错误&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>language&lt;/td>
&lt;td>LanguageCode&lt;/td>
&lt;td>请求方实现的语言&lt;/td>
&lt;td>应答方实现的语言&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>version&lt;/td>
&lt;td>int&lt;/td>
&lt;td>请求方程序的版本&lt;/td>
&lt;td>应答方程序的版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>opaque&lt;/td>
&lt;td>int&lt;/td>
&lt;td>相当于requestId，在同一个连接上的不同请求标识码，与响应消息中的相对应&lt;/td>
&lt;td>应答不做修改直接返回&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>flag&lt;/td>
&lt;td>int&lt;/td>
&lt;td>区分是普通RPC还是onewayRPC得标志&lt;/td>
&lt;td>区分是普通RPC还是onewayRPC得标志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>remark&lt;/td>
&lt;td>String&lt;/td>
&lt;td>传输自定义文本信息&lt;/td>
&lt;td>传输自定义文本信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>extFields&lt;/td>
&lt;td>HashMap&amp;lt;String, String&amp;gt;&lt;/td>
&lt;td>请求自定义扩展信息&lt;/td>
&lt;td>响应自定义扩展信息&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>协议编码后的样子
&lt;img src="https://pinkhello.me/rocketmq/rocketmq_protocol_length.png" alt="rocketmq_protocol_length">&lt;/p>
&lt;p>4个部分:&lt;/p>
&lt;ul>
&lt;li>消息长度: 总长度, 4 个字节存储, int 类型&lt;/li>
&lt;li>序列话类型&amp;amp;消息头长度: int 类型, 第一个字节表示序列化类型, 后面三个字节表示消息头长度&lt;/li>
&lt;li>消息头数据: 经过序列化后的消息头&lt;/li>
&lt;li>消息主体数据: 消息主体的二进制字节数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">RemotingCommand&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String SERIALIZE_TYPE_PROPERTY = &lt;span style="color:#cd5555">&amp;#34;rocketmq.serialize.type&amp;#34;&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String SERIALIZE_TYPE_ENV = &lt;span style="color:#cd5555">&amp;#34;ROCKETMQ_SERIALIZE_TYPE&amp;#34;&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String REMOTING_VERSION_KEY = &lt;span style="color:#cd5555">&amp;#34;rocketmq.remoting.version&amp;#34;&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> InternalLogger log = InternalLoggerFactory.&lt;span style="color:#658b00">getLogger&lt;/span>(RemotingHelper.&lt;span style="color:#658b00">ROCKETMQ_REMOTING&lt;/span>);
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> RPC_TYPE = 0; &lt;span style="color:#228b22">// 0, REQUEST_COMMAND
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> RPC_ONEWAY = 1; &lt;span style="color:#228b22">// 0, RPC
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> Map&amp;lt;Class&amp;lt;? &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> CommandCustomHeader&amp;gt;, Field[]&amp;gt; CLASS_HASH_MAP =
&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> HashMap&amp;lt;Class&amp;lt;? &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> CommandCustomHeader&amp;gt;, Field[]&amp;gt;();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> Map&amp;lt;Class, String&amp;gt; CANONICAL_NAME_CACHE = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> HashMap&amp;lt;Class, String&amp;gt;();
&lt;span style="color:#228b22">// 1, Oneway
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// 1, RESPONSE_COMMAND
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> Map&amp;lt;Field, Boolean&amp;gt; NULLABLE_FIELD_CACHE = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> HashMap&amp;lt;Field, Boolean&amp;gt;();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String STRING_CANONICAL_NAME = String.&lt;span style="color:#658b00">class&lt;/span>.&lt;span style="color:#658b00">getCanonicalName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String DOUBLE_CANONICAL_NAME_1 = Double.&lt;span style="color:#658b00">class&lt;/span>.&lt;span style="color:#658b00">getCanonicalName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String DOUBLE_CANONICAL_NAME_2 = &lt;span style="color:#00688b;font-weight:bold">double&lt;/span>.&lt;span style="color:#658b00">class&lt;/span>.&lt;span style="color:#658b00">getCanonicalName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String INTEGER_CANONICAL_NAME_1 = Integer.&lt;span style="color:#658b00">class&lt;/span>.&lt;span style="color:#658b00">getCanonicalName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String INTEGER_CANONICAL_NAME_2 = &lt;span style="color:#00688b;font-weight:bold">int&lt;/span>.&lt;span style="color:#658b00">class&lt;/span>.&lt;span style="color:#658b00">getCanonicalName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String LONG_CANONICAL_NAME_1 = Long.&lt;span style="color:#658b00">class&lt;/span>.&lt;span style="color:#658b00">getCanonicalName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String LONG_CANONICAL_NAME_2 = &lt;span style="color:#00688b;font-weight:bold">long&lt;/span>.&lt;span style="color:#658b00">class&lt;/span>.&lt;span style="color:#658b00">getCanonicalName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String BOOLEAN_CANONICAL_NAME_1 = Boolean.&lt;span style="color:#658b00">class&lt;/span>.&lt;span style="color:#658b00">getCanonicalName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String BOOLEAN_CANONICAL_NAME_2 = &lt;span style="color:#00688b;font-weight:bold">boolean&lt;/span>.&lt;span style="color:#658b00">class&lt;/span>.&lt;span style="color:#658b00">getCanonicalName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">volatile&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> configVersion = -1;
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> AtomicInteger requestId = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> AtomicInteger(0);
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> SerializeType serializeTypeConfigInThisServer = SerializeType.&lt;span style="color:#658b00">JSON&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> String protocol = System.&lt;span style="color:#658b00">getProperty&lt;/span>(SERIALIZE_TYPE_PROPERTY, System.&lt;span style="color:#658b00">getenv&lt;/span>(SERIALIZE_TYPE_ENV));
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!isBlank(protocol)) {
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
serializeTypeConfigInThisServer = SerializeType.&lt;span style="color:#658b00">valueOf&lt;/span>(protocol);
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (IllegalArgumentException e) {
&lt;span style="color:#8b008b;font-weight:bold">throw&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RuntimeException(&lt;span style="color:#cd5555">&amp;#34;parser specified protocol error. protocol=&amp;#34;&lt;/span> + protocol, e);
}
}
}
&lt;span style="color:#228b22">// 请求码操作
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> code;
&lt;span style="color:#228b22">// 语言类型
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> LanguageCode language = LanguageCode.&lt;span style="color:#658b00">JAVA&lt;/span>;
&lt;span style="color:#228b22">// 版本
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> version = 0;
&lt;span style="color:#228b22">// requestId，标记请求响应是一个映射的
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> opaque = requestId.&lt;span style="color:#658b00">getAndIncrement&lt;/span>();
&lt;span style="color:#228b22">// 区分是普通RPC还是onewayRPC得标志
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> flag = 0;
&lt;span style="color:#228b22">// 传输自定义文本信息
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> String remark;
&lt;span style="color:#228b22">// 请求自定义扩展信息
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> HashMap&amp;lt;String, String&amp;gt; extFields;
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">transient&lt;/span> CommandCustomHeader customHeader;
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> SerializeType serializeTypeCurrentRPC = serializeTypeConfigInThisServer;
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">transient&lt;/span> &lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] body;
&lt;span style="color:#8b008b;font-weight:bold">protected&lt;/span> &lt;span style="color:#008b45">RemotingCommand&lt;/span>() {
}
&lt;span style="color:#228b22">//创建 requestCommand
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> RemotingCommand &lt;span style="color:#008b45">createRequestCommand&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> code, CommandCustomHeader customHeader) {
RemotingCommand cmd = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RemotingCommand();
cmd.&lt;span style="color:#658b00">setCode&lt;/span>(code);
cmd.&lt;span style="color:#658b00">customHeader&lt;/span> = customHeader;
setCmdVersion(cmd);
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> cmd;
}
&lt;span style="color:#228b22">//设置程序版本
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">setCmdVersion&lt;/span>(RemotingCommand cmd) {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (configVersion &amp;gt;= 0) {
cmd.&lt;span style="color:#658b00">setVersion&lt;/span>(configVersion);
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
String v = System.&lt;span style="color:#658b00">getProperty&lt;/span>(REMOTING_VERSION_KEY);
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (v != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> value = Integer.&lt;span style="color:#658b00">parseInt&lt;/span>(v);
cmd.&lt;span style="color:#658b00">setVersion&lt;/span>(value);
configVersion = value;
}
}
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> RemotingCommand &lt;span style="color:#008b45">createResponseCommand&lt;/span>(Class&amp;lt;? &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> CommandCustomHeader&amp;gt; classHeader) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> createResponseCommand(RemotingSysResponseCode.&lt;span style="color:#658b00">SYSTEM_ERROR&lt;/span>, &lt;span style="color:#cd5555">&amp;#34;not set any response code&amp;#34;&lt;/span>, classHeader);
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> RemotingCommand &lt;span style="color:#008b45">createResponseCommand&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> code, String remark,
Class&amp;lt;? &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> CommandCustomHeader&amp;gt; classHeader) {
RemotingCommand cmd = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RemotingCommand();
cmd.&lt;span style="color:#658b00">markResponseType&lt;/span>();
cmd.&lt;span style="color:#658b00">setCode&lt;/span>(code);
cmd.&lt;span style="color:#658b00">setRemark&lt;/span>(remark);
setCmdVersion(cmd);
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (classHeader != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
CommandCustomHeader objectHeader = classHeader.&lt;span style="color:#658b00">newInstance&lt;/span>();
cmd.&lt;span style="color:#658b00">customHeader&lt;/span> = objectHeader;
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (InstantiationException e) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (IllegalAccessException e) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
}
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> cmd;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> RemotingCommand &lt;span style="color:#008b45">createResponseCommand&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> code, String remark) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> createResponseCommand(code, remark, &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>);
}
&lt;span style="color:#228b22">//解码
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> RemotingCommand &lt;span style="color:#008b45">decode&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> &lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] array) {
ByteBuffer byteBuffer = ByteBuffer.&lt;span style="color:#658b00">wrap&lt;/span>(array);
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> decode(byteBuffer);
}
&lt;span style="color:#228b22">//解码
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> RemotingCommand &lt;span style="color:#008b45">decode&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> ByteBuffer byteBuffer) {
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> length = byteBuffer.&lt;span style="color:#658b00">limit&lt;/span>();
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> oriHeaderLen = byteBuffer.&lt;span style="color:#658b00">getInt&lt;/span>();
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> headerLength = getHeaderLength(oriHeaderLen);
&lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] headerData = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> &lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[headerLength];
byteBuffer.&lt;span style="color:#658b00">get&lt;/span>(headerData);
RemotingCommand cmd = headerDecode(headerData, getProtocolType(oriHeaderLen));
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> bodyLength = length - 4 - headerLength;
&lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] bodyData = &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (bodyLength &amp;gt; 0) {
bodyData = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> &lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[bodyLength];
byteBuffer.&lt;span style="color:#658b00">get&lt;/span>(bodyData);
}
cmd.&lt;span style="color:#658b00">body&lt;/span> = bodyData;
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> cmd;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">getHeaderLength&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> length) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> length &amp;amp; 0xFFFFFF;
}
&lt;span style="color:#228b22">//消息头解码
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> RemotingCommand &lt;span style="color:#008b45">headerDecode&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] headerData, SerializeType type) {
&lt;span style="color:#8b008b;font-weight:bold">switch&lt;/span> (type) {
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> JSON:
RemotingCommand resultJson = RemotingSerializable.&lt;span style="color:#658b00">decode&lt;/span>(headerData, RemotingCommand.&lt;span style="color:#658b00">class&lt;/span>);
resultJson.&lt;span style="color:#658b00">setSerializeTypeCurrentRPC&lt;/span>(type);
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> resultJson;
&lt;span style="color:#8b008b;font-weight:bold">case&lt;/span> ROCKETMQ:
RemotingCommand resultRMQ = RocketMQSerializable.&lt;span style="color:#658b00">rocketMQProtocolDecode&lt;/span>(headerData);
resultRMQ.&lt;span style="color:#658b00">setSerializeTypeCurrentRPC&lt;/span>(type);
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> resultRMQ;
&lt;span style="color:#8b008b;font-weight:bold">default&lt;/span>:
&lt;span style="color:#8b008b;font-weight:bold">break&lt;/span>;
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> SerializeType &lt;span style="color:#008b45">getProtocolType&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> source) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> SerializeType.&lt;span style="color:#658b00">valueOf&lt;/span>((&lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>) ((source &amp;gt;&amp;gt; 24) &amp;amp; 0xFF));
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">createNewRequestId&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> requestId.&lt;span style="color:#658b00">getAndIncrement&lt;/span>();
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> SerializeType &lt;span style="color:#008b45">getSerializeTypeConfigInThisServer&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> serializeTypeConfigInThisServer;
}
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#00688b;font-weight:bold">boolean&lt;/span> &lt;span style="color:#008b45">isBlank&lt;/span>(String str) {
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> strLen;
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (str == &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span> || (strLen = str.&lt;span style="color:#658b00">length&lt;/span>()) == 0) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>;
}
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> i = 0; i &amp;lt; strLen; i++) {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!Character.&lt;span style="color:#658b00">isWhitespace&lt;/span>(str.&lt;span style="color:#658b00">charAt&lt;/span>(i))) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>;
}
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>;
}
&lt;span style="color:#228b22">//设置协议类型
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] &lt;span style="color:#008b45">markProtocolType&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> source, SerializeType type) {
&lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] result = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> &lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[4];
result[0] = type.&lt;span style="color:#658b00">getCode&lt;/span>();
result[1] = (&lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>) ((source &amp;gt;&amp;gt; 16) &amp;amp; 0xFF);
result[2] = (&lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>) ((source &amp;gt;&amp;gt; 8) &amp;amp; 0xFF);
result[3] = (&lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>) (source &amp;amp; 0xFF);
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> result;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">markResponseType&lt;/span>() {
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> bits = 1 &amp;lt;&amp;lt; RPC_TYPE;
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">flag&lt;/span> |= bits;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> CommandCustomHeader &lt;span style="color:#008b45">readCustomHeader&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> customHeader;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">writeCustomHeader&lt;/span>(CommandCustomHeader customHeader) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">customHeader&lt;/span> = customHeader;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> CommandCustomHeader &lt;span style="color:#008b45">decodeCommandCustomHeader&lt;/span>(
Class&amp;lt;? &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> CommandCustomHeader&amp;gt; classHeader) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> RemotingCommandException {
CommandCustomHeader objectHeader;
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
objectHeader = classHeader.&lt;span style="color:#658b00">newInstance&lt;/span>();
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (InstantiationException e) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (IllegalAccessException e) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
}
&lt;span style="color:#228b22">//解码定制的扩展信息字段
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">extFields&lt;/span> != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
Field[] fields = getClazzFields(classHeader);
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (Field field : fields) {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!Modifier.&lt;span style="color:#658b00">isStatic&lt;/span>(field.&lt;span style="color:#658b00">getModifiers&lt;/span>())) {
String fieldName = field.&lt;span style="color:#658b00">getName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!fieldName.&lt;span style="color:#658b00">startsWith&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;this&amp;#34;&lt;/span>)) {
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
String value = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">extFields&lt;/span>.&lt;span style="color:#658b00">get&lt;/span>(fieldName);
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">null&lt;/span> == value) {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!isFieldNullable(field)) {
&lt;span style="color:#8b008b;font-weight:bold">throw&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RemotingCommandException(&lt;span style="color:#cd5555">&amp;#34;the custom field &amp;lt;&amp;#34;&lt;/span> + fieldName + &lt;span style="color:#cd5555">&amp;#34;&amp;gt; is null&amp;#34;&lt;/span>);
}
&lt;span style="color:#8b008b;font-weight:bold">continue&lt;/span>;
}
field.&lt;span style="color:#658b00">setAccessible&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>);
String type = getCanonicalName(field.&lt;span style="color:#658b00">getType&lt;/span>());
Object valueParsed;
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (type.&lt;span style="color:#658b00">equals&lt;/span>(STRING_CANONICAL_NAME)) {
valueParsed = value;
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (type.&lt;span style="color:#658b00">equals&lt;/span>(INTEGER_CANONICAL_NAME_1) || type.&lt;span style="color:#658b00">equals&lt;/span>(INTEGER_CANONICAL_NAME_2)) {
valueParsed = Integer.&lt;span style="color:#658b00">parseInt&lt;/span>(value);
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (type.&lt;span style="color:#658b00">equals&lt;/span>(LONG_CANONICAL_NAME_1) || type.&lt;span style="color:#658b00">equals&lt;/span>(LONG_CANONICAL_NAME_2)) {
valueParsed = Long.&lt;span style="color:#658b00">parseLong&lt;/span>(value);
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (type.&lt;span style="color:#658b00">equals&lt;/span>(BOOLEAN_CANONICAL_NAME_1) || type.&lt;span style="color:#658b00">equals&lt;/span>(BOOLEAN_CANONICAL_NAME_2)) {
valueParsed = Boolean.&lt;span style="color:#658b00">parseBoolean&lt;/span>(value);
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (type.&lt;span style="color:#658b00">equals&lt;/span>(DOUBLE_CANONICAL_NAME_1) || type.&lt;span style="color:#658b00">equals&lt;/span>(DOUBLE_CANONICAL_NAME_2)) {
valueParsed = Double.&lt;span style="color:#658b00">parseDouble&lt;/span>(value);
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">throw&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RemotingCommandException(&lt;span style="color:#cd5555">&amp;#34;the custom field &amp;lt;&amp;#34;&lt;/span> + fieldName + &lt;span style="color:#cd5555">&amp;#34;&amp;gt; type is not supported&amp;#34;&lt;/span>);
}
field.&lt;span style="color:#658b00">set&lt;/span>(objectHeader, valueParsed);
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (Throwable e) {
log.&lt;span style="color:#658b00">error&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;Failed field [{}] decoding&amp;#34;&lt;/span>, fieldName, e);
}
}
}
}
objectHeader.&lt;span style="color:#658b00">checkFields&lt;/span>();
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> objectHeader;
}
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> Field[] &lt;span style="color:#008b45">getClazzFields&lt;/span>(Class&amp;lt;? &lt;span style="color:#8b008b;font-weight:bold">extends&lt;/span> CommandCustomHeader&amp;gt; classHeader) {
Field[] field = CLASS_HASH_MAP.&lt;span style="color:#658b00">get&lt;/span>(classHeader);
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (field == &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
field = classHeader.&lt;span style="color:#658b00">getDeclaredFields&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">synchronized&lt;/span> (CLASS_HASH_MAP) {
CLASS_HASH_MAP.&lt;span style="color:#658b00">put&lt;/span>(classHeader, field);
}
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> field;
}
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#00688b;font-weight:bold">boolean&lt;/span> &lt;span style="color:#008b45">isFieldNullable&lt;/span>(Field field) {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!NULLABLE_FIELD_CACHE.&lt;span style="color:#658b00">containsKey&lt;/span>(field)) {
Annotation annotation = field.&lt;span style="color:#658b00">getAnnotation&lt;/span>(CFNotNull.&lt;span style="color:#658b00">class&lt;/span>);
&lt;span style="color:#8b008b;font-weight:bold">synchronized&lt;/span> (NULLABLE_FIELD_CACHE) {
NULLABLE_FIELD_CACHE.&lt;span style="color:#658b00">put&lt;/span>(field, annotation == &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>);
}
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> NULLABLE_FIELD_CACHE.&lt;span style="color:#658b00">get&lt;/span>(field);
}
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> String &lt;span style="color:#008b45">getCanonicalName&lt;/span>(Class clazz) {
String name = CANONICAL_NAME_CACHE.&lt;span style="color:#658b00">get&lt;/span>(clazz);
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (name == &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
name = clazz.&lt;span style="color:#658b00">getCanonicalName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">synchronized&lt;/span> (CANONICAL_NAME_CACHE) {
CANONICAL_NAME_CACHE.&lt;span style="color:#658b00">put&lt;/span>(clazz, name);
}
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> name;
}
&lt;span style="color:#228b22">// 编码
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> ByteBuffer &lt;span style="color:#008b45">encode&lt;/span>() {
&lt;span style="color:#228b22">// 1&amp;gt; header length size
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> length = 4;
&lt;span style="color:#228b22">// 2&amp;gt; header data length
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] headerData = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">headerEncode&lt;/span>();
length += headerData.&lt;span style="color:#658b00">length&lt;/span>;
&lt;span style="color:#228b22">// 3&amp;gt; body data length
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">body&lt;/span> != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
length += body.&lt;span style="color:#658b00">length&lt;/span>;
}
ByteBuffer result = ByteBuffer.&lt;span style="color:#658b00">allocate&lt;/span>(4 + length);
&lt;span style="color:#228b22">// length
&lt;/span>&lt;span style="color:#228b22">&lt;/span> result.&lt;span style="color:#658b00">putInt&lt;/span>(length);
&lt;span style="color:#228b22">// header length
&lt;/span>&lt;span style="color:#228b22">&lt;/span> result.&lt;span style="color:#658b00">put&lt;/span>(markProtocolType(headerData.&lt;span style="color:#658b00">length&lt;/span>, serializeTypeCurrentRPC));
&lt;span style="color:#228b22">// header data
&lt;/span>&lt;span style="color:#228b22">&lt;/span> result.&lt;span style="color:#658b00">put&lt;/span>(headerData);
&lt;span style="color:#228b22">// body data;
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">body&lt;/span> != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
result.&lt;span style="color:#658b00">put&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">body&lt;/span>);
}
result.&lt;span style="color:#658b00">flip&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> result;
}
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] &lt;span style="color:#008b45">headerEncode&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">makeCustomHeaderToNet&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (SerializeType.&lt;span style="color:#658b00">ROCKETMQ&lt;/span> == serializeTypeCurrentRPC) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> RocketMQSerializable.&lt;span style="color:#658b00">rocketMQProtocolEncode&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>);
} &lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> RemotingSerializable.&lt;span style="color:#658b00">encode&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>);
}
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">makeCustomHeaderToNet&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">customHeader&lt;/span> != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
Field[] fields = getClazzFields(customHeader.&lt;span style="color:#658b00">getClass&lt;/span>());
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">null&lt;/span> == &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">extFields&lt;/span>) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">extFields&lt;/span> = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> HashMap&amp;lt;String, String&amp;gt;();
}
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (Field field : fields) {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!Modifier.&lt;span style="color:#658b00">isStatic&lt;/span>(field.&lt;span style="color:#658b00">getModifiers&lt;/span>())) {
String name = field.&lt;span style="color:#658b00">getName&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (!name.&lt;span style="color:#658b00">startsWith&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;this&amp;#34;&lt;/span>)) {
Object value = &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
field.&lt;span style="color:#658b00">setAccessible&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>);
value = field.&lt;span style="color:#658b00">get&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">customHeader&lt;/span>);
} &lt;span style="color:#8b008b;font-weight:bold">catch&lt;/span> (Exception e) {
log.&lt;span style="color:#658b00">error&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;Failed to access field [{}]&amp;#34;&lt;/span>, name, e);
}
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (value != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">extFields&lt;/span>.&lt;span style="color:#658b00">put&lt;/span>(name, value.&lt;span style="color:#658b00">toString&lt;/span>());
}
}
}
}
}
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> ByteBuffer &lt;span style="color:#008b45">encodeHeader&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> encodeHeader(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">body&lt;/span> != &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span> ? &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">body&lt;/span>.&lt;span style="color:#658b00">length&lt;/span> : 0);
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> ByteBuffer &lt;span style="color:#008b45">encodeHeader&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> bodyLength) {
&lt;span style="color:#228b22">// 1&amp;gt; header length size
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> length = 4;
&lt;span style="color:#228b22">// 2&amp;gt; header data length
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] headerData;
headerData = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">headerEncode&lt;/span>();
length += headerData.&lt;span style="color:#658b00">length&lt;/span>;
&lt;span style="color:#228b22">// 3&amp;gt; body data length
&lt;/span>&lt;span style="color:#228b22">&lt;/span> length += bodyLength;
ByteBuffer result = ByteBuffer.&lt;span style="color:#658b00">allocate&lt;/span>(4 + length - bodyLength);
&lt;span style="color:#228b22">// length
&lt;/span>&lt;span style="color:#228b22">&lt;/span> result.&lt;span style="color:#658b00">putInt&lt;/span>(length);
&lt;span style="color:#228b22">// header length
&lt;/span>&lt;span style="color:#228b22">&lt;/span> result.&lt;span style="color:#658b00">put&lt;/span>(markProtocolType(headerData.&lt;span style="color:#658b00">length&lt;/span>, serializeTypeCurrentRPC));
&lt;span style="color:#228b22">// header data
&lt;/span>&lt;span style="color:#228b22">&lt;/span> result.&lt;span style="color:#658b00">put&lt;/span>(headerData);
result.&lt;span style="color:#658b00">flip&lt;/span>();
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> result;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">markOnewayRPC&lt;/span>() {
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> bits = 1 &amp;lt;&amp;lt; RPC_ONEWAY;
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">flag&lt;/span> |= bits;
}
&lt;span style="color:#707a7c">@JSONField&lt;/span>(serialize = &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>)
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">boolean&lt;/span> &lt;span style="color:#008b45">isOnewayRPC&lt;/span>() {
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> bits = 1 &amp;lt;&amp;lt; RPC_ONEWAY;
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">flag&lt;/span> &amp;amp; bits) == bits;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">getCode&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> code;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">setCode&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> code) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">code&lt;/span> = code;
}
&lt;span style="color:#707a7c">@JSONField&lt;/span>(serialize = &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>)
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> RemotingCommandType &lt;span style="color:#008b45">getType&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">isResponseType&lt;/span>()) {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> RemotingCommandType.&lt;span style="color:#658b00">RESPONSE_COMMAND&lt;/span>;
}
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> RemotingCommandType.&lt;span style="color:#658b00">REQUEST_COMMAND&lt;/span>;
}
&lt;span style="color:#707a7c">@JSONField&lt;/span>(serialize = &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>)
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">boolean&lt;/span> &lt;span style="color:#008b45">isResponseType&lt;/span>() {
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> bits = 1 &amp;lt;&amp;lt; RPC_TYPE;
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">flag&lt;/span> &amp;amp; bits) == bits;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> LanguageCode &lt;span style="color:#008b45">getLanguage&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> language;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">setLanguage&lt;/span>(LanguageCode language) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">language&lt;/span> = language;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">getVersion&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> version;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">setVersion&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> version) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">version&lt;/span> = version;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">getOpaque&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> opaque;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">setOpaque&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> opaque) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">opaque&lt;/span> = opaque;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> &lt;span style="color:#008b45">getFlag&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> flag;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">setFlag&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> flag) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">flag&lt;/span> = flag;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> String &lt;span style="color:#008b45">getRemark&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> remark;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">setRemark&lt;/span>(String remark) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">remark&lt;/span> = remark;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] &lt;span style="color:#008b45">getBody&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> body;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">setBody&lt;/span>(&lt;span style="color:#00688b;font-weight:bold">byte&lt;/span>[] body) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">body&lt;/span> = body;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> HashMap&amp;lt;String, String&amp;gt; &lt;span style="color:#008b45">getExtFields&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> extFields;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">setExtFields&lt;/span>(HashMap&amp;lt;String, String&amp;gt; extFields) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">extFields&lt;/span> = extFields;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">addExtField&lt;/span>(String key, String value) {
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">null&lt;/span> == extFields) {
extFields = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> HashMap&amp;lt;String, String&amp;gt;();
}
extFields.&lt;span style="color:#658b00">put&lt;/span>(key, value);
}
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> String &lt;span style="color:#008b45">toString&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#cd5555">&amp;#34;RemotingCommand [code=&amp;#34;&lt;/span> + code + &lt;span style="color:#cd5555">&amp;#34;, language=&amp;#34;&lt;/span> + language + &lt;span style="color:#cd5555">&amp;#34;, version=&amp;#34;&lt;/span> + version + &lt;span style="color:#cd5555">&amp;#34;, opaque=&amp;#34;&lt;/span> + opaque + &lt;span style="color:#cd5555">&amp;#34;, flag(B)=&amp;#34;&lt;/span>
+ Integer.&lt;span style="color:#658b00">toBinaryString&lt;/span>(flag) + &lt;span style="color:#cd5555">&amp;#34;, remark=&amp;#34;&lt;/span> + remark + &lt;span style="color:#cd5555">&amp;#34;, extFields=&amp;#34;&lt;/span> + extFields + &lt;span style="color:#cd5555">&amp;#34;, serializeTypeCurrentRPC=&amp;#34;&lt;/span>
+ serializeTypeCurrentRPC + &lt;span style="color:#cd5555">&amp;#34;]&amp;#34;&lt;/span>;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> SerializeType &lt;span style="color:#008b45">getSerializeTypeCurrentRPC&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> serializeTypeCurrentRPC;
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">setSerializeTypeCurrentRPC&lt;/span>(SerializeType serializeTypeCurrentRPC) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">serializeTypeCurrentRPC&lt;/span> = serializeTypeCurrentRPC;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="感谢-">感谢 !&lt;/h1>
- https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E9%80%9A%E4%BF%A1%E7%BB%84%E4%BB%B6/ - PinkHello, All Rights Reserved</description></item><item><title>RocketMQ源码阅读 开篇</title><link>https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%BC%80%E7%AF%87/</link><pubDate>Wed, 19 May 2021 10:02:20 +0800</pubDate><guid>https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%BC%80%E7%AF%87/</guid><description>PinkHello https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%BC%80%E7%AF%87/ -&lt;h1 id="rocketmq-是什么">RocketMQ 是什么?&lt;/h1>
&lt;p>&lt;a href="http://rocketmq.apache.org/">RocketMQ&lt;/a> 是 &lt;code>Alibaba&lt;/code> 捐赠给 &lt;code>Apache&lt;/code> 的一款分布式、队列模型的开源消息中间件。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Github&lt;/code> &lt;a href="https://github.com/apache/rocketmq">https://github.com/apache/rocketmq&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>从官网也能看出它的一些特性:&lt;/p>
&lt;ul>
&lt;li>低延迟&lt;/li>
&lt;li>高可用&lt;/li>
&lt;li>万亿级的消息支持&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h1 id="rocketmq-基本概念">&lt;code>RocketMQ&lt;/code> 基本概念&lt;/h1>
&lt;p>&lt;code>RocketMQ&lt;/code> 是由 &lt;code>Producer&lt;/code>、&lt;code>Broker&lt;/code>、&lt;code>Consumer&lt;/code> 三部分组成, &lt;code>Producer&lt;/code> 负责生产 &lt;code>Message&lt;/code>, &lt;code>Consumer&lt;/code> 负责消费 &lt;code>Message&lt;/code>, &lt;code>Broker&lt;/code> 负责存储 &lt;code>Message&lt;/code>。
每个 &lt;code>Broker&lt;/code> 可以存储多个 &lt;code>Topic&lt;/code> 的消息, 每个 &lt;code>Topic&lt;/code> 的消息也可以分片存储在不同的 &lt;code>Broker&lt;/code> 上。 &lt;code>Message Queue&lt;/code> 用于存储消息的物理地址，每个 &lt;code>Topic&lt;/code> 的消息地址存储于对歌 &lt;code>Message Queue&lt;/code> 中。
&lt;code>Consumer Group&lt;/code> 由多个 &lt;code>Consumer&lt;/code> 实例组成。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Producer&lt;/code> 负责生产消息，同步发送、异步发送、顺序发送、单向发送。同步和异步需要 &lt;code>Broker&lt;/code> 确认信息，单向发送不需要。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Consumer&lt;/code> 负责消费消息，一般异步消费。一个消费者会从 &lt;code>Broker&lt;/code> 拉取消息。（拉取式消费、推动式消费）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Broker Server&lt;/code> 负责存储、转发消息。 接收 &lt;code>Producer&lt;/code> 发送来的消息并存储、同时为 &lt;code>Consumer&lt;/code> 拉取请求做准备。当然也存储这消息相关的元数据（消费组、消费进度偏移、主题、队列消息等）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Name Server&lt;/code> 为消息路由的提供者。&lt;code>Producer&lt;/code> 和 &lt;code>Consumer&lt;/code> 能够通过 它查找各个 &lt;code>Topic&lt;/code> 相应的 &lt;code>Broker IP 列表&lt;/code>，多个 &lt;code>Name Server&lt;/code> 组成集群，相互独立、没有信息交换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Message&lt;/code> 消息系统所传输信息的物理载体，生产和消费数据的最小单元，每条消息必须属于一个 &lt;code>Topic&lt;/code>, &lt;code>RocketMQ&lt;/code> 中每个消息拥有一个唯一的 &lt;code>MessageID&lt;/code>，且可以携带业务标识的&lt;code>Key&lt;/code>。系统提供通过 &lt;code>MessageId&lt;/code> 和 &lt;code>Key&lt;/code> 查询消息的功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Topic&lt;/code> 表示一类消息的集合，每个 &lt;code>Topic&lt;/code> 包含若干条消息，每条消息智只能属于一个 &lt;code>topic&lt;/code>，是 &lt;code>RocketMQ&lt;/code> 进行 消息定义的基本单位。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Tag&lt;/code> 为消息设置的标志，用于同一个 &lt;code>Topic&lt;/code> 下区分不同类型的消息。来自同一个业务单元的消息，可以根据不同的业务在同一个主题下设置不同的标签。Tag 能够有效的保持代码清晰度和连贯性，并优化 &lt;code>RocketMQ&lt;/code> 的查询系统。 &lt;code>Consumer&lt;/code> 可以根据 &lt;code>Tag&lt;/code> 实现不同的子主题的不同消费逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Pull Consumer&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Push Consumer&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Producer Group&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Consumer Group&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Clustering&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Broadcasting&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Normal Ordered Message&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Strictly Ordered Message&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="rocketmq-部署架构">&lt;code>RocketMQ&lt;/code> 部署架构&lt;/h1>
&lt;p>&lt;img src="https://pinkhello.me/rocketmq/rocketmq_architecture_3.png" alt="RocketMQ部署架构">&lt;/p>
&lt;ul>
&lt;li>&lt;code>Producer&lt;/code>: 消息发布决赛、支持分布式集群部署，&lt;code>Producer&lt;/code> 通过MQ的负载均衡莫款选择相应的 &lt;code>Broker&lt;/code> 进行消息投递。&lt;/li>
&lt;li>&lt;code>Consumer&lt;/code>: 消息消费角色、支持分布式集群部署，支持&lt;code>Push方式&lt;/code>、&lt;code>Pull方式&lt;/code>对消息进行消费，同时也指出&lt;code>集群方式&lt;/code>和&lt;code>广播方式&lt;/code>进行消费。&lt;/li>
&lt;li>&lt;code>Name Server&lt;/code>: &lt;code>NameServer&lt;/code> 是一个非常简单的&lt;code>Topic路由注册中心&lt;/code>，其角色类似Dubbo中的zookeeper，支持Broker的动态注册与发现。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>Broker管理&lt;/code>，&lt;code>NameServer&lt;/code> 接受 &lt;code>Broker集群&lt;/code> 的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查&lt;code>Broker&lt;/code>是否还存活；&lt;/li>
&lt;li>&lt;code>路由信息管理&lt;/code>, 每个 &lt;code>NameServer&lt;/code> 将保存关于 &lt;code>Broker&lt;/code> 集群的整个路由信息和用于客户端查询的队列信息。然后&lt;code>Producer&lt;/code>和&lt;code>Consumer&lt;/code> 通过 &lt;code>NameServer&lt;/code>就可以知道整个&lt;code>Broker集群的路由信息&lt;/code>，从而进行消息的投递和消费。
&lt;code>NameServer&lt;/code>通常也是集群的方式部署，各实例间相互不进行信息通讯。&lt;code>Broker&lt;/code>是向每一台&lt;code>NameServer&lt;/code>注册自己的路由信息，所以每一个&lt;code>NameServer&lt;/code>实例上面都保存一份完整的路由信息。当某个&lt;code>NameServer&lt;/code>因某种原因下线了，&lt;code>Broker&lt;/code>仍然可以向其它&lt;code>NameServer&lt;/code>同步其路由信息，&lt;code>Producer&lt;/code>,&lt;code>Consumer&lt;/code>仍然可以动态感知&lt;code>Broker&lt;/code>的路由的信息&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;code>RocketMQ&lt;/code> 网路部署特点:&lt;/p>
&lt;ul>
&lt;li>&lt;code>NameSever&lt;/code> 是无状态节点，可集群部署，节点之间无任何信息同步。&lt;code>Broker&lt;/code> 是向每一台&lt;code>NameServer&lt;/code>注册自己的路由信息，所以每一个&lt;code>NameServer&lt;/code>实例上面都保存一份完整的路由信息。当某个&lt;code>NameServer&lt;/code>因某种原因下线了，&lt;code>Broker&lt;/code>仍然可以向其它&lt;code>NameServer&lt;/code>同步其路由信息，&lt;code>Producer&lt;/code>,&lt;code>Consumer&lt;/code>仍然可以动态感知&lt;code>Broker&lt;/code>的路由的信息。&lt;/li>
&lt;li>&lt;code>Broker&lt;/code> 部署相对复杂，&lt;code>Broker&lt;/code> 分为 &lt;code>Master&lt;/code> 与 &lt;code>Slave&lt;/code> ，一个&lt;code>Master&lt;/code>可以对应多个&lt;code>Slave&lt;/code>，但是一个&lt;code>Slave&lt;/code>只能对应一个&lt;code>Master&lt;/code>，&lt;code>Master&lt;/code>与&lt;code>Slave&lt;/code> 的对应关系通过指定相同的&lt;code>BrokerName&lt;/code>，不同的&lt;code>BrokerId&lt;/code> 来定义，&lt;code>BrokerId为0&lt;/code>表示&lt;code>Master&lt;/code>，&lt;code>非0&lt;/code>表示&lt;code>Slave&lt;/code>。&lt;code>Master&lt;/code>也可以部署多个。每个&lt;code>Broker&lt;/code>与&lt;code>NameServer&lt;/code>集群中的所有节点建立长连接，定时注册&lt;code>Topic&lt;/code>信息到所有&lt;code>NameServer&lt;/code>。 注意：当前&lt;code>RocketMQ&lt;/code>版本在部署架构上支持&lt;code>一Master多Slave&lt;/code>，但只有&lt;code>BrokerId=1&lt;/code>的从服务器才会参与消息的读负载。&lt;/li>
&lt;li>&lt;code>Producer&lt;/code> 与 &lt;code>NameServer&lt;/code> 集群中的其中一个节点（随机选择）建立长连接，定期从&lt;code>NameServer&lt;/code>获取&lt;code>Topic路由信息&lt;/code>，并向提供&lt;code>Topic&lt;/code>服务的&lt;code>Master&lt;/code>建立长连接，且定时向&lt;code>Master&lt;/code>发送心跳。&lt;code>Producer&lt;/code>完全无状态，可集群部署。&lt;/li>
&lt;li>&lt;code>Consumer&lt;/code> 与 &lt;code>NameServer&lt;/code> 集群中的其中一个节点（随机选择）建立长连接，定期从&lt;code>NameServe&lt;/code>r获取&lt;code>Topic路由信息&lt;/code>，并向提供&lt;code>Topic&lt;/code>服务的&lt;code>Master&lt;/code>、&lt;code>Slave&lt;/code>建立长连接，且定时向&lt;code>Master&lt;/code>、&lt;code>Slave&lt;/code>发送心跳。&lt;code>Consumer&lt;/code>既可以从&lt;code>Master&lt;/code>订阅消息，也可以从&lt;code>Slave&lt;/code>订阅消息，消费者在向&lt;code>Master&lt;/code>拉取消息时，&lt;code>Master&lt;/code>服务器会根据拉取偏移量与最大偏移量的距离（判断是否读老消息，产生读&lt;code>I/O&lt;/code>），以及从服务器是否可读等因素建议下一次是从&lt;code>Master&lt;/code>还是&lt;code>Slave&lt;/code>拉取。&lt;/li>
&lt;/ul>
&lt;h1 id="rocketmq--事务消息-">&lt;code>RocketMQ&lt;/code> * 事务消息 *&lt;/h1>
&lt;p>后面专门一章讲述这个事务消息&lt;/p>
- https://pinkhello.me/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%BC%80%E7%AF%87/ - PinkHello, All Rights Reserved</description></item><item><title>11 几个关于kafka的知识点</title><link>https://pinkhello.me/posts/11-%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</link><pubDate>Wed, 19 May 2021 08:55:19 +0800</pubDate><guid>https://pinkhello.me/posts/11-%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</guid><description>PinkHello https://pinkhello.me/posts/11-%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/ -&lt;h1 id="认识kafka">认识kafka&lt;/h1>
&lt;p>&lt;code>Kafka&lt;/code> 是分布式消息系统， &lt;code>Apache&lt;/code> 的子项目。标语也变了&amp;quot;分布式流平台&amp;quot;，
与传统的消息系统不同点在于&lt;/p>
&lt;ul>
&lt;li>分布式的，易于扩展&lt;/li>
&lt;li>为发布和订阅提供了高吞吐&lt;/li>
&lt;li>支持多订阅者，在失败的时候能自动平衡消费者&lt;/li>
&lt;li>消息的持久化&lt;/li>
&lt;/ul>
&lt;h1 id="kafka-的架构">&lt;code>kafka&lt;/code> 的架构&lt;/h1>
&lt;p>几点？&lt;/p>
&lt;ul>
&lt;li>&lt;code>Kafka&lt;/code> 的 &lt;code>Topic&lt;/code> 和 &lt;code>Partition&lt;/code> 内部如何存储？&lt;/li>
&lt;li>与传统的消息系统相比， &lt;code>Kafka&lt;/code> 消费模型有啥优点？&lt;/li>
&lt;li>&lt;code>Kafka&lt;/code> 是如何实现分布式数据存储和数据的读取？&lt;/li>
&lt;/ul>
&lt;h2 id="kafka-架构">&lt;code>Kafka&lt;/code> 架构&lt;/h2>
&lt;p>一个 &lt;code>Kafka&lt;/code> 集群，多个 &lt;code>Producer&lt;/code> ，多个 &lt;code>Consumer&lt;/code> ，多个 &lt;code>Broker&lt;/code> ， 选举 &lt;code>Leader&lt;/code> 以及在 &lt;code>Consumer Group&lt;/code> 发生变化时进行 &lt;code>reblance&lt;/code> 。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Broker&lt;/code> 消息中间件的处理节点，一个 &lt;code>Kafka&lt;/code> 节点就是一个 &lt;code>Broker&lt;/code> ， 一个或者多个 &lt;code>Broker&lt;/code> 组成 &lt;code>Kafka&lt;/code> 集群&lt;/li>
&lt;li>&lt;code>Topic&lt;/code> &lt;code>Kafka&lt;/code> 根据 &lt;code>Topic&lt;/code> 对 &lt;code>Message&lt;/code> 进行归类，发布到 &lt;code>Kafka&lt;/code> 的每条 &lt;code>Message&lt;/code> 都要指定 &lt;code>Topic&lt;/code>&lt;/li>
&lt;li>&lt;code>Producer&lt;/code> 向 &lt;code>Broker&lt;/code> 发生 &lt;code>message&lt;/code>&lt;/li>
&lt;li>&lt;code>Consumer&lt;/code> 从 &lt;code>Broker&lt;/code> 读取 &lt;code>message&lt;/code>&lt;/li>
&lt;li>&lt;code>Consumer Group&lt;/code> 每个 Consumer 属于特定的 Group，一个 Message 可以发送给不同的 &lt;code>Consumer Group&lt;/code> ，但是同一个 &lt;code>Group&lt;/code> 下的只有一个 &lt;code>Consumer&lt;/code> 能消费该 &lt;code>Message&lt;/code>&lt;/li>
&lt;li>&lt;code>Partition&lt;/code> 物理概念，一个 &lt;code>Topic&lt;/code> 下可以分为多个 &lt;code>Partition&lt;/code>, 每个 &lt;code>Partition&lt;/code> 下是有序的。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://pinkhello.me/%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/kafka-%E6%A1%86%E6%9E%B6%E5%9B%BE.jpeg" alt="kafka 框架图">
&lt;img src="https://pinkhello.me/%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/kafka-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%90%91.png" alt="kafka 数据流向">&lt;/p>
&lt;p>下面来讲述 上面为问题啊&lt;/p>
&lt;h2 id="kafka-的-topic-和-partition-内部如何存储">&lt;code>Kafka&lt;/code> 的 &lt;code>Topic&lt;/code> 和 &lt;code>Partition&lt;/code> 内部如何存储?&lt;/h2>
&lt;p>&lt;code>Kafka&lt;/code> 为每个 &lt;code>Topic&lt;/code> 维护了分区（ &lt;code>Partition&lt;/code> ）的日志文件，每个 &lt;code>Partition&lt;/code> 在 &lt;code>kafka&lt;/code> 存储层为 &lt;code>Append Log&lt;/code>。任何发布到此 &lt;code>Partition&lt;/code> 的消息都会被追加到 &lt;code>Log&lt;/code> 文件尾部。
在每个 &lt;code>Partition&lt;/code> 每个消息是按照 &lt;code>Timeline&lt;/code> 分配到一个单调递增的顺序编号的，就是我们说的 &lt;code>Offset&lt;/code>, &lt;code>Offset&lt;/code> 是一个 &lt;code>long&lt;/code> 型的数字，也是我们可以通过这个 &lt;code>Offset&lt;/code> 确定一条在该 &lt;code>Partition&lt;/code> 下的唯一消息。&lt;/p>
&lt;p>这样就有个特性： &lt;code>Partition&lt;/code> 下有序, &lt;code>Topic&lt;/code> 下无法保证有序。&lt;/p>
&lt;p>那么，问题来了？这些 &lt;code>Message&lt;/code> 如何发送到各个 &lt;code>Partition&lt;/code> 的呢？如何指定的呢？&lt;/p>
&lt;ul>
&lt;li>发送至哪个 &lt;code>Partition&lt;/code> 是由 生产者决定的。&lt;/li>
&lt;li>如果没有 &lt;code>Key&lt;/code> 值，则轮询发送&lt;/li>
&lt;li>如果有 &lt;code>key&lt;/code> 值，对 &lt;code>key&lt;/code> 值进行 &lt;code>Hash&lt;/code> ，然后对分区数量取余，保证同一个 &lt;code>Key&lt;/code> 值的会路由到同一个 &lt;code>Partition&lt;/code> 。如果想队列强顺序一致，可以让所有的消息设置为同一个 &lt;code>Key&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;h2 id="与传统的消息系统相比-kafka-消费模型有啥优点">与传统的消息系统相比， &lt;code>Kafka&lt;/code> 消费模型有啥优点？&lt;/h2>
&lt;h3 id="kafka-consumer-消费模型">&lt;code>Kafka Consumer&lt;/code> 消费模型&lt;/h3>
&lt;p>消息由 &lt;code>producer&lt;/code> 发送到 &lt;code>Kafka&lt;/code> 集群后，被 &lt;code>Consumer&lt;/code> 消费，一般来说我们的消费模型有两种： &lt;code>Push&lt;/code> 推送模型 和 &lt;code>Pull&lt;/code> 拉取模型&lt;/p>
&lt;p>&lt;code>Push&lt;/code> 推送模型：&lt;/p>
&lt;blockquote>
&lt;p>消息 &lt;code>Broker&lt;/code> 记录消费状态。消息 &lt;code>Broker&lt;/code> 将消息推送给消费者后，记录这条消息已经被消费，但是这种方式无法很好的保证消费处理的语义。
消息推送完成后，消费者挂掉或者线程 Hang 住 ，或者网络原因未收到，但是 消息 &lt;code>Broker&lt;/code> 将其标记为已消费，这个消息将永远丢失了。
也就是说，采用 &lt;code>Push&lt;/code> ，消息消费完全依赖 消息 &lt;code>Broker&lt;/code> 控制，一旦 &lt;code>Consumer&lt;/code> 发生阻塞，会出现问题。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>Pull&lt;/code> 拉取模型：&lt;/p>
&lt;blockquote>
&lt;p>由 &lt;code>Consumer&lt;/code> 控制 &lt;code>Speed&lt;/code> ，以及消费 &lt;code>Offset&lt;/code> ， &lt;code>Consumer&lt;/code> 可以按照任意的偏移量进行 &lt;code>Consumer&lt;/code>
&lt;code>Consumer&lt;/code> 可以回放已经消费过的消息，进行重新处理或者消费最近的消息&lt;/p>
&lt;/blockquote>
&lt;h3 id="kafka-的网络模型">&lt;code>Kafka&lt;/code> 的网络模型&lt;/h3>
&lt;p>&lt;code>Kafka Client&lt;/code> 单线程 &lt;code>Selector&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/kafka-client-selector.png" alt="kafka 单线程模型">&lt;/p>
&lt;blockquote>
&lt;p>并发链接数目小，逻辑简单，数据量小。在 &lt;code>Kafka Consumer&lt;/code> 和 &lt;code>Kafka Producer&lt;/code> 都是采用的 单线程模型。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>kafka Server&lt;/code> 多线程 &lt;code>Selector&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/kafka-server-selector.png" alt="kafka 多线程模型">&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>Acceptor&lt;/code> 运行于一个单独的线程，对于读取操作的线程池中线程都是在 &lt;code>selector&lt;/code> 注册 &lt;code>Op_Read&lt;/code> 事件，负责服务端读取请求。
成功读取后，将请求放入 &lt;code>Message Queue&lt;/code> 共享队列中，然后在 写操作的线程池中，取出这个请求，对其进行逻辑处理。
即使某个线程阻塞了，后面还有后续的线程从 &lt;code>Message Queue&lt;/code> 共享队列里面获取请求进行处理。
写线程处理完逻辑后，由于注册了 &lt;code>Op_Write&lt;/code> 事件，还需要发送响应。&lt;/p>
&lt;/blockquote>
&lt;h2 id="kafka-是如何实现分布式数据存储和数据的读取">&lt;code>Kafka&lt;/code> 是如何实现分布式数据存储和数据的读取？&lt;/h2>
&lt;h3 id="kafka-高可靠的分布式存储模型">&lt;code>Kafka&lt;/code> 高可靠的分布式存储模型&lt;/h3>
&lt;p>主要依靠 副本 机制，有了副本机制，机器宕机，也会恢复。&lt;/p>
&lt;h3 id="kafka-高性能日志存储">&lt;code>Kafka&lt;/code> 高性能日志存储&lt;/h3>
&lt;p>&lt;img src="https://pinkhello.me/%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/kafka-segement.png" alt="kafka 高性能日志存储">
&lt;img src="https://pinkhello.me/%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/kafka-append-log.png" alt="kafka 高性能日志存储">&lt;/p>
&lt;p>&lt;code>Kafka&lt;/code> 的一个 &lt;code>Topic&lt;/code> 下的所有的 &lt;code>Message&lt;/code> 都是以 &lt;code>Partition&lt;/code> 的方式，分布式存储在多个节点上。&lt;/p>
&lt;p>同时在 kafka 机器上，每个 &lt;code>Partition&lt;/code> 都会对应一个日志目录，在目录下面会对应对歌 日志分段（&lt;code>LogSegment&lt;/code>）。
LogSegment 组成 &amp;ldquo;.index&amp;rdquo; 与 &amp;ldquo;.log&amp;rdquo; , 分别表示 &lt;code>segment&lt;/code> 索引文件 和 数据文件。
两个文件的命名规则: &lt;code>partition&lt;/code> 全局的第一个 &lt;code>segment&lt;/code> 从 0 开始，后续的每个 &lt;code>Segment&lt;/code> 文件名为上一个 &lt;code>Segment&lt;/code> 文件最后一条消息的 &lt;code>offset&lt;/code> 值。
数值为 64 位， 20 位数字字符长度，没有数字用 0 填充。&lt;/p>
&lt;p>假如有 1000 条消息，每个 &lt;code>LogSegment&lt;/code> 的大小为 100，那么展现 900-1000 的索引 和 Log：
&lt;img src="https://pinkhello.me/%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/kafka-log.jpg" alt="kafka LogSegment">&lt;/p>
&lt;p>&lt;code>kafka&lt;/code> 消息数据量打，采用的是 &lt;code>稀疏索引&lt;/code> 的方式，加快偏查询速度。&lt;/p>
&lt;p>如何读取数据？ 如果我们要读取第 911 条数据&lt;/p>
&lt;ul>
&lt;li>先找到它属于哪个段？ 二分法查找属于文件，找到 0000900.index 和 0000900.log 之后&lt;/li>
&lt;li>去索引文件 0000900.index 查找 (911-900)=11 这个索引 或者 小于11 最近的索引&lt;/li>
&lt;li>后面通过 二分法我们找到索引 [10,1367]&lt;/li>
&lt;li>然后通过这条索引的物理位置 1367，开始往后找，知道找到 第 911 条数据&lt;/li>
&lt;/ul>
&lt;p>&lt;code>为什么分区？只有一个分区不行么？分区是为了干啥？那么日志为什么要分段呢？&lt;/code>&lt;/p>
&lt;h2 id="kafka-的副本机制">&lt;code>Kafka&lt;/code> 的副本机制&lt;/h2>
&lt;p>&lt;code>Kafka&lt;/code> 副本机制为 多个节点对其他服务端节点的主题分区的日志进行复制。当集群某个节点出现问题，访问该故障节点的请求可以被转移到其他正常的节点（过程脚 &lt;code>reblance&lt;/code> ）&lt;/p>
&lt;p>&lt;code>kafka&lt;/code> 的每个 &lt;code>Topic&lt;/code> 的每个 &lt;code>Partition&lt;/code> 都有一个 主副本以及 &lt;code>0-n&lt;/code> 个副本，副本保持与主副本的数据同步，当 主副本 出现故障时会被替代。&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/kafka-partition-replicas.png" alt="kafka 高性能副本机制">&lt;/p>
&lt;p>在 &lt;code>kafka&lt;/code> 中，并不是所有的副本都被拿来代替主副本的，所以在 &lt;code>kafka&lt;/code> 的 &lt;code>leader&lt;/code> 节点中维护者一个 &lt;code>ISR（In Sync Replicas）&lt;/code>集合
&lt;code>ISR (In Sync Replicas)&lt;/code> 副本 &lt;code>follower&lt;/code> 同步队列, 维护着有资格的 &lt;code>follower&lt;/code> 的节点&lt;/p>
&lt;ul>
&lt;li>副本的所有节点必须和 &lt;code>ZK&lt;/code> 保持链接&lt;/li>
&lt;li>在同步过程中，这个副本不能落后主副本太多(即副本最后一条消息的 &lt;code>offset&lt;/code> 和 &lt;code>leader&lt;/code> 副本的最好一条消息的 &lt;code>offset&lt;/code> 之间的差值不能超过阈值)
(&lt;code>replica.lag.max.messages&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>&lt;code>AR（Assigned Replicas）&lt;/code>标记副本的全集 ，&lt;code>OSR&lt;/code> 表示落后被剔除的副本集合&lt;/p>
&lt;p>ISR = leader + 没有落后太多的副本
AR = OSR + ISR&lt;/p>
&lt;p>&lt;code>HW &amp;amp; LEO&lt;/code>
&lt;code>Follower&lt;/code> 副本同步过程中，两个概念 &lt;code>HW&lt;/code> &lt;code>HighWatermark&lt;/code> 和 &lt;code>LEO&lt;/code> &lt;code>Log End Offset&lt;/code>，与 &lt;code>ISR&lt;/code> 紧密相关。&lt;/p>
&lt;p>&lt;code>HW&lt;/code> 是一个特殊的 &lt;code>Offset&lt;/code> ，当 &lt;code>Consumer&lt;/code> 处理消息的时候，只能 &lt;code>Pull&lt;/code> 到 &lt;code>HW&lt;/code> 之前的消息， &lt;code>HW&lt;/code> 之后的消息对 &lt;code>Consumer&lt;/code> 不可见。
也就是说 &lt;code>Partition&lt;/code> 对应的 ISR 中最小的 &lt;code>LEO&lt;/code> 作为 &lt;code>HW&lt;/code> ， &lt;code>Consumer&lt;/code> 最多只能消费到 &lt;code>HW&lt;/code> 所在的位置，每个 &lt;code>Replica&lt;/code> 都有 &lt;code>HW&lt;/code> ，
&lt;code>leader&lt;/code> 和 &lt;code>follower&lt;/code> 各自维护更新自己的 &lt;code>HW&lt;/code> 的状态，对于 &lt;code>Leader&lt;/code> 新写入的消息， &lt;code>Consumer&lt;/code> 不能立刻消费， &lt;code>Leader&lt;/code> 会等待
该消息被所有的 &lt;code>ISR&lt;/code> 中的 &lt;code>Replicas&lt;/code> 同步更新 &lt;code>HW&lt;/code> ，此时消息才能被 &lt;code>Consumer&lt;/code> 消费，这样保证了如果 &lt;code>Leader&lt;/code> 副本损坏，
该消息仍然可以从新选举的 &lt;code>Leader&lt;/code> 获取。&lt;/p>
&lt;p>&lt;code>LEO&lt;/code> 是所有副都会有的一个 &lt;code>offset&lt;/code> 标记，它指向追加到当前副本的最后一个消息的 &lt;code>offset&lt;/code> ，当生产者向 &lt;code>Leader&lt;/code> 副本追加消息时候， &lt;code>Leader&lt;/code> 副本的 &lt;code>LEO&lt;/code> 标记就会递增；
当 &lt;code>follower&lt;/code> 副本成功从 &lt;code>leader&lt;/code> 副本 &lt;code>pull&lt;/code> 消息并更新到本地的时候， &lt;code>follower&lt;/code> 副本也会增肌&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>producer&lt;/code> 向 &lt;code>leader&lt;/code> 发送消息，可以通过 &lt;code>request.required.acks&lt;/code> 参数来设置数据可靠性级别：&lt;/p>
&lt;ul>
&lt;li>1 默认， &lt;code>producer&lt;/code> 在 &lt;code>ISR&lt;/code> 中的 &lt;code>leader&lt;/code> 已成功收到数据并得到确认后发送下一条 &lt;code>Message&lt;/code> 。如果 &lt;code>Leader&lt;/code> 宕机，会丢失数据&lt;/li>
&lt;li>0 &lt;code>producer&lt;/code> 无需等待，继续发送下一批消息，效率高，但是数据可靠性低&lt;/li>
&lt;li>-1 &lt;code>producer&lt;/code> 需要等待 &lt;code>ISR&lt;/code> 中所以的 &lt;code>follower&lt;/code> 都确认接收到数据才算发送完成。可靠性高，但是没有也不能保证数据不丢失，比如 &lt;code>ISR&lt;/code> 里只有 &lt;code>leader&lt;/code> （其他节点和 &lt;code>ZK&lt;/code> 断链，或者没有追上），这样就变成了 &lt;code>acks=1&lt;/code> 的情况&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="kafka-到底会不会丢消息">&lt;code>kafka&lt;/code> 到底会不会丢消息&lt;/h1>
&lt;p>一个消息的流转&lt;/p>
&lt;ul>
&lt;li>&lt;code>Producer&lt;/code> 发送给 &lt;code>Kafka Broker&lt;/code>&lt;/li>
&lt;li>&lt;code>kafka Broker&lt;/code> 消息同步和持久化&lt;/li>
&lt;li>&lt;code>Kafka Brokder&lt;/code> 将消息传递给消费者&lt;/li>
&lt;/ul>
&lt;h1 id="如何优雅的使用-kafka-consumer">如何优雅的使用 Kafka Consumer&lt;/h1>
&lt;p>注意点等等&amp;hellip;..&lt;/p>
&lt;h1 id="kafka-producer-流程详细">&lt;code>kafka Producer&lt;/code> 流程详细&lt;/h1>
&lt;p>&lt;img src="https://pinkhello.me/%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/kafka-producer-flow.png" alt="kafkaProducer流程解读">
&lt;img src="https://pinkhello.me/%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/kafka-meta-get.png" alt="kafka 获取元数据">&lt;/p>
- https://pinkhello.me/posts/11-%E5%87%A0%E4%B8%AA%E5%85%B3%E4%BA%8Ekafka%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/ - PinkHello, All Rights Reserved</description></item><item><title>10 多域名下的SSH</title><link>https://pinkhello.me/posts/10-%E5%A4%9A%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84ssh/</link><pubDate>Mon, 10 May 2021 08:52:57 +0800</pubDate><guid>https://pinkhello.me/posts/10-%E5%A4%9A%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84ssh/</guid><description>PinkHello https://pinkhello.me/posts/10-%E5%A4%9A%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84ssh/ -&lt;h1 id="前言">前言&lt;/h1>
&lt;p>有时候我们，有多个 git 账号（Gitlab、GitHub），这时候如果是同一个账号（邮箱注册），那不会有问题，但是如果不是相同的账号呢，我们在使用 SSH KEY 做免密登录时候，头痛了。&lt;/p>
&lt;p>这个时候我们需要针对不同的账号，生成不同的 SSH Key，并且配置不同的域名使用不同的Key&lt;/p>
&lt;h1 id="生成一个-ssh-key">生成一个 SSH KEY&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ssh-keygen -t rsa -C &lt;span style="color:#cd5555">&amp;#34;username@email.com&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;blockquote>
&lt;p>一路 Enter，并且在生成时候指定名字，（不指定名字会使用默认的）得到&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;pre>&lt;code>id_rsa # 私钥
id_rsa.pub # 公钥
&lt;/code>&lt;/pre>&lt;h1 id="重复上一个步骤生成多个-私钥和公钥">重复上一个步骤，生成多个 私钥和公钥&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">github_id_rsa
github_id_rsa.pub
gitlab_id_rsa
gitlab_id_rsa.pub
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="配置相应的域名对应的-ssh-key">配置相应的域名对应的 SSH-KEY&lt;/h1>
&lt;ul>
&lt;li>本地目录 &lt;code>~/.ssh/&lt;/code> 下，查阅有没有 &lt;code>config&lt;/code> 文件, 不存在就新建 &lt;code>config&lt;/code> 文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">Host github
HostName github.com
User UserName
PreferredAuthentications publickey
IdentityFile ~/.ssh/github_id_rsa
Host gitlab
HostName gitlab.com
User UserName
PreferredAuthentications publickey
IdentityFile ~/.ssh/gitlab_id_rsa
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="将密钥添加进入--ssh-agent-中">将密钥添加进入 SSH-AGENT 中&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ssh-add ~/.ssh/github_id_rsa
ssh-add ~/.ssh/gitlab_id_rsa
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看密钥&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ssh-add -l
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="将生成的-公钥-加入到对应的网站里面-ssh-key-配置">将生成的 公钥 加入到对应的网站里面 SSH KEY 配置&lt;/h1>
&lt;p>下面就可以使用 &lt;code>git clone git@github.com/****&lt;/code> &lt;code>git clone git@gitlab.com/****&lt;/code>&lt;/p>
&lt;h1 id="关于-mac-下-每次开机-需要重新-ssh-add-解决办法">关于 Mac 下 每次开机 需要重新 ssh-add 解决办法&lt;/h1>
&lt;ul>
&lt;li>添加自启动程序&lt;/li>
&lt;li>说一个简单的，将 ssh-add ~/.ssh/**id_rsa 添加到 .*shrc 文件里面去&lt;/li>
&lt;/ul>
- https://pinkhello.me/posts/10-%E5%A4%9A%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84ssh/ - PinkHello, All Rights Reserved</description></item><item><title>算法 Bitmap</title><link>https://pinkhello.me/posts/%E7%AE%97%E6%B3%95-bitmap/</link><pubDate>Wed, 28 Apr 2021 11:59:58 +0800</pubDate><guid>https://pinkhello.me/posts/%E7%AE%97%E6%B3%95-bitmap/</guid><description>PinkHello https://pinkhello.me/posts/%E7%AE%97%E6%B3%95-bitmap/ -&lt;h1 id="bitmap-原理">bitmap 原理&lt;/h1>
&lt;p>&lt;code>bitmap&lt;/code>字面为位图映射, 原理是使用一个 bit 标记某个元素对应的 value，而 key 即该元素。因为只有一个 bit 来存储一个数据, 因而可以大大的节省空间。&lt;/p>
&lt;h2 id="数值映射">数值映射:&lt;/h2>
&lt;p>&lt;img src="https://pinkhello.me/%E7%AE%97%E6%B3%95-Bitmap/bitmap-001.png" alt="数字bitmao">&lt;/p>
&lt;blockquote>
&lt;p>假如对 0-31 个内的3个元素（10, 17, 28）进行排序,可以采用 &lt;code>BitMap&lt;/code> 方法, 如下图, 对应的包含的位置将对应的值从 &lt;code>0&lt;/code> 变更为 &lt;code>1&lt;/code>
假如需要进行排序和检索，只需要依次遍历这个数据结构，碰到 &lt;code>1&lt;/code> 的情况，数据存在&lt;/p>
&lt;/blockquote>
&lt;h2 id="字符串映射">字符串映射:&lt;/h2>
&lt;p>&lt;img src="https://pinkhello.me/%E7%AE%97%E6%B3%95-Bitmap/bitmap-str.png" alt="字符串bitmao">&lt;/p>
&lt;blockquote>
&lt;p>字符串也可映射，只不过需要经过一个&lt;code>Hash&lt;/code>步骤,通过映射关系可以判断字符串是否存在。但是因为 &lt;code>Hash&lt;/code>是将不确定长度的值变更为确定大小的值,存在&lt;code>Hash&lt;/code>冲突性，所以一般要最大化的判断一个字符串是否真的存在，可以将这个字符串经过不同的&lt;code>Hash&lt;/code>函数映射不同的位置。&lt;/p>
&lt;/blockquote>
&lt;h2 id="bitmap-的-建立查找添加删除判断-原理">bitmap 的 建立、查找、添加、删除、判断 原理&lt;/h2>
&lt;h3 id="建立">建立&lt;/h3>
&lt;p>Bitmap 的创建可以使用 byte 数组， &lt;code>1 byte = 8 bit &lt;/code>(也可使用 int 数组, &lt;code>1 int = 32 bit&lt;/code>, long 数组, &lt;code>1 long = 64 bit&lt;/code>)
也就是说到最后的数据的大小建立只需要创建 数组长度为
&lt;code>int[ 1 + N/32 ]&lt;/code> &lt;code>byte[ 1 + N/8 ]&lt;/code> &lt;code>long[ 1 + N/64 ]&lt;/code>
即可存储，&lt;code>N&lt;/code>表示要存储的最大的值。&lt;/p>
&lt;p>下面我们都使用 &lt;code>int数组&lt;/code> 表示&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">arr[0] 表述 0-31
arr[1] 表述 32-63
arr[2] 表述 64-95
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="查找">查找&lt;/h3>
&lt;p>按照上面 &lt;code>int数组&lt;/code> 的例子，要找到任意整数 &lt;code>M&lt;/code> 映射到数组上的位置为 &lt;code>M / 32&lt;/code> 得到下标,&lt;code>M % 32&lt;/code> 得到它在这个下标对应的二进制的哪个位置&lt;/p>
&lt;h3 id="添加">添加&lt;/h3>
&lt;p>我们将 5 这个数对应的值放入到 bitmap 中
&lt;code>5 / 32 = 0&lt;/code>, &lt;code>5 % 32 = 5&lt;/code> , &lt;code>5&lt;/code> 在 &lt;code>arr[0]&lt;/code> 的第 &lt;code>5&lt;/code> 个位置
&lt;img src="https://pinkhello.me/%E7%AE%97%E6%B3%95-Bitmap/bitmap-add.png" alt="bitmao">&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># 想插入一个数的值，只需要将 1 左移代表该数字的这一位( M % 32 )（备注：因为我这边是 int 类型，所以是 32 位）, 然后与原来数字按位或&lt;/span>
arr[0] = arr[0] | (&lt;span style="color:#b452cd">1&lt;/span> &amp;lt;&amp;lt; 5)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除">删除&lt;/h3>
&lt;p>&lt;img src="https://pinkhello.me/%E7%AE%97%E6%B3%95-Bitmap/bitmap-remove.png" alt="bitmao">&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># 想插入一个数的值，只需要将 1 左移代表该数字的这一位( M % 32 )（备注：因为我这边是 int 类型，所以是 32 位）, 然后取反后与原来数字按位与，则达到清除目的&lt;/span>
arr[0] = arr[0] &amp;amp; (~(&lt;span style="color:#b452cd">1&lt;/span> &amp;lt;&amp;lt; 5))
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="判断">判断&lt;/h3>
&lt;p>借助 &lt;code>查找&lt;/code> 做定位，然后判断 当前位上的值是 &lt;code>0&lt;/code> 还是 &lt;code>1&lt;/code> 来达到判断的目的&lt;/p>
&lt;h1 id="bitmap-应用">bitmap 应用&lt;/h1>
&lt;h2 id="大数据量快速排序">大数据量快速排序&lt;/h2>
&lt;h2 id="大数据量快速去重">大数据量快速去重&lt;/h2>
&lt;h2 id="大数据量快速查找">大数据量快速查找&lt;/h2>
&lt;h1 id="bitmap-的缺点-和-拓展">bitmap 的缺点 和 拓展&lt;/h1>
&lt;p>bitmap 的缺点还是有的 :&lt;/p>
&lt;ul>
&lt;li>数据碰撞
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">字符串映射到 &lt;span style="color:#cd5555">`&lt;/span>bitmap&lt;span style="color:#cd5555">`&lt;/span>会有碰撞问题.
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>数据稀松
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">比如要存入&lt;span style="color:#cd5555">`&lt;/span>(1,88888888,3333)&lt;span style="color:#cd5555">`&lt;/span>这三条数据, 我们要建立&lt;span style="color:#cd5555">`&lt;/span>99999999&lt;span style="color:#cd5555">`&lt;/span>长度的 &lt;span style="color:#cd5555">`&lt;/span>bitmap&lt;span style="color:#cd5555">`&lt;/span>,但实际上只存储了3条数据,浪费了空间.
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="碰撞问题-bloom-filterhttpszhwikipediaorgwikie5b883e99a86e8bf87e6bba4e599a8-和-counting-bloom-filter">(碰撞问题) &lt;a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8">Bloom Filter&lt;/a> 和 Counting Bloom Filter&lt;/h2>
&lt;blockquote>
&lt;p>将任意大小的数据转换成特定大小的数据的函数.转换后的数据称为哈希值或哈希编码&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://pinkhello.me/%E7%AE%97%E6%B3%95-Bitmap/bitmap-hash.png" alt="hash">&lt;/p>
&lt;ul>
&lt;li>哈希函数是实现哈希表和布隆过滤器的基础&lt;/li>
&lt;/ul>
&lt;h3 id="bloom-filter">Bloom Filter&lt;/h3>
&lt;p>&lt;img src="https://pinkhello.me/%E7%AE%97%E6%B3%95-Bitmap/bitmap-bloom-filter.png" alt="hash">&lt;/p>
&lt;ul>
&lt;li>&lt;code>K1&lt;/code> 经过 &lt;code>3次&lt;/code> &lt;code>Hash&lt;/code> 落在地 &lt;code>5&lt;/code>、&lt;code>9&lt;/code>、&lt;code>10&lt;/code> 上&lt;/li>
&lt;li>&lt;code>X3&lt;/code> 经过 &lt;code>3次&lt;/code> &lt;code>Hash&lt;/code> 落在 &lt;code>9&lt;/code>、&lt;code>11&lt;/code>、&lt;code>14&lt;/code>&lt;/li>
&lt;li>可以看出重叠点在 &lt;code>9&lt;/code> 上, 所以存在一定的误判&lt;/li>
&lt;/ul>
&lt;h3 id="counting-bloom-filter">Counting Bloom Filter&lt;/h3>
&lt;p>&lt;img src="https://pinkhello.me/%E7%AE%97%E6%B3%95-Bitmap/bitmap-counting-bloom-filter.png" alt="hash">&lt;/p>
&lt;ul>
&lt;li>为了解决 &lt;code>bloom filter&lt;/code> 无法删除的问题&lt;/li>
&lt;li>比正常的 &lt;code>bloom filter&lt;/code> 加入了对 位的计数器&lt;/li>
&lt;li>当发生删除动作的时候，对应位置的&lt;code>计数器-1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="稀松问题-roaring-bitmaphttpsgithubcomroaringbitmaproaringbitmap">(稀松问题) &lt;a href="https://github.com/RoaringBitmap/RoaringBitmap">Roaring BitMap&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;code>RoaringBitmap&lt;/code> 算法是将 &lt;code>32&lt;/code> 位 的 int 类型数据划分位 &lt;code>2^16&lt;/code> 个数据块，每个数据快对应整数的 &lt;code>高16位&lt;/code>，并使用一个容器（&lt;code>Container&lt;/code>）来存放数值的低16位。&lt;/li>
&lt;li>&lt;code>RoaringBitmap&lt;/code> 将这些 &lt;code>Container&lt;/code> 保存在一个动态数组中作为一级索引。&lt;/li>
&lt;li>&lt;code>RoaringBitmap&lt;/code> 的 Container 分类有 Array Container 和 Bitmap Container。 &lt;code>Array Container&lt;/code> 存放稀疏数据, &lt;code>Bitmap Container&lt;/code> 存放稠密数据 (如果一个 &lt;code>Container&lt;/code> 的整数数量小于&lt;code>4096&lt;/code>，就用数组容器,若大于&lt;code>4096&lt;/code>就用位图容器)。&lt;/li>
&lt;/ul>
&lt;h3 id="roaring-bitmap-存储结构">Roaring BitMap 存储结构&lt;/h3>
&lt;p>&lt;img src="https://pinkhello.me/%E7%AE%97%E6%B3%95-Bitmap/roaring-bitmap-001.png" alt="Roaring BitMap">&lt;/p>
&lt;ul>
&lt;li>高16位为 &lt;code>0000H&lt;/code> 的 container，存储有前 &lt;code>1000个62&lt;/code> 的倍数。&lt;/li>
&lt;li>高16位为 &lt;code>0001H&lt;/code> 的 container，存储有 &lt;code>[2^16, 2^16+100)&lt;/code> 区间内的 &lt;code>100&lt;/code> 个数。&lt;/li>
&lt;li>高16位为 &lt;code>0002H&lt;/code> 的 container，存储有 &lt;code>[2×2^16, 3×2^16)&lt;/code> 区间内的所有偶数，共&lt;code>2^15&lt;/code>个。&lt;/li>
&lt;/ul>
&lt;p>RoaringBitmap 结构&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00688b;font-weight:bold">short&lt;/span>[] keys;
Container[] values;
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> size;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>每个&lt;code>32位&lt;/code>的整形，&lt;code>高16位&lt;/code>会被作为 &lt;code>key&lt;/code> 存储到 &lt;code>short[] keys&lt;/code> 中, &lt;code>低16位&lt;/code>看作&lt;code>value&lt;/code>存储到 &lt;code>values&lt;/code> 中的某个 &lt;code>Container&lt;/code> 中&lt;/li>
&lt;li>&lt;code>keys&lt;/code> 和 &lt;code>values&lt;/code> 通过下标一一对应&lt;/li>
&lt;li>&lt;code>keys&lt;/code> 数组永远保证有序，方便二分查找&lt;/li>
&lt;li>&lt;code>size&lt;/code> 标示了包含 &lt;code>key-value pair&lt;/code> 的数量(即 &lt;code>keys&lt;/code> 和 &lt;code>values&lt;/code> 中有效数据的数量)&lt;/li>
&lt;/ul>
&lt;h3 id="array-container">Array Container&lt;/h3>
&lt;p>当桶内数据基数 &lt;code>&amp;lt; 4096&lt;/code> 的时候，采用它来存储, 数组初始长度伟为 &lt;code>4&lt;/code> 随着数据增多会字段扩容, 最大长度为 &lt;code>4096&lt;/code>。 在样例途中是 数组容器的 &lt;code>size&lt;/code> 都没有超过 &lt;code>4096&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> &lt;span style="color:#00688b;font-weight:bold">int&lt;/span> DEFAULT_MAX_SIZE = 4096
&lt;span style="color:#00688b;font-weight:bold">short&lt;/span>[] content;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>低16位直接存入到 &lt;code>content&lt;/code> 中, 始终保证有序，方便二分查找。且不会存储重复数据。&lt;/li>
&lt;li>因为没有数据压缩，适合存储少量的数据&lt;/li>
&lt;/ul>
&lt;h3 id="bitmap-container">Bitmap Container&lt;/h3>
&lt;p>当桶内数据基数 &lt;code>&amp;gt; 4096&lt;/code> 的时候，采用它来存储. 是普通位图。用固定长度的 &lt;code>1024&lt;/code> 的&lt;code>long数组&lt;/code>并表示，即位图大小固定为 &lt;code>2^16&lt;/code> 位 (8KB)&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00688b;font-weight:bold">long&lt;/span>[] bitmap; &lt;span style="color:#228b22">// 每个bitmap初始化长度都是固定的 1024 的 long[]
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>每个 &lt;code>Container&lt;/code> 处理 16位的整形数据，也就是 &lt;code>0-65535&lt;/code>。&lt;/li>
&lt;li>根据 &lt;code>bitmap&lt;/code> 原来，需要存储 &lt;code>65535 个bit&lt;/code> 的存储数据，每个 &lt;code>比特位&lt;/code> 用 &lt;code>1&lt;/code> 表示有, 用 &lt;code>0&lt;/code> 表示无。&lt;/li>
&lt;li>&lt;code>每个 long 有 64 bit&lt;/code>, 需要 &lt;code>1024个 long&lt;/code> 来提供 &lt;code>65536&lt;/code> 个bit。(8KB)&lt;/li>
&lt;/ul>
&lt;h3 id="run-container">Run Container&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#00688b;font-weight:bold">short&lt;/span>[] valuesLength; &lt;span style="color:#228b22">//存储的是压缩后的数据
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> nbrruns = 0;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Run Container&lt;/code> 中的 &lt;code>Run&lt;/code> 指的是 &lt;code>游(行)程长度压缩算法&lt;/code>（&lt;code>Run Length Encoding&lt;/code>），对连续数据有比较好的压缩效果.
&lt;blockquote>
&lt;p>原理:&lt;/p>
&lt;ul>
&lt;li>对于数列 &lt;code>11&lt;/code>, 压缩为 11,0&lt;/li>
&lt;li>对于数列 &lt;code>11,12,13,14,15&lt;/code>, 压缩为 &lt;code>11,4&lt;/code>&lt;/li>
&lt;li>对于数列 &lt;code>11,12,13,14,15,21,22&lt;/code>, 压缩为 &lt;code>11,4,21,1&lt;/code>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>压缩算法的性能和数据的连续性关系极为密切，对于&lt;code>连续的100 short&lt;/code>, 它能从 &lt;code>200 bit&lt;/code> 压缩到 &lt;code>4 bit&lt;/code>,但是对于 &lt;code>完全不连续的 100 short&lt;/code>，编码完后 &lt;code>200 bit&lt;/code> 变成 &lt;code>400 bit&lt;/code>
&lt;blockquote>
&lt;ul>
&lt;li>最好情况: 只存在一个数据或者只存在一串连续的数字, 那么只会存储 &lt;code>2 个 short&lt;/code>,占有 &lt;code>4 bit&lt;/code>&lt;/li>
&lt;li>最坏情况: &lt;code>0-65535&lt;/code> 范围内填充所有的奇数位(或所有的偶数位), 需要存储 &lt;code>65536 个 short&lt;/code>, &lt;code>128KB&lt;/code>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h3 id="时间空间分析">时间空间分析&lt;/h3>
&lt;p>时间&lt;/p>
&lt;ul>
&lt;li>增删改查方面 &lt;code>Bitmap Container&lt;/code>只涉及位运算 O(1)&lt;/li>
&lt;li>&lt;code>Array Container&lt;/code> 和 &lt;code>Run Container&lt;/code> 都是 &lt;code>二分查找&lt;/code> 有序数组定位元素 &lt;code>O(logN)&lt;/code>
空间&lt;/li>
&lt;li>&lt;code>Bitmap Container&lt;/code> 恒定 &lt;code>8192B&lt;/code>&lt;/li>
&lt;li>&lt;code>Array Container&lt;/code> 空间于基数（c）有关, &lt;code>(2+2c)B &lt;/code>&lt;/li>
&lt;li>&lt;code>Run Container&lt;/code> 空间与存储的 连续序列数(r) 有关, &lt;code>(2+4r)B&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="bitset">BitSet&lt;/h2>
- https://pinkhello.me/posts/%E7%AE%97%E6%B3%95-bitmap/ - PinkHello, All Rights Reserved</description></item><item><title>09 使用githook统一codestyle</title><link>https://pinkhello.me/posts/09-%E4%BD%BF%E7%94%A8githook%E7%BB%9F%E4%B8%80codestyle/</link><pubDate>Sun, 25 Apr 2021 08:46:52 +0800</pubDate><guid>https://pinkhello.me/posts/09-%E4%BD%BF%E7%94%A8githook%E7%BB%9F%E4%B8%80codestyle/</guid><description>PinkHello https://pinkhello.me/posts/09-%E4%BD%BF%E7%94%A8githook%E7%BB%9F%E4%B8%80codestyle/ -&lt;h1 id="gradle-优化">gradle 优化&lt;/h1>
&lt;ul>
&lt;li>build 指定 -g cache 缓存&lt;/li>
&lt;/ul>
&lt;h1 id="checkstyle-实践">checkstyle 实践&lt;/h1>
&lt;ul>
&lt;li>基础镜像包含 &lt;code>checkstyle.xml&lt;/code> 或者 放到远程其他可被拉取到的存储介质 ，防止项目成员改动&lt;/li>
&lt;li>&lt;code>gitlab-ci&lt;/code> &lt;code>beforeScript&lt;/code> 标签执行命令 &lt;code>copy /checkstyle.xml&lt;/code> 进入项目，(覆盖项目中存在的).&lt;/li>
&lt;li>&lt;code>gradle&lt;/code> 编译的话 将 &lt;code>maven-publish.gradle&lt;/code> &lt;code>repos.gradle&lt;/code> &lt;code>checkstyle.gradle&lt;/code>(&lt;code>checkstyle&lt;/code> 插件配置 版本以及 &lt;code>configFile&lt;/code>) 抽出放到公共的地方，防止项目团队成员改的.&lt;/li>
&lt;li>&lt;code>maven&lt;/code> 的话，可以在公共的顶级继承 &lt;code>pom&lt;/code> 里面指定变量&lt;code>checkstyle.config.location&lt;/code>. &lt;code>mvn checkstyle -Dcheckstyle.config.location=checkstyle.xml&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="git-hook-实践">git hook 实践&lt;/h1>
&lt;p>每个项目里面 &lt;code>.git/hooks&lt;/code> 里面有很多的 &lt;code>hook&lt;/code> 模板&lt;/p>
&lt;p>客户端钩子包括:&lt;code>pre-commit&lt;/code>、&lt;code>prepare-commit-msg&lt;/code>、&lt;code>commit-msg&lt;/code>、&lt;code>post-commit&lt;/code>等，主要用于控制客户端git的提交工作流。&lt;/p>
&lt;p>服务端钩子：&lt;code>pre-receive&lt;/code>、&lt;code>post-receive&lt;/code>、&lt;code>update&lt;/code>，主要在服务端接收提交对象时、推送到服务器之前调用。&lt;/p>
&lt;p>今天实践的是 客户端钩子，优化减少不符合规范或者低质量代码进入 &lt;code>gitflow&lt;/code> 流程.&lt;/p>
&lt;p>&lt;code>pre-commit&lt;/code> 和 &lt;code>commit-msg&lt;/code> 是今天的主角，&lt;code>pre-commit&lt;/code> 执行与 &lt;code>git add&lt;/code> 之后，在进行 &lt;code>git commit&lt;/code> 之前进行的操作.
可以用来进行 &lt;code>code check&lt;/code> &lt;code>code lint&lt;/code> 等等, &lt;code>commit-msg&lt;/code> 执行与 &lt;code>git commit&lt;/code> 常用于补全 &lt;code>git commit message&lt;/code> &lt;code>check msg&lt;/code> 等等
当然还有其他骚操作的功能，可以通知，等等，做多种自动化&lt;/p>
&lt;p>目录结构&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">project&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>- .git/..等等&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>- git_hooks&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>-- pre-commit &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># pre-commit action&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>-- commit-msg &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># commit-msg action&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>-- init.sh &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># 初始化脚本&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>pre-commit&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#1e889b">#!/bin/bash
&lt;/span>&lt;span style="color:#1e889b">&lt;/span>&lt;span style="color:#00688b">workPath&lt;/span>=&lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>&lt;span style="color:#658b00">pwd&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">)&lt;/span>
&lt;span style="color:#00688b">CHECK_DIR&lt;/span>=&lt;span style="color:#cd5555">${&lt;/span>&lt;span style="color:#00688b">workPath&lt;/span>&lt;span style="color:#cd5555">}&lt;/span>/checks
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> [ ! -d &lt;span style="color:#00688b">$CHECK_DIR&lt;/span> ]
&lt;span style="color:#8b008b;font-weight:bold">then&lt;/span>
mkdir &lt;span style="color:#00688b">$CHECK_DIR&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">fi&lt;/span>
&lt;span style="color:#00688b">DOWNLOAD_PATH&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;http://{download.path}/checkstyle&amp;#34;&lt;/span>
&lt;span style="color:#00688b">CONFIG_CHECK_JAR&lt;/span>=&lt;span style="color:#00688b">$CHECK_DIR&lt;/span>/checkstyle.jar;
&lt;span style="color:#00688b">CONFIG_CHECK_FILE&lt;/span>=&lt;span style="color:#00688b">$CHECK_DIR&lt;/span>/checkstyle.xml;
&lt;span style="color:#00688b">CONFIG_ERROR_FILE&lt;/span>=&lt;span style="color:#00688b">$CHECK_DIR&lt;/span>/checkstyle_errors.xml;
&lt;span style="color:#00688b">CONFIG_ERROR_REPORT_FILE&lt;/span>=&lt;span style="color:#00688b">$CHECK_DIR&lt;/span>/checkstyle_report.xml;
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> [ ! -f &lt;span style="color:#00688b">$CONFIG_CHECK_JAR&lt;/span> ]
&lt;span style="color:#8b008b;font-weight:bold">then&lt;/span>
curl -o &lt;span style="color:#00688b">$CONFIG_CHECK_JAR&lt;/span> &lt;span style="color:#00688b">$DOWNLOAD_PATH&lt;/span>/checkstyle-8.8-all.jar || true;
&lt;span style="color:#8b008b;font-weight:bold">fi&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> [ ! -f &lt;span style="color:#00688b">$CONFIG_CHECK_FILE&lt;/span> ]
&lt;span style="color:#8b008b;font-weight:bold">then&lt;/span>
curl -o &lt;span style="color:#00688b">$CONFIG_CHECK_FILE&lt;/span> &lt;span style="color:#00688b">$DOWNLOAD_PATH&lt;/span>/checkstyle.xml || true;
&lt;span style="color:#8b008b;font-weight:bold">fi&lt;/span>
&lt;span style="color:#00688b">javafiles&lt;/span>=&lt;span style="color:#cd5555">`&lt;/span>git diff --cached --name-only | grep &lt;span style="color:#cd5555">&amp;#39;\.java&amp;#39;&lt;/span>&lt;span style="color:#cd5555">`&lt;/span>;
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#00688b">$javafiles&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> [ -f &lt;span style="color:#00688b">$CONFIG_ERROR_FILE&lt;/span> ]
&lt;span style="color:#8b008b;font-weight:bold">then&lt;/span>
rm &lt;span style="color:#00688b">$CONFIG_ERROR_FILE&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">fi&lt;/span>
&lt;span style="color:#00688b">CHECK_CMD&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;java -cp &lt;/span>&lt;span style="color:#00688b">$CONFIG_CHECK_JAR&lt;/span>&lt;span style="color:#cd5555"> com.puppycrawl.tools.checkstyle.Main -c &lt;/span>&lt;span style="color:#00688b">$CONFIG_CHECK_FILE&lt;/span>&lt;span style="color:#cd5555"> &lt;/span>&lt;span style="color:#00688b">$javafiles&lt;/span>&lt;span style="color:#cd5555"> -f xml -o &lt;/span>&lt;span style="color:#00688b">$CONFIG_ERROR_FILE&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>;
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;&lt;/span>&lt;span style="color:#00688b">$CHECK_CMD&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>;
&lt;span style="color:#00688b">$CHECK_CMD&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> [ -f &lt;span style="color:#00688b">$CONFIG_ERROR_FILE&lt;/span> ]
&lt;span style="color:#8b008b;font-weight:bold">then&lt;/span>
&lt;span style="color:#00688b">errorResponse&lt;/span>=&lt;span style="color:#cd5555">`&lt;/span>cat &lt;span style="color:#00688b">$CONFIG_ERROR_FILE&lt;/span> | grep &lt;span style="color:#cd5555">\&amp;lt;&lt;/span>error|head -n 1&lt;span style="color:#cd5555">`&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> [[ &lt;span style="color:#00688b">$errorResponse&lt;/span> == *&lt;span style="color:#cd5555">&amp;#34;error&amp;#34;&lt;/span>* ]]
&lt;span style="color:#8b008b;font-weight:bold">then&lt;/span>
awk &lt;span style="color:#cd5555">&amp;#39;{print;} NR == 1 { print &amp;#34;&amp;lt;?xml-stylesheet xmlns=\&amp;#34;http://www.w3.org/1999/xhtml\&amp;#34; href=\&amp;#34;checkstyle-simple.xsl\&amp;#34; type=\&amp;#34;text/xsl\&amp;#34;?&amp;gt;&amp;#34;}&amp;#39;&lt;/span> &lt;span style="color:#00688b">$CONFIG_ERROR_FILE&lt;/span> &amp;gt; &lt;span style="color:#00688b">$CONFIG_ERROR_REPORT_FILE&lt;/span>;
&lt;span style="color:#658b00">echo&lt;/span> -e &lt;span style="color:#cd5555">&amp;#34;Check your code. Open by Safari or Chrome ( --allow-file-access-from-files ): &lt;/span>&lt;span style="color:#00688b">$CONFIG_ERROR_REPORT_FILE&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>;
open &lt;span style="color:#00688b">$CONFIG_ERROR_REPORT_FILE&lt;/span>
&lt;span style="color:#658b00">exit&lt;/span> &lt;span style="color:#b452cd">1&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">fi&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">fi&lt;/span>
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;check pass! pre_commit successfully!&amp;#34;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>commit-msg&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#1e889b">#!/bin/sh
&lt;/span>&lt;span style="color:#1e889b">&lt;/span>&lt;span style="color:#228b22"># append CL message 信息（加入作者 例子）&lt;/span>
&lt;span style="color:#228b22">#name=[PinkHello]&lt;/span>
&lt;span style="color:#228b22">#commit=&amp;#34;$name $(cat $1)&amp;#34;&lt;/span>
&lt;span style="color:#228b22">#echo &amp;#34;$commit&amp;#34; &amp;gt; &amp;#34;$1&amp;#34;&lt;/span>
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#00688b">$commit&lt;/span>
&lt;span style="color:#00688b">commit&lt;/span>=&lt;span style="color:#cd5555">`&lt;/span>cat &lt;span style="color:#00688b">$1&lt;/span>&lt;span style="color:#cd5555">`&lt;/span>
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;&lt;/span>&lt;span style="color:#00688b">$commit&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span> &amp;gt; &lt;span style="color:#cd5555">&amp;#34;&lt;/span>&lt;span style="color:#00688b">$1&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> [[ &lt;span style="color:#00688b">$commit&lt;/span> =~ ^([A-Z]+)-([0-9]+):.*|(Merge.*)|(Revert.*)|(Other.*) ]]
&lt;span style="color:#8b008b;font-weight:bold">then&lt;/span>
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;commit successful!&amp;#34;&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">else&lt;/span>
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;\033 Error: the commit message must start with JIRA ticket number \033&amp;#34;&lt;/span>
&lt;span style="color:#658b00">exit&lt;/span> &lt;span style="color:#b452cd">1&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>init.sh&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#1e889b">#!/bin/sh
&lt;/span>&lt;span style="color:#1e889b">&lt;/span>&lt;span style="color:#228b22"># 当前目录&lt;/span>
&lt;span style="color:#00688b">workPath&lt;/span>=&lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>&lt;span style="color:#658b00">pwd&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">)&lt;/span>
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;当前初始化目录&lt;/span>&lt;span style="color:#00688b">$workPath&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>
&lt;span style="color:#228b22"># 链接到 .git hooks 目录里面&lt;/span>
ln -s -f &lt;span style="color:#00688b">$workPath&lt;/span>/pre-commit &lt;span style="color:#00688b">$workPath&lt;/span>/../.git/hooks/pre-commit
ln -s -f &lt;span style="color:#00688b">$workPath&lt;/span>/commit-msg &lt;span style="color:#00688b">$workPath&lt;/span>/../.git/hooks/commit-msg
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;ln pre-commit commit-msg.....success.&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="google-cr-mr-规范">google CR MR 规范&lt;/h1>
&lt;p>&lt;a href="https://github.com/google/eng-practices">https://github.com/google/eng-practices&lt;/a>&lt;/p>
&lt;p>&lt;code>CL&lt;/code> 规范：&lt;/p>
&lt;ul>
&lt;li>提交新的 &lt;code>subject&lt;/code> ，才有祈使句，一个命令的形式言简意赅的表达这次要改变的什么，如需要详细上下文，关联 &lt;code>ticket&lt;/code>，在 &lt;code>body&lt;/code> 中说明&lt;/li>
&lt;li>简化 &lt;code>cl&lt;/code> ，尽可能小，不要积攒一堆 &lt;code>change&lt;/code> ，一次性提交，然后再一次性 &lt;code>MR&lt;/code> ，加大了 &lt;code>review&lt;/code> 风险。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>MR&lt;/code> 规范&lt;/p>
&lt;ul>
&lt;li>紧急 &lt;code>MR&lt;/code> 适当放松&lt;/li>
&lt;li>&lt;code>MR&lt;/code> 不能带有脾气，目的是基于问题讨论，解决问题&lt;/li>
&lt;li>针对做的好的给予肯定和👍&lt;/li>
&lt;li>&lt;code>LGTM means look good to me &lt;/code>= 朕知道了！&lt;/li>
&lt;li>&lt;code>MR&lt;/code> 冲突，联系必要开发者一起参与决定避免出现代码丢失与错误.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>CR&lt;/code> 规范&lt;/p>
&lt;ul>
&lt;li>速度可以灭杀一切抱怨，不能让 &lt;code>cr&lt;/code> 时间过长&lt;/li>
&lt;li>&lt;code>CR&lt;/code> 发现问题一定要让开发者去修改，不要有以后再修改的想法，这种方式往往是让系统变得更差的原因.&lt;/li>
&lt;/ul>
- https://pinkhello.me/posts/09-%E4%BD%BF%E7%94%A8githook%E7%BB%9F%E4%B8%80codestyle/ - PinkHello, All Rights Reserved</description></item><item><title>数据结构与算法 01 优先队列</title><link>https://pinkhello.me/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-01-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</link><pubDate>Thu, 22 Apr 2021 23:53:53 +0800</pubDate><guid>https://pinkhello.me/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-01-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</guid><description>PinkHello https://pinkhello.me/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-01-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/ -&lt;h1 id="为什么需要优先队列">为什么需要优先队列&lt;/h1>
&lt;p>&lt;code>队列&lt;/code>是一种先进先出的数据结构，所有元素优先级一样，完全遵守先进先出的规则。但是往往现实情况下，这种公平需要被打破。它是一个动态变化的过程，可能有一些需要优先，一些需要降低优先级。且这些数据是一个动态变化的过程，所以需要维系这个优先级队列。&lt;/p>
&lt;h1 id="优先队列的实现方式">优先队列的实现方式&lt;/h1>
&lt;h2 id="数组实现">数组实现&lt;/h2>
&lt;h2 id="链表">链表&lt;/h2>
- https://pinkhello.me/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-01-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/ - PinkHello, All Rights Reserved</description></item><item><title>08 Gradle多模块项目模板化</title><link>https://pinkhello.me/posts/08-gradle%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E5%8C%96/</link><pubDate>Tue, 20 Apr 2021 08:43:21 +0800</pubDate><guid>https://pinkhello.me/posts/08-gradle%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E5%8C%96/</guid><description>PinkHello https://pinkhello.me/posts/08-gradle%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E5%8C%96/ -&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Maven 冗余， Gradle 简单轻便
公司原有的 CI/CD 流程，借助 Maven 插件 build Docker Image,改为原生 Docker Runner 原始构建&lt;/p>
&lt;h2 id="1多模块项目">1、多模块项目&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">project&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- app&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- src/main/[java|resources] | src/test/[java|resources] &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># classpath&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- Dockerfile &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># Dockerfile&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- build.gradle &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># APP 模块 gradle 配置&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- sdk &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># SDK 模块 可有可无&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- src/main/java&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- build.gradle &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># SDK 的 gradle 配置&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- deploy &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># delpoy 项目 注意 checkstyle 相关配置在这里面&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- checkstyle/**&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#1e889b">**.yml&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- build.gradle &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># 项目顶级 gradle配置&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- gradle&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- wrapper/** &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># gradle 配置信息&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- check.gradle &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># pmd &amp;amp; checkstyle&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- repo.gradle &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># 仓库定义&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#228b22"># test.gradle 放这儿，就没有高亮了 =&amp;gt; 暂时维护在 顶层的 build.gradle 中，单独维护，不要和其他配置混在一起。&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- settings.gradle &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># 配置&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- versions-prod.gradle &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># 版本定义&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- versions-dev.gradle &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># 版本定义&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- .gitignore &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># git忽略文件&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- .gitlab-ci.yml &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># CI/CD&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2project-下各个gradle文件">2、Project 下各个gradle文件&lt;/h2>
&lt;p>Project/versions.gradle 可以统一版本管理&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="color:#228b22">//start step
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#00688b;font-weight:bold">def&lt;/span> versions = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Expando()
&lt;span style="color:#00688b;font-weight:bold">def&lt;/span> deps = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Expando()
ext.&lt;span style="color:#658b00">versions&lt;/span> = versions
ext.&lt;span style="color:#658b00">deps&lt;/span> = deps
&lt;span style="color:#228b22">//set versions
&lt;/span>&lt;span style="color:#228b22">&lt;/span>versions.&lt;span style="color:#658b00">springboot&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;2.1.16.RELEASE&amp;#34;&lt;/span>
versions.&lt;span style="color:#658b00">mysql&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;8.0.16&amp;#34;&lt;/span>
versions.&lt;span style="color:#658b00">guava&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;25.1-jre&amp;#34;&lt;/span>
versions.&lt;span style="color:#658b00">httpclient&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;4.5.9&amp;#34;&lt;/span>
versions.&lt;span style="color:#658b00">okhttp3&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;3.8.1&amp;#34;&lt;/span>
versions.&lt;span style="color:#658b00">apm&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;1.7.0&amp;#34;&lt;/span>
versions.&lt;span style="color:#658b00">kotlin&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;1.4.10&amp;#34;&lt;/span>
&lt;span style="color:#228b22">//set dependencies
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
&lt;span style="color:#228b22">// 基础开源包
&lt;/span>&lt;span style="color:#228b22">&lt;/span>deps.&lt;span style="color:#658b00">mysql&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;mysql:mysql-connector-java:${versions.mysql}&amp;#34;&lt;/span>
deps.&lt;span style="color:#658b00">guava&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;com.google.guava:guava:${versions.guava}&amp;#34;&lt;/span>
deps.&lt;span style="color:#658b00">okhttp3&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;com.squareup.okhttp3:okhttp:${versions.okhttp3}&amp;#34;&lt;/span>
deps.&lt;span style="color:#658b00">apm&lt;/span> = &lt;span style="color:#cd5555">&amp;#34;co.elastic.apm:apm-agent-attach:${versions.apm}&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Project/settings.gradle 根配置文件，build 快不快全靠它&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="color:#228b22">//配置插件走国内代理
&lt;/span>&lt;span style="color:#228b22">&lt;/span>pluginManagement {
repositories {
maven {
url &lt;span style="color:#cd5555">&amp;#39;https://maven.aliyun.com/repository/gradle-plugin&amp;#39;&lt;/span>
}
gradlePluginPortal()
}
}
rootProject.&lt;span style="color:#658b00">name&lt;/span> = &lt;span style="color:#cd5555">&amp;#39;project-name&amp;#39;&lt;/span>
include &lt;span style="color:#cd5555">&amp;#39;:app&amp;#39;&lt;/span>
include &lt;span style="color:#cd5555">&amp;#39;:sdk&amp;#39;&lt;/span> &lt;span style="color:#228b22">// 没有SDK模块的化不需要这个
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Project/build.gradle&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">buildscript {
ext {
kotlinVersion = &lt;span style="color:#cd5555">&amp;#34;1.4.10&amp;#34;&lt;/span>
springBootVersion = &lt;span style="color:#cd5555">&amp;#39;2.1.16.RELEASE&amp;#39;&lt;/span>
springBootGradleVersion = &lt;span style="color:#cd5555">&amp;#39;2.3.3.RELEASE&amp;#39;&lt;/span>
}
}
plugins {
id &lt;span style="color:#cd5555">&amp;#34;java&amp;#34;&lt;/span>
id &lt;span style="color:#cd5555">&amp;#34;pmd&amp;#34;&lt;/span>
id &lt;span style="color:#cd5555">&amp;#34;checkstyle&amp;#34;&lt;/span>
id &lt;span style="color:#cd5555">&amp;#34;maven-publish&amp;#34;&lt;/span>
id &lt;span style="color:#cd5555">&amp;#34;org.jetbrains.kotlin.jvm&amp;#34;&lt;/span> version &lt;span style="color:#cd5555">&amp;#34;$kotlinVersion&amp;#34;&lt;/span>
id &lt;span style="color:#cd5555">&amp;#34;org.jetbrains.kotlin.plugin.spring&amp;#34;&lt;/span> version &lt;span style="color:#cd5555">&amp;#34;$kotlinVersion&amp;#34;&lt;/span>
id &lt;span style="color:#cd5555">&amp;#34;org.springframework.boot&amp;#34;&lt;/span> version &lt;span style="color:#cd5555">&amp;#34;$springBootVersion&amp;#34;&lt;/span>
id &lt;span style="color:#cd5555">&amp;#34;io.spring.dependency-management&amp;#34;&lt;/span> version &lt;span style="color:#cd5555">&amp;#34;1.0.9.RELEASE&amp;#34;&lt;/span>
}
apply from: file(&lt;span style="color:#cd5555">&amp;#34;versions.gradle&amp;#34;&lt;/span>)
&lt;span style="color:#228b22">// 为了一如不同的版本环境下的代码配置
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#00688b;font-weight:bold">def&lt;/span> env = System.&lt;span style="color:#658b00">getProperty&lt;/span>(&lt;span style="color:#cd5555">&amp;#39;env&amp;#39;&lt;/span>) ?: &lt;span style="color:#cd5555">&amp;#39;dev&amp;#39;&lt;/span>
apply from: &lt;span style="color:#cd5555">&amp;#34;${rootDir}/versions-${env}.gradle&amp;#34;&lt;/span>
allprojects {
&lt;span style="color:#228b22">// 配置 group
&lt;/span>&lt;span style="color:#228b22">&lt;/span> group &lt;span style="color:#cd5555">&amp;#34;com.XXX.XXX&amp;#34;&lt;/span>
&lt;span style="color:#228b22">//配置版本
&lt;/span>&lt;span style="color:#228b22">&lt;/span> version = findProperty &lt;span style="color:#cd5555">&amp;#39;version&amp;#39;&lt;/span> ?: &lt;span style="color:#cd5555">&amp;#39;1.0.0-SNAPSHOT&amp;#39;&lt;/span>
bootJar {
enabled = &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>
}
apply plugin: &lt;span style="color:#cd5555">&amp;#34;java&amp;#34;&lt;/span>
apply plugin: &lt;span style="color:#cd5555">&amp;#34;idea&amp;#34;&lt;/span>
apply plugin: &lt;span style="color:#cd5555">&amp;#34;maven-publish&amp;#34;&lt;/span>
apply plugin: &lt;span style="color:#cd5555">&amp;#34;org.jetbrains.kotlin.jvm&amp;#34;&lt;/span>
apply plugin: &lt;span style="color:#cd5555">&amp;#34;kotlin-spring&amp;#34;&lt;/span>
apply plugin: &lt;span style="color:#cd5555">&amp;#34;org.springframework.boot&amp;#34;&lt;/span>
apply plugin: &lt;span style="color:#cd5555">&amp;#34;io.spring.dependency-management&amp;#34;&lt;/span>
apply plugin: &lt;span style="color:#cd5555">&amp;#39;jacoco&amp;#39;&lt;/span>
&lt;span style="color:#228b22">//假如 你的 mapper.xml 或者 grovvy 写在 src/main/java ，打包需要处理到 需要加入的resources，需要手动处理
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">// 当然如果 你的 mapper.xml 直接在 src/main/resources 里面 不需要处理，可以直接删除
&lt;/span>&lt;span style="color:#228b22">&lt;/span> processResources {
from(&lt;span style="color:#cd5555">&amp;#39;src/main/java&amp;#39;&lt;/span>) {
include &lt;span style="color:#cd5555">&amp;#39;**/*.xml&amp;#39;&lt;/span>
include &lt;span style="color:#cd5555">&amp;#39;**/*.groovy&amp;#39;&lt;/span>
}
}
}
&lt;span style="color:#228b22">// apply from: file(&amp;#34;gradle/repo.gradle&amp;#34;)
&lt;/span>&lt;span style="color:#228b22">// apply from: file(&amp;#34;gradle/check.gradle&amp;#34;)
&lt;/span>&lt;span style="color:#228b22">// apply from: file(&amp;#34;gradle/maven-publish.gradle&amp;#34;)
&lt;/span>&lt;span style="color:#228b22">&lt;/span>apply from: &lt;span style="color:#cd5555">&amp;#39;https://${DownloadPath}/gradle/check-style.gradle&amp;#39;&lt;/span>
apply from: &lt;span style="color:#cd5555">&amp;#39;https://${DownloadPath}/gradle/maven-repo.gradle&amp;#39;&lt;/span>
apply from: &lt;span style="color:#cd5555">&amp;#39;https://${DownloadPath}/gradle/maven-publish.gradle&amp;#39;&lt;/span>
subprojects {
configurations {
provided
}
sourceSets.&lt;span style="color:#658b00">main&lt;/span>.&lt;span style="color:#658b00">compileClasspath&lt;/span> += configurations.&lt;span style="color:#658b00">provided&lt;/span>
sourceSets.&lt;span style="color:#658b00">test&lt;/span>.&lt;span style="color:#658b00">compileClasspath&lt;/span> += configurations.&lt;span style="color:#658b00">provided&lt;/span>
sourceSets.&lt;span style="color:#658b00">test&lt;/span>.&lt;span style="color:#658b00">runtimeClasspath&lt;/span> += configurations.&lt;span style="color:#658b00">provided&lt;/span>
tasks.&lt;span style="color:#658b00">withType&lt;/span>(JavaCompile) {
options.&lt;span style="color:#658b00">encoding&lt;/span> = &lt;span style="color:#cd5555">&amp;#39;UTF-8&amp;#39;&lt;/span>
}
task &lt;span style="color:#008b45">sourceJar&lt;/span>(type: Jar) {
from sourceSets.&lt;span style="color:#658b00">main&lt;/span>.&lt;span style="color:#658b00">allJava&lt;/span>
classifier &lt;span style="color:#cd5555">&amp;#34;sources&amp;#34;&lt;/span>
}
task &lt;span style="color:#008b45">javadocJar&lt;/span>(type: Jar, dependsOn: javadoc) {
from javadoc.&lt;span style="color:#658b00">destinationDir&lt;/span>
}
dependencies {
implementation &lt;span style="color:#cd5555">&amp;#34;com.google.guava:guava:$versions.guava&amp;#34;&lt;/span>
compileOnly &lt;span style="color:#cd5555">&amp;#39;org.projectlombok:lombok:1.18.4&amp;#39;&lt;/span>
annotationProcessor &lt;span style="color:#cd5555">&amp;#39;org.projectlombok:lombok:1.18.4&amp;#39;&lt;/span>
testCompileOnly &lt;span style="color:#cd5555">&amp;#39;org.projectlombok:lombok:1.18.4&amp;#39;&lt;/span>
testAnnotationProcessor &lt;span style="color:#cd5555">&amp;#39;org.projectlombok:lombok:1.18.4&amp;#39;&lt;/span>
testImplementation &lt;span style="color:#cd5555">&amp;#34;org.springframework.boot:spring-boot-starter-test:$springBootVersion&amp;#34;&lt;/span>
testImplementation &lt;span style="color:#cd5555">&amp;#34;org.mockito:mockito-core:2.23.4&amp;#34;&lt;/span>
testImplementation &lt;span style="color:#cd5555">&amp;#39;junit:junit:4.13&amp;#39;&lt;/span>
&lt;span style="color:#228b22">// h2
&lt;/span>&lt;span style="color:#228b22">&lt;/span> testImplementation &lt;span style="color:#cd5555">&amp;#34;com.h2database:h2:1.4.200&amp;#34;&lt;/span>
&lt;span style="color:#228b22">// redis memery
&lt;/span>&lt;span style="color:#228b22">&lt;/span> testImplementation &lt;span style="color:#cd5555">&amp;#34;com.github.kstyrc:embedded-redis:0.6&amp;#34;&lt;/span>
}
&lt;span style="color:#228b22">// jacoco report
&lt;/span>&lt;span style="color:#228b22">&lt;/span> jacocoTestReport {
reports {
xml.&lt;span style="color:#658b00">enabled&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>
html.&lt;span style="color:#658b00">enabled&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>
}
}
check.&lt;span style="color:#658b00">dependsOn&lt;/span> jacocoTestReport
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">
allprojects {
apply plugin: &lt;span style="color:#cd5555">&amp;#39;maven-publish&amp;#39;&lt;/span>
publishing {
task &lt;span style="color:#008b45">sourceJar&lt;/span>(type: Jar) {
from sourceSets.&lt;span style="color:#658b00">main&lt;/span>.&lt;span style="color:#658b00">allJava&lt;/span>
classifier &lt;span style="color:#cd5555">&amp;#34;sources&amp;#34;&lt;/span>
}
publications {
mavenSnapshots(MavenPublication) {
groupId project.&lt;span style="color:#658b00">group&lt;/span>
artifactId project.&lt;span style="color:#658b00">name&lt;/span>
version project.&lt;span style="color:#658b00">version&lt;/span>
from components.&lt;span style="color:#658b00">java&lt;/span>
artifact sourceJar
ext.&lt;span style="color:#658b00">repo&lt;/span> = &lt;span style="color:#cd5555">&amp;#39;Dev&amp;#39;&lt;/span>
}
mavenRelease(MavenPublication) {
groupId project.&lt;span style="color:#658b00">group&lt;/span>
artifactId project.&lt;span style="color:#658b00">name&lt;/span>
version project.&lt;span style="color:#658b00">version&lt;/span>
from components.&lt;span style="color:#658b00">java&lt;/span>
artifact sourceJar
ext.&lt;span style="color:#658b00">repo&lt;/span> = &lt;span style="color:#cd5555">&amp;#39;Prod&amp;#39;&lt;/span>
}
}
repositories {
maven {
name &lt;span style="color:#cd5555">&amp;#39;Dev&amp;#39;&lt;/span>
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-snapshots/&amp;#34;&lt;/span>
authentication {
header(HttpHeaderAuthentication)
}
credentials(HttpHeaderCredentials) {
name &lt;span style="color:#cd5555">&amp;#34;Authorization&amp;#34;&lt;/span>
value &lt;span style="color:#cd5555">&amp;#34;Basic ${NEXUS_CAS_HEADER}&amp;#34;&lt;/span>
}
}
maven {
name &lt;span style="color:#cd5555">&amp;#39;Prod&amp;#39;&lt;/span>
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-releases/&amp;#34;&lt;/span>
}
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Project/gradle/repo.gradle 指定私有仓库地址以及验证方式&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">buildscript {
repositories {
mavenLocal()
maven {
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-releases/&amp;#34;&lt;/span>
authentication {
header(HttpHeaderAuthentication)
}
credentials(HttpHeaderCredentials) {
name &lt;span style="color:#cd5555">&amp;#34;Authorization&amp;#34;&lt;/span>
value &lt;span style="color:#cd5555">&amp;#34;Basic ${NEXUS_CAS_HEADER}&amp;#34;&lt;/span>
}
}
maven {
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-snapshots/&amp;#34;&lt;/span>
authentication {
header(HttpHeaderAuthentication)
}
credentials(HttpHeaderCredentials) {
name &lt;span style="color:#cd5555">&amp;#34;Authorization&amp;#34;&lt;/span>
value &lt;span style="color:#cd5555">&amp;#34;Basic ${NEXUS_CAS_HEADER}&amp;#34;&lt;/span>
}
}
maven {
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-public/&amp;#34;&lt;/span>
authentication {
header(HttpHeaderAuthentication)
}
credentials(HttpHeaderCredentials) {
name &lt;span style="color:#cd5555">&amp;#34;Authorization&amp;#34;&lt;/span>
value &lt;span style="color:#cd5555">&amp;#34;Basic ${NEXUS_CAS_HEADER}&amp;#34;&lt;/span>
}
}
maven { url &lt;span style="color:#cd5555">&amp;#34;https://maven.aliyun.com/nexus/content/groups/public/&amp;#34;&lt;/span> }
maven { url &lt;span style="color:#cd5555">&amp;#34;https://repo.spring.io/milestone&amp;#34;&lt;/span> }
maven { url &lt;span style="color:#cd5555">&amp;#34;https://oss.sonatype.org/content/repositories/snapshots/&amp;#34;&lt;/span> }
}
}
allprojects {
repositories {
mavenLocal()
maven {
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-releases/&amp;#34;&lt;/span>
authentication {
header(HttpHeaderAuthentication)
}
credentials(HttpHeaderCredentials) {
name &lt;span style="color:#cd5555">&amp;#34;Authorization&amp;#34;&lt;/span>
value &lt;span style="color:#cd5555">&amp;#34;Basic ${NEXUS_CAS_HEADER}&amp;#34;&lt;/span>
}
}
maven {
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-snapshots/&amp;#34;&lt;/span>
authentication {
header(HttpHeaderAuthentication)
}
credentials(HttpHeaderCredentials) {
name &lt;span style="color:#cd5555">&amp;#34;Authorization&amp;#34;&lt;/span>
value &lt;span style="color:#cd5555">&amp;#34;Basic ${NEXUS_CAS_HEADER}&amp;#34;&lt;/span>
}
}
maven {
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-public/&amp;#34;&lt;/span>
authentication {
header(HttpHeaderAuthentication)
}
credentials(HttpHeaderCredentials) {
name &lt;span style="color:#cd5555">&amp;#34;Authorization&amp;#34;&lt;/span>
value &lt;span style="color:#cd5555">&amp;#34;Basic ${NEXUS_CAS_HEADER}&amp;#34;&lt;/span>
}
}
maven { url &lt;span style="color:#cd5555">&amp;#34;https://maven.aliyun.com/nexus/content/groups/public/&amp;#34;&lt;/span> }
maven { url &lt;span style="color:#cd5555">&amp;#34;https://repo.spring.io/milestone&amp;#34;&lt;/span> }
maven { url &lt;span style="color:#cd5555">&amp;#34;https://oss.sonatype.org/content/repositories/snapshots/&amp;#34;&lt;/span> }
}
}
subprojects {
repositories {
mavenLocal()
maven {
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-releases/&amp;#34;&lt;/span>
authentication {
header(HttpHeaderAuthentication)
}
credentials(HttpHeaderCredentials) {
name &lt;span style="color:#cd5555">&amp;#34;Authorization&amp;#34;&lt;/span>
value &lt;span style="color:#cd5555">&amp;#34;Basic ${NEXUS_CAS_HEADER}&amp;#34;&lt;/span>
}
}
maven {
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-snapshots/&amp;#34;&lt;/span>
authentication {
header(HttpHeaderAuthentication)
}
credentials(HttpHeaderCredentials) {
name &lt;span style="color:#cd5555">&amp;#34;Authorization&amp;#34;&lt;/span>
value &lt;span style="color:#cd5555">&amp;#34;Basic ${NEXUS_CAS_HEADER}&amp;#34;&lt;/span>
}
}
maven {
url &lt;span style="color:#cd5555">&amp;#34;${NEXUS_URL}/repository/maven-public/&amp;#34;&lt;/span>
authentication {
header(HttpHeaderAuthentication)
}
credentials(HttpHeaderCredentials) {
name &lt;span style="color:#cd5555">&amp;#34;Authorization&amp;#34;&lt;/span>
value &lt;span style="color:#cd5555">&amp;#34;Basic ${NEXUS_CAS_HEADER}&amp;#34;&lt;/span>
}
}
maven { url &lt;span style="color:#cd5555">&amp;#34;https://maven.aliyun.com/nexus/content/groups/public/&amp;#34;&lt;/span> }
maven { url &lt;span style="color:#cd5555">&amp;#34;https://repo.spring.io/milestone&amp;#34;&lt;/span> }
maven { url &lt;span style="color:#cd5555">&amp;#34;https://oss.sonatype.org/content/repositories/snapshots/&amp;#34;&lt;/span> }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Project/gradle/check.gradle&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">subprojects {
apply plugin: &lt;span style="color:#cd5555">&amp;#39;checkstyle&amp;#39;&lt;/span>
checkstyle {
configFile = rootProject.&lt;span style="color:#658b00">file&lt;/span>(&lt;span style="color:#cd5555">&amp;#39;deploy/checkstyle/checkstyle.xml&amp;#39;&lt;/span>)
showViolations = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>
&lt;span style="color:#228b22">// ignoreFailures = true
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
}
&lt;span style="color:#228b22">//可以指定排查
&lt;/span>&lt;span style="color:#228b22">&lt;/span> checkstyleMain {
exclude &lt;span style="color:#cd5555">&amp;#34;**/*.groovy&amp;#34;&lt;/span>
}
apply plugin: &lt;span style="color:#cd5555">&amp;#39;pmd&amp;#39;&lt;/span>
dependencies {
pmd &lt;span style="color:#cd5555">&amp;#34;com.alibaba.p3c:p3c-pmd:2.0.0&amp;#34;&lt;/span>
}
pmd {
consoleOutput = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>
ruleSets = [
&lt;span style="color:#cd5555">&amp;#34;java-ali-comment&amp;#34;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#34;java-ali-concurrent&amp;#34;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#34;java-ali-constant&amp;#34;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#34;java-ali-exception&amp;#34;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#34;java-ali-flowcontrol&amp;#34;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#34;java-ali-naming&amp;#34;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#34;java-ali-oop&amp;#34;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#34;java-ali-orm&amp;#34;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#34;java-ali-other&amp;#34;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#34;java-ali-set&amp;#34;&lt;/span>
]
incrementalAnalysis = &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>
}
pmdMain {
exclude &lt;span style="color:#cd5555">&amp;#34;**/exclude_package/**&amp;#34;&lt;/span>
}
}
test.&lt;span style="color:#658b00">mustRunAfter&lt;/span> checkstyleMain, checkstyleTest
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Project/sdk/build.gradle&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">apply from: file(&lt;span style="color:#cd5555">&amp;#34;$rootDir/versions.gradle&amp;#34;&lt;/span>)
jar {
enabled = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>
}
bootJar {
enabled = &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>
}
dependencies {
implementation &lt;span style="color:#cd5555">&amp;#39;org.springframework.cloud:spring-cloud-starter-openfeign:2.1.0.RELEASE&amp;#39;&lt;/span>
......
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Project/app/build.gradle&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">apply from: file(&lt;span style="color:#cd5555">&amp;#34;$rootDir/versions.gradle&amp;#34;&lt;/span>)
bootJar {
enabled = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>
}
jar {
enabled = &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>
}
dependencies {
implementation deps.&lt;span style="color:#658b00">springboot&lt;/span>.&lt;span style="color:#658b00">starter&lt;/span>
implementation deps.&lt;span style="color:#658b00">springboot&lt;/span>.&lt;span style="color:#658b00">starter_web&lt;/span>
implementation deps.&lt;span style="color:#658b00">mysql&lt;/span>
implementation deps.&lt;span style="color:#658b00">myabtis&lt;/span>.&lt;span style="color:#658b00">myabtis&lt;/span>
implementation deps.&lt;span style="color:#658b00">myabtis&lt;/span>.&lt;span style="color:#658b00">starter&lt;/span>
implementation &lt;span style="color:#cd5555">&amp;#39;org.springframework.boot:spring-boot-starter-amqp:2.1.2.RELEASE&amp;#39;&lt;/span>
implementation &lt;span style="color:#cd5555">&amp;#34;org.springframework.cloud:spring-cloud-starter-openfeign:2.1.0.RELEASE&amp;#34;&lt;/span>
implementation &lt;span style="color:#cd5555">&amp;#39;com.zaxxer:HikariCP:3.4.1&amp;#39;&lt;/span>
implementation &lt;span style="color:#cd5555">&amp;#39;com.baomidou:mybatis-plus:2.2.0&amp;#39;&lt;/span>
implementation &lt;span style="color:#cd5555">&amp;#39;com.github.pagehelper:pagehelper:5.1.2&amp;#39;&lt;/span>
implementation &lt;span style="color:#cd5555">&amp;#39;org.mongodb:mongo-java-driver:3.8.0&amp;#39;&lt;/span>
...... &lt;span style="color:#228b22">//剩余映射依赖
&lt;/span>&lt;span style="color:#228b22">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-dockerfile-注意-add-文件路径">3、 Dockerfile 注意 ADD 文件路径&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#8b008b;font-weight:bold">FROM&lt;/span>&lt;span style="color:#cd5555"> {HARBOR_HOST}/BaseImage&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ADD&lt;/span> ./build/libs/app.jar /app.jar&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">&lt;/span>.... 其他配置&lt;span style="color:#a61717;background-color:#e3d2d2">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4project-下添加-gradleproperties-注意在-gitignore-里面添加上它不要传递到公开服务器是你的密码等敏感信息">4、Project/ 下添加 gradle.properties, 注意在 .gitignore 里面添加上它，不要传递到公开服务器，是你的密码等敏感信息&lt;/h2>
&lt;pre>&lt;code class="language-properties" data-lang="properties"># Nexus 仓库地址
NEXUS_URL=https://nexus-url
# 指定为你自己的maven的用户配置 settings.xml 里面的你的配置
NEXUS_CAS_HEADER=XXXXXXX
# gradle daemon
org.gradle.daemon=true
# 禁用Gradle 6.x 版本 SHA-256和SHA-512校验和的发布
# https://juejin.im/post/6844904101126553614
systemProp.org.gradle.internal.publish.checksums.insecure=true
&lt;/code>&lt;/pre>&lt;h2 id="5gitlab-ci-模板化下次分享">5、gitlab-ci 模板化，下次分享~~~~&lt;/h2>
- https://pinkhello.me/posts/08-gradle%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E5%8C%96/ - PinkHello, All Rights Reserved</description></item></channel></rss>