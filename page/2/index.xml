<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PinkHello</title><link>https://pinkhello.me/</link><description>Recent content on PinkHello</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>PinkHello, All Rights Reserved</copyright><lastBuildDate>Thu, 17 Jun 2021 09:53:51 +0800</lastBuildDate><atom:link href="https://pinkhello.me/index.xml" rel="self" type="application/rss+xml"/><item><title>07 Fabric使用</title><link>https://pinkhello.me/posts/07-fabric%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 28 Mar 2021 08:40:46 +0800</pubDate><guid>https://pinkhello.me/posts/07-fabric%E4%BD%BF%E7%94%A8/</guid><description>PinkHello https://pinkhello.me/posts/07-fabric%E4%BD%BF%E7%94%A8/ -&lt;h2 id="docker-加入systemctl环境并启动docker">docker 加入systemctl环境并启动docker&lt;/h2>
&lt;p>快速安装docker&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -sSL https://get.daocloud.io/docker | sh
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">systemctl &lt;span style="color:#658b00">enable&lt;/span> docker
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">systemctl start docker
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-compose-安装">docker-compose 安装&lt;/h2>
&lt;p>走外网或者 &lt;code>github&lt;/code> 太慢,可以使用内部加速&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash"> curl -L &lt;span style="color:#cd5555">&amp;#34;https://github.com/docker/compose/releases/download/X.XX.X/docker-compose-&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>uname -s&lt;span style="color:#8b008b;font-weight:bold">)&lt;/span>&lt;span style="color:#cd5555">-&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>uname -m&lt;span style="color:#8b008b;font-weight:bold">)&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span> -o /usr/local/bin/docker-compose
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash"> curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-&lt;span style="color:#cd5555">`&lt;/span>uname -s&lt;span style="color:#cd5555">`&lt;/span>-&lt;span style="color:#cd5555">`&lt;/span>uname -m&lt;span style="color:#cd5555">`&lt;/span> &amp;gt; /usr/local/bin/docker-compose
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="fabric-自动运维">fabric 自动运维&lt;/h2>
&lt;h3 id="python-虚拟环境安装">python 虚拟环境安装&lt;/h3>
&lt;p>&lt;a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1019273143120480">参考&lt;/a>&lt;/p>
&lt;p>创建一个独立的虚拟环境&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#658b00">cd&lt;/span> 目标目录
virtualenv --no-site-packages venv
&lt;/code>&lt;/pre>&lt;/div>&lt;p>激活虚拟环境&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#658b00">source&lt;/span> venv/bin/activate
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="python-pip-安装-fabric">python pip 安装 Fabric&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install fabric3
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="python-pip-导出依赖">python pip 导出依赖&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip freeze &amp;gt; requirements.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其他python-pip-导入安装">其他python pip 导入安装&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install -r requirements.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="fabric-文档-fabfiles-文档httpsfabric-chsreadthedocsiozh_cnchsusagefabfileshtml">&lt;a href="https://fabric-chs.readthedocs.io/zh_CN/chs/usage/fabfiles.html">Fabric 文档 fabfiles 文档&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#228b22"># encoding=utf-8&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">from&lt;/span> &lt;span style="color:#008b45;text-decoration:underline">fabric.api&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> *
&lt;span style="color:#8b008b;font-weight:bold">from&lt;/span> &lt;span style="color:#008b45;text-decoration:underline">fabric.context_managers&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">import&lt;/span> *
env.user = &lt;span style="color:#cd5555">&amp;#39;root&amp;#39;&lt;/span>
env.gateway = &lt;span style="color:#cd5555">&amp;#39;192.168.1.118&amp;#39;&lt;/span>
env.hosts = [&lt;span style="color:#cd5555">&amp;#39;10.10.2.6&amp;#39;&lt;/span>,&lt;span style="color:#cd5555">&amp;#39;10.10.2.7&amp;#39;&lt;/span>]
env.passwords = {
&lt;span style="color:#cd5555">&amp;#39;root@10.10.2.6:22&amp;#39;&lt;/span>:&lt;span style="color:#cd5555">&amp;#39;PASSWORD_2&amp;#39;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#39;root@10.10.2.7:22&amp;#39;&lt;/span>:&lt;span style="color:#cd5555">&amp;#39;PASSWORD_2&amp;#39;&lt;/span>,
&lt;span style="color:#cd5555">&amp;#39;root@192.168.1.118:22&amp;#39;&lt;/span>:&lt;span style="color:#cd5555">&amp;#39;PASSWORD_1&amp;#39;&lt;/span>
}
jump_server = &lt;span style="color:#cd5555">&amp;#39;jump_server&amp;#39;&lt;/span>
astra_server = &lt;span style="color:#cd5555">&amp;#39;astra_server&amp;#39;&lt;/span>
&lt;span style="color:#228b22"># 指定 role 角色组&lt;/span>
env.roledefs= {
jump_server: [&lt;span style="color:#cd5555">&amp;#39;192.168.1.118&amp;#39;&lt;/span>],
astra_server: [&lt;span style="color:#cd5555">&amp;#39;10.10.2.6&amp;#39;&lt;/span>,&lt;span style="color:#cd5555">&amp;#39;10.10.2.7&amp;#39;&lt;/span>]
}
&lt;span style="color:#228b22"># 测试&lt;/span>
&lt;span style="color:#707a7c">@task&lt;/span>
&lt;span style="color:#707a7c">@roles&lt;/span>(jump_server)
&lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> &lt;span style="color:#008b45">test&lt;/span>():
run(&lt;span style="color:#cd5555">&amp;#39;ls -la &amp;amp;&amp;amp; pwd&amp;#39;&lt;/span>)
&lt;span style="color:#228b22"># 登录私有仓库&lt;/span>
&lt;span style="color:#707a7c">@task&lt;/span>
&lt;span style="color:#707a7c">@roles&lt;/span>(astra_server)
&lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> &lt;span style="color:#008b45">docker_login&lt;/span>():
run(&lt;span style="color:#cd5555">&amp;#39;docker login -u USERNAME -p PASSWORD docker-registery.xxx.com&amp;#39;&lt;/span>)
&lt;span style="color:#228b22"># 测试&lt;/span>
&lt;span style="color:#707a7c">@task&lt;/span>
&lt;span style="color:#707a7c">@roles&lt;/span>(astra_server)
&lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> &lt;span style="color:#008b45">docker_ps&lt;/span>():
run(&lt;span style="color:#cd5555">&amp;#39;docker ps&amp;#39;&lt;/span>)
&lt;span style="color:#228b22"># 上传docker-compose&lt;/span>
&lt;span style="color:#707a7c">@task&lt;/span>
&lt;span style="color:#707a7c">@roles&lt;/span>(astra_server)
&lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> &lt;span style="color:#008b45">put_docker_compose&lt;/span>():
&lt;span style="color:#228b22"># 上传失败，照样往下执行 with settings(warn_only=True)&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">with&lt;/span> settings(warn_only=&lt;span style="color:#8b008b;font-weight:bold">True&lt;/span>):
result = put(&lt;span style="color:#cd5555">&amp;#39;deploy/prod/docker-compose.yml&amp;#39;&lt;/span>,&lt;span style="color:#cd5555">&amp;#39;~/docker-compose.yml&amp;#39;&lt;/span>)
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> result.failed:
abort(&lt;span style="color:#cd5555">&amp;#39;Aborting file put task!&amp;#39;&lt;/span>)
&lt;span style="color:#228b22"># 重新docker-compose部署&lt;/span>
&lt;span style="color:#707a7c">@task&lt;/span>
&lt;span style="color:#707a7c">@roles&lt;/span>(astra_server)
&lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> &lt;span style="color:#008b45">restart_docker_compose&lt;/span>():
run(&lt;span style="color:#cd5555">&amp;#39;docker-compose stop &amp;amp;&amp;amp; docker-compose up -d&amp;#39;&lt;/span>)
&lt;span style="color:#707a7c">@task&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">def&lt;/span> &lt;span style="color:#008b45">deploy&lt;/span>():
docker_login()
docker_ps()
put_docker_compose()
restart_docker_compose()
&lt;/code>&lt;/pre>&lt;/div>- https://pinkhello.me/posts/07-fabric%E4%BD%BF%E7%94%A8/ - PinkHello, All Rights Reserved</description></item><item><title>06 高性能队列Disruptor</title><link>https://pinkhello.me/posts/06-%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97disruptor/</link><pubDate>Mon, 15 Mar 2021 08:35:29 +0800</pubDate><guid>https://pinkhello.me/posts/06-%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97disruptor/</guid><description>PinkHello https://pinkhello.me/posts/06-%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97disruptor/ -&lt;h1 id="背景">背景&lt;/h1>
&lt;p>&lt;code>Disruptor&lt;/code> 是 外汇交易公司&lt;code>LMAX&lt;/code>开发的高性能队列、研发是为了解决内存队列延迟问题。
&lt;code>Disruptor&lt;/code> 一般用于线程间的消息传递。
&lt;a href="http://lmax-exchange.github.io/disruptor/">Disruptor GitHub 地址&lt;/a>&lt;/p>
&lt;h1 id="disruptor-介绍">&lt;code>Disruptor&lt;/code> 介绍&lt;/h1>
&lt;p>理解 &lt;code>Disruptor&lt;/code> 最好的方式，选择一个最接近熟悉的样本进行比较。在这个前提下，可以选择 &lt;code>Java&lt;/code> 中的 &lt;code>BlockingQueue&lt;/code>.
和队列相似，&lt;code>Disruptor&lt;/code> 也是在同一个进程中不同的线程之间进行传递数据的（例如消息或者事件），同时 &lt;code>Disruptor&lt;/code> 提供了一些将关键功能和队列分开的特性：&lt;/p>
&lt;ul>
&lt;li>向消费者发送多播事件&lt;/li>
&lt;li>消息者依赖关系图&lt;/li>
&lt;li>预先为事件分配内存&lt;/li>
&lt;li>可选的（无锁）&lt;/li>
&lt;/ul>
&lt;h1 id="disruptor-核心概念">&lt;code>Disruptor&lt;/code> 核心概念&lt;/h1>
&lt;p>在我们理解&lt;code>Disruptor&lt;/code>如何工作之前，了解下核心概念&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/LMAX-Exchange/disruptor/blob/master/src/main/java/com/lmax/disruptor/RingBuffer.java">Ring Buffer&lt;/a>
环形数组设计，为了避免垃圾回收，采用的数组结构，从3.0开始，环形缓冲区主要存储和更新在&lt;code>Disruptor&lt;/code>中移动的数据（事件）&lt;/li>
&lt;li>&lt;a href="https://github.com/LMAX-Exchange/disruptor/blob/master/src/main/java/com/lmax/disruptor/Sequence.java">Sequence&lt;/a>
&lt;code>Disruptor&lt;/code> 每个消费者(&lt;code>EventProcessor&lt;/code>)维护一个 &lt;code>Sequence&lt;/code>，并发的大多数代码都依赖 &lt;code>Sequence&lt;/code> 值的改动，所以 &lt;code>Sequence&lt;/code> 支持 &lt;code>AtomicLong&lt;/code> 的大部分也行, 唯一不同的是 &lt;code>Sequence&lt;/code> 包含额外的功能来阻止&lt;code>Sequence&lt;/code>和其他值之间的伪共享(&lt;code>false sharing&lt;/code>)&lt;/li>
&lt;li>&lt;a href="https://github.com/LMAX-Exchange/disruptor/blob/master/src/main/java/com/lmax/disruptor/Sequencer.java">Sequencer&lt;/a>&lt;br>
&lt;code>Disruptor&lt;/code> 核心逻辑, 两个实现: 单生产者和多生产者。他们实现了生产者与消费者之间的快速传递的并发算法。&lt;/li>
&lt;li>&lt;a href="https://github.com/LMAX-Exchange/disruptor/blob/master/src/main/java/com/lmax/disruptor/SequenceBarrier.java">Sequence Barrier&lt;/a>
由 &lt;code>Sequencer&lt;/code> 生成，包含此 &lt;code>Sequencer&lt;/code> 发布的 &lt;code>Sequence&lt;/code> 指针以及依赖的其他消费者的 &lt;code>Sequence&lt;/code>。包含了消费者检查是否有可用的事件的代码。&lt;/li>
&lt;li>&lt;a href="https://github.com/LMAX-Exchange/disruptor/blob/master/src/main/java/com/lmax/disruptor/WaitStrategy.java">Wait Strategy&lt;/a>
消费者等待事件的策略，这个事件由生产者放入，决定了消费者怎么等待生产者将事件放入 &lt;code>Disruptor&lt;/code>&lt;/li>
&lt;li>Event 生产者与消费者传递的事件，完全由用户定义&lt;/li>
&lt;li>&lt;a href="https://github.com/LMAX-Exchange/disruptor/blob/master/src/main/java/com/lmax/disruptor/EventProcessor.java">EventProcessor&lt;/a>
处理事件的主要循环（&lt;code>main event loop&lt;/code>），包含了一个 &lt;code>Sequeuece&lt;/code>. 有一个具体的实现类 &lt;code>BatchEventProcessor&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/LMAX-Exchange/disruptor/blob/master/src/main/java/com/lmax/disruptor/EventHandler.java">EventHandler&lt;/a>
用户实现的接口，代表一个消费者。处理事件。&lt;/li>
&lt;li>Producer 生产者、先获得占位，然后提交事件。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://pinkhello.me/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97-Disruptor/Disruptor%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%E5%9B%BE.jpg" alt="Disruptor设计组件图">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事件广播(&lt;code>Multicast Events&lt;/code>)&lt;/p>
&lt;p>事件广播是 &lt;code>Disruptor&lt;/code> 与 &lt;code>Queue&lt;/code> 最大的区别，当你有多个消费者监听一个 &lt;code>Disruptor&lt;/code>, 所有的事件将会发布到这个所有的消费者。
&lt;code>Disruptor&lt;/code> 这一特性被用来需要对同一数据进行多个并行操作的情况。
如在LMAX系统中有三个操作可以同时进行：日志（将数据持久到日志文件中），复制（将数据发送到其他的机器上，以确保存在数据远程副本），业务逻辑处理。
也可以使用&lt;code>WokrerPool&lt;/code>来并行处理不同的事件。&lt;/p>
&lt;p>如上图。可以看到有3个事件处理程序正在侦听&lt;code>Disrupto&lt;/code>r（&lt;code>JournalConsumer&lt;/code>，&lt;code>ReplicationConsumer&lt;/code> 和 &lt;code>ApplicationConsumer&lt;/code>），
这些事件处理程序中的每个将接收&lt;code>Disruptor&lt;/code>中所有可用的消息（按相同顺序）。这允许这些消费者中的每一个并行工作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>消费者依赖关系图(&lt;code>Consumer Dependency Graph&lt;/code>)&lt;/p>
&lt;p>为了支持实现业务并行处理流程，&lt;code>Disruptor&lt;/code> 提供了多个消费者之间的协作功能。回到上面的例子中，我们可以将 &lt;code>journalling&lt;/code> 和 &lt;code>replication&lt;/code> 消费完成他们的业务，后再继续执行业务逻辑流程。
我们称呼这个功能为 &lt;code>gating&lt;/code> , &lt;code>gating&lt;/code> 发生在两种场景下:&lt;/p>
&lt;ul>
&lt;li>确保 &lt;code>Producer&lt;/code> 不能运行超过 &lt;code>Consumer&lt;/code> ，可以通多调用 &lt;code>RingBuffer.addGatingConsumers()&lt;/code> 来增加相关的消费者来完成&lt;/li>
&lt;li>之前所说的场景，通过必须先完成的&lt;code>Consumer&lt;/code> 的 &lt;code>Sequence&lt;/code>的&lt;code>SequenceBarrier&lt;/code>来实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>事件预分配(&lt;code>Event Preallocation&lt;/code>)&lt;/p>
&lt;p>&lt;code>Disruptor&lt;/code> 的一个目标就是在低延时环境下，减少或异常内存的占用。（在JAVA环境下，需要较少GC停顿的次数）（C/C++环境下，大量的内存分配也是一个问题）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可选择的无锁(&lt;code>Optionally Lock-free&lt;/code>)&lt;/p>
&lt;p>无锁的 &lt;code>Disruptor&lt;/code> 的低延迟的无锁的特性实现细节是都是基于 内存屏障 和 CAS 操作实现的，只有一个场景 &lt;code>BlockingWaitStrategy&lt;/code> 中使用的 &lt;code>Lock&lt;/code>
是为了使用 &lt;code>Lock&lt;/code> 里面的 &lt;code>Condition&lt;/code>, 方便消费者线程被 &lt;code>Park&lt;/code> 时候等待新的事件来触发。许多低延迟系统使用自旋（&lt;code>busy-wait&lt;/code>）来避免使用 &lt;code>Condition&lt;/code>造成的抖动
然而，太多的 &lt;code>busy-wait&lt;/code> 会导致性能下降，特别在CPU资源受限的情况下。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="disruptor-几个核心的设计">&lt;code>Disruptor&lt;/code> 几个核心的设计&lt;/h1>
&lt;h2 id="sequence-设计">&lt;code>Sequence&lt;/code> 设计&lt;/h2>
&lt;p>&lt;img src="https://pinkhello.me/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97-Disruptor/Sequence.jpg" alt="Sequence 设计">&lt;/p>
&lt;p>Sequence 真正计数是 &lt;code>value&lt;/code> 采用缓冲行防止 &lt;code>false sharing&lt;/code>。在&lt;code>value&lt;/code>的前后有7个 &lt;code>long&lt;/code> 型的填充值，做&lt;code>CPU cache line&lt;/code>填充防止伪共享。&lt;/p>
&lt;h2 id="ringbuffer-设计">&lt;code>RingBuffer&lt;/code> 设计&lt;/h2>
&lt;p>&lt;img src="https://pinkhello.me/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97-Disruptor/RingBuffer.jpg" alt="RingBuffer 设计">&lt;/p>
&lt;p>&lt;code>RingBuffer&lt;/code> 是一个环（首尾相接），可以用作不同的上下文（线程）间传递数据的 &lt;code>Buffer&lt;/code>环形设计，每个元素都有个坐标，取得元素通过取mod操作。
是数组设计、非链表。&lt;/p>
&lt;p>一般是&lt;code>2^N&lt;/code>次方，这样 sequence &amp;amp; (array length - 1 ) = array index。哈希Map也是这种位运算做的。&lt;/p>
&lt;p>&lt;code>RingBuffer&lt;/code> 特点&lt;/p>
&lt;ul>
&lt;li>数组实现、快速访问&lt;/li>
&lt;li>元素是覆盖式的，不主动清除&lt;/li>
&lt;li>神奇的缓存行（缓存是由缓存行组成的，通常64个字节、一个JAVA long 类型 8 字节）&lt;/li>
&lt;/ul>
&lt;h2 id="消费者依赖设计">消费者依赖设计&lt;/h2>
&lt;h2 id="缓存内存加载过程">缓存内存加载过程&lt;/h2>
&lt;p>&lt;img src="https://pinkhello.me/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97-Disruptor/cache-line-1.jpg" alt="缓存加载过程">
&lt;img src="https://pinkhello.me/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97-Disruptor/cache-line-2.jpg" alt="缓存加载过程">
&lt;img src="https://pinkhello.me/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97-Disruptor/cache-line-3.jpg" alt="缓存加载过程">&lt;/p>
&lt;p>&lt;a href="https://github.com/LMAX-Exchange/disruptor/blob/master/src/main/java/com/lmax/disruptor/RingBuffer.java">神奇的解决方式&amp;mdash;&amp;ndash; 缓存行填充&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">long&lt;/span> p1, p2, p3, p4, p5, p6, p7; &lt;span style="color:#228b22">// cache line padding
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">volatile&lt;/span> &lt;span style="color:#00688b;font-weight:bold">long&lt;/span> cursor = INITIAL_CURSOR_VALUE;
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">long&lt;/span> p8, p9, p10, p11, p12, p13, p14; &lt;span style="color:#228b22">// cache line padding
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="disruptor-使用demo">&lt;code>Disruptor&lt;/code> 使用Demo&lt;/h1>
&lt;p>&lt;code>TransactionOrder&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">TransactionOrder&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> String id;
&lt;span style="color:#8b008b;font-weight:bold">private&lt;/span> &lt;span style="color:#00688b;font-weight:bold">double&lt;/span> price;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>TransactionHandler&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">TransactionHandler&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">implements&lt;/span> EventHandler&amp;lt;TransactionOrder&amp;gt;, WorkHandler&amp;lt;TransactionOrder&amp;gt; {
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">onEvent&lt;/span>(TransactionOrder transactionOrder, &lt;span style="color:#00688b;font-weight:bold">long&lt;/span> sequence, &lt;span style="color:#00688b;font-weight:bold">boolean&lt;/span> endOfBatch) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> Exception {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.&lt;span style="color:#658b00">onEvent&lt;/span>(transactionOrder);
}
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">onEvent&lt;/span>(TransactionOrder transactionOrder) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> Exception {
&lt;span style="color:#228b22">//具体的消费逻辑
&lt;/span>&lt;span style="color:#228b22">&lt;/span> transactionOrder.&lt;span style="color:#658b00">setId&lt;/span>(UUID.&lt;span style="color:#658b00">randomUUID&lt;/span>().&lt;span style="color:#658b00">toString&lt;/span>());
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Demo1&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">Demo1&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">main&lt;/span>(String[] args) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> ExecutionException, InterruptedException {
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> BUFFER_SIZE = 1024;
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> THREAD_NUM = 4;
&lt;span style="color:#228b22">//createSingleProducer 创建单生产者的 RingBuffer
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">final&lt;/span> RingBuffer&amp;lt;TransactionOrder&amp;gt; ringBuffer =
RingBuffer.&lt;span style="color:#658b00">createSingleProducer&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> EventFactory&amp;lt;TransactionOrder&amp;gt;() {
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> TransactionOrder &lt;span style="color:#008b45">newInstance&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> TransactionOrder();
}
}, BUFFER_SIZE, &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> YieldingWaitStrategy());
&lt;span style="color:#228b22">//创建线程池
&lt;/span>&lt;span style="color:#228b22">&lt;/span> ExecutorService service = Executors.&lt;span style="color:#658b00">newFixedThreadPool&lt;/span>(THREAD_NUM);
&lt;span style="color:#228b22">//创建 SequenceBarrier
&lt;/span>&lt;span style="color:#228b22">&lt;/span> SequenceBarrier sequenceBarrier = ringBuffer.&lt;span style="color:#658b00">newBarrier&lt;/span>();
&lt;span style="color:#228b22">//创建消息处理器
&lt;/span>&lt;span style="color:#228b22">&lt;/span> BatchEventProcessor&amp;lt;TransactionOrder&amp;gt; eventProcessor =
&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> BatchEventProcessor&amp;lt;TransactionOrder&amp;gt;(ringBuffer, sequenceBarrier, &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> TransactionHandler());
&lt;span style="color:#228b22">//这一部分是让 RingBuffer根据消费者状态进行gating, 只有一个消费者的话可以省略
&lt;/span>&lt;span style="color:#228b22">&lt;/span> ringBuffer.&lt;span style="color:#658b00">addGatingSequences&lt;/span>(eventProcessor.&lt;span style="color:#658b00">getSequence&lt;/span>());
&lt;span style="color:#228b22">//把消息处理器提交到线程池
&lt;/span>&lt;span style="color:#228b22">&lt;/span> service.&lt;span style="color:#658b00">submit&lt;/span>(eventProcessor);
Future&amp;lt;?&amp;gt; future = service.&lt;span style="color:#658b00">submit&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Callable&amp;lt;Void&amp;gt;() {
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> Void &lt;span style="color:#008b45">call&lt;/span>() &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> Exception {
&lt;span style="color:#00688b;font-weight:bold">long&lt;/span> seq;
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> i = 0; i&amp;lt;10000; i++) {
seq = ringBuffer.&lt;span style="color:#658b00">next&lt;/span>(); &lt;span style="color:#228b22">//ringbuffer 的一个可用区块
&lt;/span>&lt;span style="color:#228b22">&lt;/span> ringBuffer.&lt;span style="color:#658b00">get&lt;/span>(seq).&lt;span style="color:#658b00">setPrice&lt;/span>(Math.&lt;span style="color:#658b00">random&lt;/span>() *9999); &lt;span style="color:#228b22">// 给这个区块放入数据
&lt;/span>&lt;span style="color:#228b22">&lt;/span> ringBuffer.&lt;span style="color:#658b00">publish&lt;/span>(seq); &lt;span style="color:#228b22">//发布数据使得 consumer 可以获取该数据
&lt;/span>&lt;span style="color:#228b22">&lt;/span> }
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
}
});
future.&lt;span style="color:#658b00">get&lt;/span>(); &lt;span style="color:#228b22">//等待生产者结束
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
eventProcessor.&lt;span style="color:#658b00">halt&lt;/span>(); &lt;span style="color:#228b22">//通知事件
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
service.&lt;span style="color:#658b00">shutdown&lt;/span>(); &lt;span style="color:#228b22">//终止线程
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Demo2&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">Demo2&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">main&lt;/span>(String[] args) {
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> BUFFER_SIZE = 1024;
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> THREAD_NUM = 4;
EventFactory&amp;lt;TransactionOrder&amp;gt; eventFactory = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> EventFactory&amp;lt;TransactionOrder&amp;gt;() {
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> TransactionOrder &lt;span style="color:#008b45">newInstance&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> TransactionOrder();
}
};
RingBuffer&amp;lt;TransactionOrder&amp;gt; ringBuffer = RingBuffer.&lt;span style="color:#658b00">createSingleProducer&lt;/span>(eventFactory, BUFFER_SIZE);
SequenceBarrier sequenceBarrier = ringBuffer.&lt;span style="color:#658b00">newBarrier&lt;/span>();
ExecutorService service = Executors.&lt;span style="color:#658b00">newFixedThreadPool&lt;/span>(THREAD_NUM);
WorkHandler&amp;lt;TransactionOrder&amp;gt; workHandler = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> TransactionHandler();
WorkerPool&amp;lt;TransactionOrder&amp;gt; workerPool =
&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> WorkerPool&amp;lt;TransactionOrder&amp;gt;(ringBuffer, sequenceBarrier, &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> IgnoreExceptionHandler(),
workHandler);
&lt;span style="color:#228b22">//序列协调者
&lt;/span>&lt;span style="color:#228b22">&lt;/span> ringBuffer.&lt;span style="color:#658b00">addGatingSequences&lt;/span>(workerPool.&lt;span style="color:#658b00">getWorkerSequences&lt;/span>());
workerPool.&lt;span style="color:#658b00">start&lt;/span>(service);
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> i=0; i&amp;lt;8; i++) {
&lt;span style="color:#00688b;font-weight:bold">long&lt;/span> seq = ringBuffer.&lt;span style="color:#658b00">next&lt;/span>();
ringBuffer.&lt;span style="color:#658b00">get&lt;/span>(seq).&lt;span style="color:#658b00">setPrice&lt;/span>(Math.&lt;span style="color:#658b00">random&lt;/span>() * 9999);
ringBuffer.&lt;span style="color:#658b00">publish&lt;/span>(seq);
}
workerPool.&lt;span style="color:#658b00">halt&lt;/span>();
service.&lt;span style="color:#658b00">shutdown&lt;/span>();
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Demo3&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">class&lt;/span> &lt;span style="color:#008b45;font-weight:bold">Demo3&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">static&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">main&lt;/span>(String[] args) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> InterruptedException {
&lt;span style="color:#00688b;font-weight:bold">long&lt;/span> start = System.&lt;span style="color:#658b00">currentTimeMillis&lt;/span>();
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> BUFFER_SIZE = 1024;
&lt;span style="color:#00688b;font-weight:bold">int&lt;/span> THREAD_NUM = 4;
ExecutorService service = Executors.&lt;span style="color:#658b00">newFixedThreadPool&lt;/span>(THREAD_NUM);
Disruptor&amp;lt;TransactionOrder&amp;gt; disruptor = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Disruptor&amp;lt;TransactionOrder&amp;gt;(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> EventFactory&amp;lt;TransactionOrder&amp;gt;() {
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> TransactionOrder &lt;span style="color:#008b45">newInstance&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> TransactionOrder();
}
}, BUFFER_SIZE, service, ProducerType.&lt;span style="color:#658b00">SINGLE&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> BusySpinWaitStrategy());
&lt;span style="color:#228b22">/**
&lt;/span>&lt;span style="color:#228b22"> * 菱形操作
&lt;/span>&lt;span style="color:#228b22"> */&lt;/span>
&lt;span style="color:#228b22">//使用 disruptor 创建消费组 C1 与 C2
&lt;/span>&lt;span style="color:#228b22">&lt;/span> EventHandlerGroup&amp;lt;TransactionOrder&amp;gt; eventHandlerGroup =
disruptor.&lt;span style="color:#658b00">handleEventsWith&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> TransactionHandler(), &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> TransactionVasConsumer());
&lt;span style="color:#228b22">//C3
&lt;/span>&lt;span style="color:#228b22">&lt;/span> TransactionJmsNotifyHandler jmsNotifyHandler = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> TransactionJmsNotifyHandler();
&lt;span style="color:#228b22">//声明在 C1 和 C2 完事后 执行 JMS消息发送操作（C3）
&lt;/span>&lt;span style="color:#228b22">&lt;/span> eventHandlerGroup.&lt;span style="color:#658b00">then&lt;/span>(jmsNotifyHandler);
&lt;span style="color:#228b22">/**
&lt;/span>&lt;span style="color:#228b22"> * 顺序执行
&lt;/span>&lt;span style="color:#228b22"> */&lt;/span>
&lt;span style="color:#228b22">// disruptor.handleEventsWith(new TransactionHandler())
&lt;/span>&lt;span style="color:#228b22">// .then(new TransactionVasConsumer())
&lt;/span>&lt;span style="color:#228b22">// .then(new TransactionJmsNotifyHandler());
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#228b22">/**
&lt;/span>&lt;span style="color:#228b22"> * 六边形操作
&lt;/span>&lt;span style="color:#228b22"> */&lt;/span>
&lt;span style="color:#228b22">// TransactionHandler h1 = new TransactionHandler();
&lt;/span>&lt;span style="color:#228b22">// TransactionHandler h2 = new TransactionHandler();
&lt;/span>&lt;span style="color:#228b22">// TransactionHandler h3 = new TransactionHandler();
&lt;/span>&lt;span style="color:#228b22">// TransactionHandler h4 = new TransactionHandler();
&lt;/span>&lt;span style="color:#228b22">// TransactionHandler h5 = new TransactionHandler();
&lt;/span>&lt;span style="color:#228b22">// TransactionHandler h6 = new TransactionHandler();
&lt;/span>&lt;span style="color:#228b22">// disruptor.handleEventsWith(h1, h2);
&lt;/span>&lt;span style="color:#228b22">// disruptor.after(h1).handleEventsWith(h4);
&lt;/span>&lt;span style="color:#228b22">// disruptor.after(h2).handleEventsWith(h5);
&lt;/span>&lt;span style="color:#228b22">// disruptor.after(h4, h5).handleEventsWith(h3);
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
&lt;span style="color:#228b22">//启动
&lt;/span>&lt;span style="color:#228b22">&lt;/span> disruptor.&lt;span style="color:#658b00">start&lt;/span>();
CountDownLatch latch = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> CountDownLatch(1);
&lt;span style="color:#228b22">//生产者准备
&lt;/span>&lt;span style="color:#228b22">&lt;/span> service.&lt;span style="color:#658b00">submit&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> TransactionPubllisher(disruptor, latch));
latch.&lt;span style="color:#658b00">await&lt;/span>(); &lt;span style="color:#228b22">//等待生产者完事
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
disruptor.&lt;span style="color:#658b00">shutdown&lt;/span>();
service.&lt;span style="color:#658b00">shutdown&lt;/span>();
System.&lt;span style="color:#658b00">out&lt;/span>.&lt;span style="color:#658b00">println&lt;/span>(&lt;span style="color:#cd5555">&amp;#34;总耗时:&amp;#34;&lt;/span>+ (System.&lt;span style="color:#658b00">currentTimeMillis&lt;/span>() - start));
}
}
&lt;/code>&lt;/pre>&lt;/div>- https://pinkhello.me/posts/06-%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97disruptor/ - PinkHello, All Rights Reserved</description></item><item><title>16 Hexo迁移Hugo</title><link>https://pinkhello.me/posts/16-hexo%E8%BF%81%E7%A7%BBhugo/</link><pubDate>Wed, 10 Feb 2021 19:36:33 +0800</pubDate><guid>https://pinkhello.me/posts/16-hexo%E8%BF%81%E7%A7%BBhugo/</guid><description>PinkHello https://pinkhello.me/posts/16-hexo%E8%BF%81%E7%A7%BBhugo/ -&lt;h1 id="为什么迁移-hugo">为什么迁移 &lt;code>Hugo&lt;/code>&lt;/h1>
&lt;ul>
&lt;li>&lt;code>Hugo&lt;/code> 使用比 &lt;code>Hexo&lt;/code> 简单, 只有单独的一个二进制文件&lt;/li>
&lt;li>苦于 &lt;code>Hexo&lt;/code> 的 &lt;code>NodeModule&lt;/code> 管理&lt;/li>
&lt;li>迁移成本更低, 结合 &lt;code>Github Action&lt;/code> 实现 &lt;code>Markdown&lt;/code> 文章发布, 自动更新至静态站&lt;/li>
&lt;li>规划：加入自定义域名以及做静态资源CDN做的加速&lt;/li>
&lt;/ul>
&lt;h1 id="前置工作">前置工作&lt;/h1>
&lt;p>1、 之前基本所有的博客都托管与 &lt;code>github&lt;/code>,这次也不例外, 复用 &lt;code>https://pinkhello.github.io&lt;/code>,创建两个项目&lt;/p>
&lt;ul>
&lt;li>pinkhello.github.io template 仓库&lt;/li>
&lt;li>pinkhello.github.io.source private 仓库&lt;/li>
&lt;/ul>
&lt;p>2、准备OpenSSH私钥和公钥&lt;/p>
&lt;ul>
&lt;li>pinkhello.github.io 仓库 添加 settings -&amp;gt; Deploy keys -&amp;gt; Add Deploy Key (将公钥添加进去、注意允许 Write)&lt;/li>
&lt;li>pinkhello.github.io.source 仓库 添加 settings -&amp;gt; Actions secrets -&amp;gt; New Repository Secret ( NAME : ACTION_DEPLOY_KEY, Value: 私钥 )&lt;/li>
&lt;/ul>
&lt;p>3、git clone pinkhello.github.io.source 仓库&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git clone git@github.com:PinkHello/pinkhello.github.io.source.git
&lt;span style="color:#658b00">cd&lt;/span> pinkhello.github.io.source
&lt;span style="color:#228b22"># 初始化站点【--force 强制初始化】&lt;/span>
hugo new site . --force
&lt;span style="color:#228b22"># content site &lt;/span>
&lt;span style="color:#228b22"># data json数据 or 其他&lt;/span>
&lt;span style="color:#228b22"># static 静态文件&lt;/span>
&lt;span style="color:#228b22"># themes 主题&lt;/span>
&lt;span style="color:#228b22"># 后面可以执行 hugo new posts/XXX.md 创建新的文章&lt;/span>
hugo new posts/XXX.md
&lt;span style="color:#228b22"># 具体参考 https://gohugo.io/getting-started/ 进行操作&lt;/span>
......
&lt;span style="color:#228b22"># 选择一个主题 https://themes.gohugo.io/ 可以选择&lt;/span>
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
&lt;span style="color:#228b22"># 后面的参照各个主题设置咯&lt;/span>
....
&lt;span style="color:#228b22"># 本地测试&lt;/span>
hugo serve
&lt;span style="color:#228b22"># 生成最小的静态文件, 会生成 public 文件&lt;/span>
hugo --minify
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="迁移-hexo-博客进入-hugo">迁移 &lt;code>hexo&lt;/code> 博客进入 &lt;code>hugo&lt;/code>&lt;/h1>
&lt;p>&amp;hellip;&amp;hellip;(可以手动、可以工具进行)&lt;/p>
&lt;h1 id="整合-github-action">整合 &lt;code>Github Action&lt;/code>&lt;/h1>
&lt;p>新建 &lt;code>Github Action&lt;/code> 描述文件 &lt;code>.github/workflows/deploy.yml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#228b22"># This is a basic workflow to help you get started with Actions&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Deploy on Main Branch&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#228b22"># Controls when the action will run. &lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">on&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># Triggers the workflow on push or pull request events but only for the main branch&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">push&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">branches&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>[&lt;span style="color:#bbb"> &lt;/span>main ]&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">pull_request&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">branches&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>[&lt;span style="color:#bbb"> &lt;/span>main ]&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#228b22"># schedule:&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#228b22"># - cron: &amp;#39;0 21 * * *&amp;#39; # 定时任务&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># Allows you to run this workflow manually from the Actions tab&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">workflow_dispatch&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#228b22"># A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">jobs&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># This workflow contains a single job called &amp;#34;build&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">build&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># The type of runner that the job will run on&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">runs-on&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>ubuntu-latest&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># Steps represent a sequence of tasks that will be executed as part of the job&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">steps&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">uses&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>actions/checkout@v2&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Setup Hugo&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">uses&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>peaceiris/actions-hugo@v2&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># https://github.com/peaceiris/actions-hugo&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">with&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">hugo-version&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#39;latest&amp;#39;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">extended&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Build&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># 注意强制更新 git submodule 下载，否则生成的主题没有 html 文件哦&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">run&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>|&lt;span style="color:#cd5555">
&lt;/span>&lt;span style="color:#cd5555"> git submodule update --init --recursive
&lt;/span>&lt;span style="color:#cd5555"> hugo --minify --debug&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Deploy&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">uses&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>peaceiris/actions-gh-pages@v3&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># https://github.com/peaceiris/actions-gh-pages&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">with&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">deploy_key&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>${{ secrets.ACTION_DEPLOY_KEY }}&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># 这里的 ACTION_DEPLOY_KEY 则是上面设置 Private Key的变量名&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">external_repository&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>PinkHello/PinkHello.github.io&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># Pages 远程仓库 &lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">publish_dir&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>./public&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">keep_files&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># remove existing files&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">publish_branch&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>master &lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># deploying branch&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">commit_message&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>${{ github.event.head_commit.message }}&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>so 完美
&lt;img src="https://pinkhello.me/hexo%E8%BF%81%E7%A7%BB%E8%87%B3hugo/github_action_in_process_0.jpg" alt="迁移Hexo">
&lt;img src="https://pinkhello.me/hexo%E8%BF%81%E7%A7%BB%E8%87%B3hugo/github_action_in_process.jpg" alt="迁移Hexo">&lt;/p>
- https://pinkhello.me/posts/16-hexo%E8%BF%81%E7%A7%BBhugo/ - PinkHello, All Rights Reserved</description></item><item><title>15 记一次docker日志磁盘告警问题</title><link>https://pinkhello.me/posts/15-%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E6%97%A5%E5%BF%97%E7%A3%81%E7%9B%98%E5%91%8A%E8%AD%A6%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 10 Feb 2021 10:05:29 +0800</pubDate><guid>https://pinkhello.me/posts/15-%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E6%97%A5%E5%BF%97%E7%A3%81%E7%9B%98%E5%91%8A%E8%AD%A6%E9%97%AE%E9%A2%98/</guid><description>PinkHello https://pinkhello.me/posts/15-%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E6%97%A5%E5%BF%97%E7%A3%81%E7%9B%98%E5%91%8A%E8%AD%A6%E9%97%AE%E9%A2%98/ -&lt;h1 id="前景">前景&lt;/h1>
&lt;p>今日，我正在开开心心的刷着JFX的Coding中，突然线上报警群中爆了个炸弹，EC2磁盘超过80%。&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/%E8%B5%84%E6%BA%90%E4%B8%8D%E8%B6%B3%E6%8A%A5%E8%AD%A6.png" alt="资源不足预警">&lt;/p>
&lt;h1 id="处理过程">处理过程&lt;/h1>
&lt;p>解决问题姿势就位：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>赶紧开机 ==》 ❤️中万匹🦙奔腾而过 ❤️中MMP&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默默的通过跳板机进入目标机器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不管三七二十一,执行查看磁盘占用大小，我的乖乖，占用确实超过了87%了，一下子暴涨的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># 查看磁盘占用大小&lt;/span>
&amp;gt; sudo df -h
&lt;span style="color:#228b22"># 查看当前目录总量&lt;/span>
&amp;gt; sudo du -sh
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>开始定位具体哪个文件或者目录占用这么大,跑到根目录下。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># 查看当前目录下一级子文件和子目录占用的磁盘容量&lt;/span>
&amp;gt; sudo du -lh --max-depth=&lt;span style="color:#b452cd">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>一开始猜想可能是docker容器的日志占用大，上面执行后，还真 TM 是&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">/var/lib/docker/containers 目录占用 42G
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>开始查看是哪个容器占用的这么大的空间&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># 查看 containers 日志目录排序&lt;/span>
&amp;gt; sudo du -d1 -h /var/lib/docker/containers | sort -h
&lt;span style="color:#228b22"># 查看具体的哪个日志文件大&lt;/span>
&amp;gt; sudo find /var/lib/docker/containers -name *.log
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然这个配图是我清理之后的
&lt;img src="https://pinkhello.me/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/docker%E5%AE%B9%E5%99%A8%E6%96%87%E4%BB%B6%E6%8E%92%E5%BA%8F.png" alt="docker容器文件排序">
&lt;img src="https://pinkhello.me/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/%E6%9F%A5%E6%89%BEdocker%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6.png" alt="查找docker容器日志文件">&lt;/p>
&lt;ul>
&lt;li>定位到最大的文件，一顿操作&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> &lt;span style="color:#228b22"># 清空比较大的日志文件&lt;/span>
&amp;gt; sudo sh -c &lt;span style="color:#cd5555">&amp;#34;cat /dev/null &amp;gt; &lt;/span>&lt;span style="color:#cd5555">${&lt;/span>&lt;span style="color:#00688b">log_file&lt;/span>&lt;span style="color:#cd5555">}&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pinkhello.me/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/%E6%B8%85%E7%90%86docker%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97%E5%90%8E.png" alt="清理docker容器日志后">&lt;/p>
&lt;h1 id="思考">思考&lt;/h1>
&lt;ul>
&lt;li>上面的方式是一种方式解决【临时】
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> &lt;span style="color:#228b22"># 查看 docker 的 Logging Driver&lt;/span>
&amp;gt; docker info | grep &lt;span style="color:#cd5555">&amp;#39;Logging Driver&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如何彻底解决这个问题：&lt;/p>
&lt;ul>
&lt;li>写个&lt;code>shell脚本&lt;/code> 使用 &lt;code>crontab&lt;/code> 定期执行清理
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> &lt;span style="color:#228b22">#!/bin/sh&lt;/span>
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;======== start clean docker containers logs ========&amp;#34;&lt;/span>
&lt;span style="color:#00688b">logs&lt;/span>=&lt;span style="color:#8b008b;font-weight:bold">$(&lt;/span>find /var/lib/docker/containers/ -name *-json.log&lt;span style="color:#8b008b;font-weight:bold">)&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> log in &lt;span style="color:#00688b">$logs&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">do&lt;/span>
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;clean logs : &lt;/span>&lt;span style="color:#00688b">$log&lt;/span>&lt;span style="color:#cd5555">&amp;#34;&lt;/span>
cat /dev/null &amp;gt; &lt;span style="color:#00688b">$log&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">done&lt;/span>
&lt;span style="color:#658b00">echo&lt;/span> &lt;span style="color:#cd5555">&amp;#34;======== end clean docker containers logs ========&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>假如是&lt;code>docker run&lt;/code>创建容器的,指定 &lt;code>--log-opt max-size=${MAX_SIZE}m --log-opt max-file=${NUMBER}&lt;/code>&lt;/li>
&lt;li>&lt;code>docker-compose&lt;/code> 方式更高&lt;code>docker-compose.yaml&lt;/code>文件
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">logging&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">driver&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;json-file&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">options&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">max-size&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;${MAX_SIZE}m&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">max-file&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>${NUMBER}&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;code>docker&lt;/code> 全局修改 &lt;code>/etc/docker/daemon.json&lt;/code>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json"> {
&lt;span style="color:#8b008b;font-weight:bold">&amp;#34;log-driver&amp;#34;&lt;/span>: &lt;span style="color:#cd5555">&amp;#34;json-file&amp;#34;&lt;/span>,
&lt;span style="color:#8b008b;font-weight:bold">&amp;#34;log-opts&amp;#34;&lt;/span>: {
&lt;span style="color:#8b008b;font-weight:bold">&amp;#34;max-size&amp;#34;&lt;/span>: &lt;span style="color:#cd5555">&amp;#34;${MAX_SIZE}m&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> &amp;gt; systemctl daemon-reload
&amp;gt; systemctl restart docker
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>为什么会瞬间💥式的增长 ???&lt;/li>
&lt;/ul>
- https://pinkhello.me/posts/15-%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E6%97%A5%E5%BF%97%E7%A3%81%E7%9B%98%E5%91%8A%E8%AD%A6%E9%97%AE%E9%A2%98/ - PinkHello, All Rights Reserved</description></item><item><title>05 OAuth2.0 那点事</title><link>https://pinkhello.me/posts/05-oauth2.0%E9%82%A3%E7%82%B9%E4%BA%8B/</link><pubDate>Wed, 10 Feb 2021 08:32:02 +0800</pubDate><guid>https://pinkhello.me/posts/05-oauth2.0%E9%82%A3%E7%82%B9%E4%BA%8B/</guid><description>PinkHello https://pinkhello.me/posts/05-oauth2.0%E9%82%A3%E7%82%B9%E4%BA%8B/ -&lt;h2 id="oauth20-是什么">&lt;code>OAuth2.0&lt;/code> 是什么?&lt;/h2>
&lt;p>&lt;code>OAuth2.0&lt;/code> Framework RFC 6749 [https://tools.ietf.org/html/rfc6749]&lt;/p>
&lt;p>&lt;code>OAuth&lt;/code> 就是一种授权机制，它介于客户端与资源所有者的授权层，为了分离不同的角色。
在资源所有者同意并向客户端颁发令牌后，客户端携带令牌可以访问部分或全部资源。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->OAuth2.0&lt;!-- raw HTML omitted --> 是&lt;!-- raw HTML omitted -->OAuth&lt;!-- raw HTML omitted --> 协议的一个版本，为&lt;!-- raw HTML omitted -->2.0&lt;!-- raw HTML omitted -->版本。有意思的是 &lt;!-- raw HTML omitted -->2.0&lt;!-- raw HTML omitted --> 与 &lt;!-- raw HTML omitted -->1.0&lt;!-- raw HTML omitted --> 并不兼容。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="oauth20-授权方式">&lt;code>OAuth2.0&lt;/code> 授权方式&lt;/h2>
&lt;p>获取授权的过程&lt;/p>
&lt;ul>
&lt;li>授权码(&lt;!-- raw HTML omitted -->authorization-code&lt;!-- raw HTML omitted -->)&lt;/li>
&lt;li>隐藏式(&lt;!-- raw HTML omitted -->implicit&lt;!-- raw HTML omitted -->)&lt;/li>
&lt;li>密码(&lt;!-- raw HTML omitted -->password&lt;!-- raw HTML omitted -->)&lt;/li>
&lt;li>客户端凭证(&lt;!-- raw HTML omitted -->client credentials&lt;!-- raw HTML omitted -->)&lt;/li>
&lt;/ul>
&lt;p>不管哪种方式，都需要在第三方应用申请令牌之前，需要在系统中申请身份唯一标识: 客户端ID &lt;!-- raw HTML omitted -->Client ID&lt;!-- raw HTML omitted --> 和 客户端秘钥 &lt;!-- raw HTML omitted -->Client Secret&lt;!-- raw HTML omitted -->.
这样能确保Token不被恶意使用。&lt;/p>
&lt;p>授权重要的参数和指标:&lt;/p>
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->response_type&lt;!-- raw HTML omitted --> 响应类型: &lt;!-- raw HTML omitted -->code&lt;!-- raw HTML omitted -->(要求返回授权码),&lt;!-- raw HTML omitted -->token&lt;!-- raw HTML omitted -->(要求返回授权Token)&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->client_id&lt;!-- raw HTML omitted --> 客户端身份标识&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->client_secret&lt;!-- raw HTML omitted --> 客户端秘钥&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->redirect_uri&lt;!-- raw HTML omitted --> 重定向地址&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->scope&lt;!-- raw HTML omitted --> 授权范围, &lt;!-- raw HTML omitted -->read&lt;!-- raw HTML omitted --> 只读权限, &lt;!-- raw HTML omitted -->all&lt;!-- raw HTML omitted --> 全部权限&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->grant_type&lt;!-- raw HTML omitted --> 授权方式 &lt;!-- raw HTML omitted -->authorization_code&lt;!-- raw HTML omitted -->(授权码)、&lt;!-- raw HTML omitted -->password&lt;!-- raw HTML omitted -->(密码)、&lt;!-- raw HTML omitted -->client_credentials&lt;!-- raw HTML omitted -->
(凭证)、&lt;!-- raw HTML omitted -->refresh_token&lt;!-- raw HTML omitted -->(更新令牌)&lt;/li>
&lt;li>&lt;!-- raw HTML omitted -->state&lt;!-- raw HTML omitted --> 应用程序传递的一个随机数，防止 &lt;!-- raw HTML omitted -->CSRF&lt;!-- raw HTML omitted --> 攻击&lt;/li>
&lt;/ul>
&lt;h3 id="授权码httpswwwoauthcomoauth2-serversaccess-tokensauthorization-code-request-authorization-code-request">&lt;a href="https://www.oauth.com/oauth2-servers/access-tokens/authorization-code-request/" title="authorization-code-request">授权码&lt;/a>&lt;/h3>
&lt;p>在访问第三方应用先申请一个授权码，然后再用授权码获取令牌.这种方式也是最常用的流程，安全性也是最高的，适用于有后端的&lt;!-- raw HTML omitted -->Web&lt;!-- raw HTML omitted -->应用。授权码通过前端传送，令牌存储在后端。所有的和资源服务器的交互都在服务端完成，避免了令牌的泄露。
授权码和令牌的在 浏览器和客户端&lt;!-- raw HTML omitted -->WEB&lt;!-- raw HTML omitted -->应用以及资源服务器的交互流程大致如下:
&lt;img src="https://pinkhello.me/OAuth2-0%E9%82%A3%E7%82%B9%E4%BA%8B/auth_code.png" alt="authorization-code">&lt;/p>
&lt;ul>
&lt;li>1.2.3.4 用户选择 &lt;!-- raw HTML omitted -->Google&lt;!-- raw HTML omitted --> 登陆 &lt;!-- raw HTML omitted -->yelp.com&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>3.4 &lt;!-- raw HTML omitted -->Yelp.com&lt;!-- raw HTML omitted --> 请求用户授权 &lt;!-- raw HTML omitted -->Google&lt;!-- raw HTML omitted --> 权限&lt;/li>
&lt;li>5.6 用户同意后返回授权码
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;/li>
&lt;li>7.8 &lt;!-- raw HTML omitted -->Yelp.com&lt;!-- raw HTML omitted --> 通过授权码 会向 &lt;!-- raw HTML omitted -->Google&lt;!-- raw HTML omitted -->发起请求&lt;!-- raw HTML omitted -->Token&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;/li>
&lt;li>9 验证必要参数，返回 &lt;!-- raw HTML omitted -->Token&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>10.11 操作请求&lt;/li>
&lt;/ul>
&lt;h3 id="隐藏式httpsauth0comblogoauth2-implicit-grant-and-spa-oauth2-implicit-grant-and-spa">&lt;a href="https://auth0.com/blog/oauth2-implicit-grant-and-spa/" title="oauth2-implicit-grant-and-spa">隐藏式&lt;/a>&lt;/h3>
&lt;p>&lt;img src="https://pinkhello.me/OAuth2-0%E9%82%A3%E7%82%B9%E4%BA%8B/implicit.png" alt="implicit">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="密码式httpswwwoauthcomoauth2-serversaccess-tokenspassword-grant-password-grant">&lt;a href="https://www.oauth.com/oauth2-servers/access-tokens/password-grant/" title="password-grant">密码式&lt;/a>&lt;/h3>
&lt;p>顾名思议,在自己的系统输入第三方系统的账号密码,自己的系统拿账号密码去申请令牌，响应题里面返回token&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h3 id="凭证式httpswwwoauthcomoauth2-serversaccess-tokensclient-credentials-client-credentials">&lt;a href="https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/" title="client-credentials">凭证式&lt;/a>&lt;/h3>
&lt;p>凭证式和密码很相似，主要给没有前端输入的项目或者命令行&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="令牌的使用和更新">令牌的使用和更新&lt;/h2>
&lt;h3 id="令牌的使用">&lt;a href="">令牌的使用&lt;/a>&lt;/h3>
&lt;p>令牌的拿到了，就可以调用Google的API进行请求数据了，
一般讲 Token 放入请求头 Authorization.&lt;/p>
&lt;h3 id="令牌的更新httpswwwoauthcomoauth2-serversaccess-tokensrefreshing-access-tokens-refreshing-access-tokens">&lt;a href="https://www.oauth.com/oauth2-servers/access-tokens/refreshing-access-tokens/" title="refreshing-access-tokens">令牌的更新&lt;/a>&lt;/h3>
&lt;p>&lt;!-- raw HTML omitted -->Token&lt;!-- raw HTML omitted --> 是有时效性的，一旦过期就需要重新获取，但是重走一遍授权流程，不仅麻烦而且用户体验也不好，那如何让用户使用的优雅呢？&lt;/p>
&lt;p>一般在颁发令牌的时候，颁发两个&lt;!-- raw HTML omitted -->Token&lt;!-- raw HTML omitted -->, 一个授权&lt;!-- raw HTML omitted -->Token&lt;!-- raw HTML omitted -->,一个&lt;!-- raw HTML omitted -->Refresh Token&lt;!-- raw HTML omitted -->,
在更新&lt;!-- raw HTML omitted -->refresh_token&lt;!-- raw HTML omitted -->时候,将&lt;!-- raw HTML omitted -->grant_type&lt;!-- raw HTML omitted -->指定为&lt;!-- raw HTML omitted -->refresh_token&lt;!-- raw HTML omitted -->,
参数&lt;!-- raw HTML omitted -->refresh_token&lt;!-- raw HTML omitted -->是用于更新&lt;!-- raw HTML omitted -->Token&lt;!-- raw HTML omitted -->的&lt;!-- raw HTML omitted -->refresh_token&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h1 id="总结">总结&lt;/h1>
&lt;h1 id="安利">安利&lt;/h1>
&lt;ul>
&lt;li>Client
&lt;ul>
&lt;li>Go &lt;a href="https://godoc.org/golang.org/x/oauth2">https://godoc.org/golang.org/x/oauth2&lt;/a>&lt;/li>
&lt;li>Java
&lt;ul>
&lt;li>&lt;a href="https://spring.io/projects/spring-social/">https://spring.io/projects/spring-social/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://spring.io/projects/spring-security/">https://spring.io/projects/spring-security/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Server
&lt;ul>
&lt;li>Go
&lt;ul>
&lt;li>&lt;a href="https://github.com/go-oauth2/oauth2">https://github.com/go-oauth2/oauth2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/zalando/gin-oauth2">https://github.com/zalando/gin-oauth2&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Java &lt;a href="https://github.com/zalando/tokens">https://github.com/zalando/tokens&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>参考&lt;/p>
&lt;ul>
&lt;li>jsonwebtoken.io &lt;a href="https://www.jsonwebtoken.io/">https://www.jsonwebtoken.io/&lt;/a>&lt;/li>
&lt;li>oauth.net &lt;a href="https://oauth.net/2/">https://oauth.net/2/&lt;/a>&lt;/li>
&lt;li>aliyun.com
&lt;ul>
&lt;li>&lt;a href="https://help.aliyun.com/document_detail/32144.html?spm=5176.87240.400427.53.32fa4614S88B0N">https://help.aliyun.com/document_detail/32144.html?spm=5176.87240.400427.53.32fa4614S88B0N&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.aliyun.com/document_detail/32008.html?spm=a2c4g.11186623.6.780.40435837SXpbPT">https://help.aliyun.com/document_detail/32008.html?spm=a2c4g.11186623.6.780.40435837SXpbPT&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.aliyun.com/document_detail/32026.html?spm=a2c4g.11186623.6.856.20b1c06dgVW6Ri">https://help.aliyun.com/document_detail/32026.html?spm=a2c4g.11186623.6.856.20b1c06dgVW6Ri&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
- https://pinkhello.me/posts/05-oauth2.0%E9%82%A3%E7%82%B9%E4%BA%8B/ - PinkHello, All Rights Reserved</description></item><item><title>04 如何构建一个简单的RPC调用</title><link>https://pinkhello.me/posts/04-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84rpc%E8%B0%83%E7%94%A8/</link><pubDate>Wed, 10 Feb 2021 08:24:19 +0800</pubDate><guid>https://pinkhello.me/posts/04-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84rpc%E8%B0%83%E7%94%A8/</guid><description>PinkHello https://pinkhello.me/posts/04-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84rpc%E8%B0%83%E7%94%A8/ -&lt;p>1、什么叫RPC?&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://pinkhello.me/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BARPC%E8%B0%83%E7%94%A8/RPC%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1%E8%BF%87%E7%A8%8B.jpg" alt="RPC调用服务过程">&lt;/p>
&lt;p>RPC构成&lt;/p>
&lt;ul>
&lt;li>RPC Consumer&lt;/li>
&lt;li>RPC Provider&lt;/li>
&lt;li>ConfigServer&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>1、&lt;code>Provider&lt;/code> 启动 &lt;code>ConfigServer&lt;/code> 注册服务&lt;/li>
&lt;li>2、&lt;code>Consumer&lt;/code> 启动 &lt;code>ConfigServer&lt;/code> 订阅服务，&lt;/li>
&lt;li>3、发起调用 &lt;code>Consumer&lt;/code> &amp;mdash;&amp;gt; &lt;code>Provider&lt;/code>&lt;/li>
&lt;li>4、响应调用 &lt;code>Consumer&lt;/code> &amp;lt;&amp;mdash; &lt;code>Provider&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>2、什么是 &lt;code>Netty&lt;/code> ? &lt;a href="https://netty.io/">https://netty.io/&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="https://pinkhello.me/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BARPC%E8%B0%83%E7%94%A8/netty%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="netty框架图">&lt;/p>
&lt;p>3、现有的开源的项目是否使用了 &lt;code>Netty&lt;/code> ?&lt;/p>
&lt;ul>
&lt;li>Dubbo&lt;/li>
&lt;li>Grpc&lt;/li>
&lt;li>Spark&lt;/li>
&lt;li>&amp;hellip;.&lt;/li>
&lt;/ul>
&lt;p>4、&lt;code>RPC Provider&lt;/code> 启动&lt;/p>
&lt;ul>
&lt;li>&lt;code>Netty Server&lt;/code> 方式启动&lt;/li>
&lt;li>&lt;code>Rpc&lt;/code> 服务的注册
&lt;img src="https://pinkhello.me/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BARPC%E8%B0%83%E7%94%A8/RPC%E4%B8%8ENetty%E7%BB%93%E5%90%88Provider%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B.png" alt="RPC与Netty结合Provider调用过程">&lt;/li>
&lt;/ul>
&lt;p>5、&lt;code>RPC Consumer&lt;/code> 启动&lt;/p>
&lt;ul>
&lt;li>&lt;code>Netty Client&lt;/code> 方式启动&lt;/li>
&lt;li>&lt;code>RPC&lt;/code> 泛化调用、通过字节码基于反射来实现远程调度&lt;/li>
&lt;li>&lt;code>Consumer&lt;/code> 服务订阅&lt;/li>
&lt;li>启动时建立长连接
&lt;img src="https://pinkhello.me/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BARPC%E8%B0%83%E7%94%A8/RPC%E4%B8%8ENetty%E7%BB%93%E5%90%88Consumer%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B.png" alt="RPC与Netty结合Consumer调用过程">&lt;/li>
&lt;/ul>
&lt;p>6、从第四可以看出，多个 &lt;code>Provider&lt;/code> 是由一个 &lt;code>NettyServer&lt;/code> 提供的，通过 &lt;code>HandlerMap&lt;/code> 映射找到对应的 &lt;code>Ioc Bean&lt;/code>，完成服务调用&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">服务端
EventLoopGroup bossGroup = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> NioEventLoopGroup(1);
EventLoopGroup workerGroup = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> NioEventLoopGroup();
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
ServerBootstrap b = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ServerBootstrap();
b.&lt;span style="color:#658b00">group&lt;/span>(bossGroup, workerGroup)
.&lt;span style="color:#658b00">channel&lt;/span>(NioServerSocketChannel.&lt;span style="color:#658b00">class&lt;/span>)
.&lt;span style="color:#658b00">option&lt;/span>(ChannelOption.&lt;span style="color:#658b00">SO_BACKLOG&lt;/span>, 100)
.&lt;span style="color:#658b00">handler&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> LoggingHandler(LogLevel.&lt;span style="color:#658b00">INFO&lt;/span>))
.&lt;span style="color:#658b00">childHandler&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ChannelInitializer&amp;lt;SocketChannel&amp;gt;() {
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">initChannel&lt;/span>(SocketChannel ch) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> Exception {
ChannelPipeline p = ch.&lt;span style="color:#658b00">pipeline&lt;/span>();
p.&lt;span style="color:#658b00">addLast&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RpcEncoder(RpcRequest.&lt;span style="color:#658b00">class&lt;/span>));
p.&lt;span style="color:#658b00">addLast&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RpcDecoder(RpcResponse.&lt;span style="color:#658b00">class&lt;/span>));
p.&lt;span style="color:#658b00">addLast&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RpcHandler());
}});
&lt;span style="color:#228b22">// Start the server.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> ChannelFuture f = b.&lt;span style="color:#658b00">bind&lt;/span>(PORT).&lt;span style="color:#658b00">sync&lt;/span>();
&lt;span style="color:#228b22">// Wait until the server socket is closed.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> f.&lt;span style="color:#658b00">channel&lt;/span>().&lt;span style="color:#658b00">closeFuture&lt;/span>().&lt;span style="color:#658b00">sync&lt;/span>();
} &lt;span style="color:#8b008b;font-weight:bold">finally&lt;/span> {
&lt;span style="color:#228b22">// Shut down all event loops to terminate all threads.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> bossGroup.&lt;span style="color:#658b00">shutdownGracefully&lt;/span>();
workerGroup.&lt;span style="color:#658b00">shutdownGracefully&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pinkhello.me/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BARPC%E8%B0%83%E7%94%A8/Netty%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AFTCP%E9%93%BE%E6%8E%A5%E4%B8%8A%E7%9A%84%E8%AF%B7%E6%B1%82.jpg" alt="Netty如何处理客户端TCP链接上的请求">&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BARPC%E8%B0%83%E7%94%A8/NettyReactor%E5%B7%A5%E4%BD%9C%E6%A1%86%E6%9E%B6%E5%9B%BE.jpg" alt="NettyReactor工作框架图">&lt;/p>
&lt;ul>
&lt;li>&lt;code>BossGroup&lt;/code> -&amp;gt; 处理客户端的请求&lt;/li>
&lt;li>&lt;code>EventGroup&lt;/code> —&amp;gt; 处理IO &lt;code>Read/Write&lt;/code> 操作、执行任务系统Task、定时任务&lt;/li>
&lt;li>&lt;code>ChildChannelHandler&lt;/code> 方式是对 &lt;code>ChannelPipeline&lt;/code> 的设置、&lt;/li>
&lt;li>&lt;code>ChannelPipeline&lt;/code> 是相当于任务链的模式, 是一串 &lt;code>ChannelHandler&lt;/code> 的实例&lt;/li>
&lt;li>&lt;code>ChannelHandlerContext&lt;/code> 是 &lt;code>ChannelPipeline&lt;/code> 和 &lt;code>ChannelHandler&lt;/code> 的关系&lt;/li>
&lt;li>每个链接对于 &lt;code>Sever&lt;/code> 端都会创建一个 &lt;code>Channel&lt;/code> ，可以将 &lt;code>Channel&lt;/code> 理解为 &lt;code>Connection&lt;/code> （其实真正的是 &lt;code>Connection&lt;/code> 属于 &lt;code>Channel&lt;/code> 的一部分）&lt;/li>
&lt;li>每个 &lt;code>Channel&lt;/code> 都有一个自己的唯一的 &lt;code>ChannelPipeline&lt;/code> 操作，对于其他的 &lt;code>Channel&lt;/code> 的 &lt;code>ChannelPipeline&lt;/code> 是隔离的&lt;/li>
&lt;li>&lt;code>RPC Handler&lt;/code> 是我们对于自己的找寻 &lt;code>RPC&lt;/code> 服务处理的 &lt;code>Handler&lt;/code> 实现&lt;/li>
&lt;li>&lt;code>RPC Encoder&lt;/code> 是我们对于自己的找寻 &lt;code>RPC&lt;/code> 序列化的编码的 &lt;code>Handler&lt;/code> 实现&lt;/li>
&lt;li>&lt;code>RPC Decoder&lt;/code> 是我们对于自己的找寻 &lt;code>RPC&lt;/code> 序列化的解码的 &lt;code>Handler&lt;/code> 实现&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">客户端
EventLoopGroup group = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> NioEventLoopGroup();
&lt;span style="color:#8b008b;font-weight:bold">try&lt;/span> {
Bootstrap b = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> Bootstrap();
b.&lt;span style="color:#658b00">group&lt;/span>(group)
.&lt;span style="color:#658b00">channel&lt;/span>(NioSocketChannel.&lt;span style="color:#658b00">class&lt;/span>)
.&lt;span style="color:#658b00">option&lt;/span>(ChannelOption.&lt;span style="color:#658b00">TCP_NODELAY&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>)
.&lt;span style="color:#658b00">handler&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> ChannelInitializer&amp;lt;SocketChannel&amp;gt;() {
&lt;span style="color:#707a7c">@Override&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">public&lt;/span> &lt;span style="color:#00688b;font-weight:bold">void&lt;/span> &lt;span style="color:#008b45">initChannel&lt;/span>(SocketChannel ch) &lt;span style="color:#8b008b;font-weight:bold">throws&lt;/span> Exception {
ChannelPipeline p = ch.&lt;span style="color:#658b00">pipeline&lt;/span>();
p.&lt;span style="color:#658b00">addLast&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RpcEncoder(RpcResponse.&lt;span style="color:#658b00">class&lt;/span>));
p.&lt;span style="color:#658b00">addLast&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RpcDecoder(RpcRequest.&lt;span style="color:#658b00">class&lt;/span>));
p.&lt;span style="color:#658b00">addLast&lt;/span>(&lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> RpcClientHandler());
}});
&lt;span style="color:#228b22">// Start the client.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> ChannelFuture f = b.&lt;span style="color:#658b00">connect&lt;/span>(HOST, PORT).&lt;span style="color:#658b00">sync&lt;/span>();
&lt;span style="color:#228b22">// Wait until the connection is closed.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> f.&lt;span style="color:#658b00">channel&lt;/span>().&lt;span style="color:#658b00">closeFuture&lt;/span>().&lt;span style="color:#658b00">sync&lt;/span>();
} &lt;span style="color:#8b008b;font-weight:bold">finally&lt;/span> {
&lt;span style="color:#228b22">// Shut down the event loop to terminate all threads.
&lt;/span>&lt;span style="color:#228b22">&lt;/span> group.&lt;span style="color:#658b00">shutdownGracefully&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>7、&lt;code>RPC&lt;/code> 序列化&lt;/p>
&lt;ul>
&lt;li>二进制数据&lt;/li>
&lt;li>Hessian&lt;/li>
&lt;li>Avro&lt;/li>
&lt;li>ProtoBuffer (Protobuf)&lt;/li>
&lt;li>JSON&lt;/li>
&lt;li>XML&lt;/li>
&lt;/ul>
&lt;p>8、关于 &lt;code>RPC&lt;/code> 的实现思考与技术讨论&lt;/p>
&lt;ul>
&lt;li>业务方法、因为是收到请求消息而触发的后续动作调用，不做额外设置，肯定是使用的 &lt;code>WorkGroup&lt;/code> 里面的线程操作的。
而作为业务层，不应该与底层关联，应该切割开来，势必会引入真的业务侧线程池。
那么如何引用、怎么引用？(关于 业务线程池 与 &lt;code>WorkGroup&lt;/code> 的 &lt;code>EvenLoop&lt;/code> 的思考 )&lt;/li>
&lt;li>关于 &lt;code>RPC&lt;/code> 调用大部分是同步的调用，而 &lt;code>Netty&lt;/code> 底层是完全异步事件机制，在RPC框架层面如何实现同步的调用方式的？&lt;/li>
&lt;li>基于 &lt;code>TCP&lt;/code> 的长链接调用，在 &lt;code>RPC&lt;/code> 上你会想到其他的哪些东东？&lt;/li>
&lt;li>在此环境下，我没有介绍 &lt;code>RPC&lt;/code> 服务于 IOC容器的结合，可以思考一下，如何做到 注解机制、&lt;code>JAVA CONFIG&lt;/code> 机制、&lt;code>XML SCHEMA&lt;/code> 机制来做?
&lt;ul>
&lt;li>GUICE&lt;/li>
&lt;li>SPRING&lt;/li>
&lt;li>SPI&lt;/li>
&lt;li>&amp;hellip;.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
- https://pinkhello.me/posts/04-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84rpc%E8%B0%83%E7%94%A8/ - PinkHello, All Rights Reserved</description></item><item><title>链接</title><link>https://pinkhello.me/links/</link><pubDate>Tue, 09 Feb 2021 10:38:21 +0800</pubDate><guid>https://pinkhello.me/links/</guid><description>PinkHello https://pinkhello.me/links/ -- https://pinkhello.me/links/ - PinkHello, All Rights Reserved</description></item><item><title>关于我</title><link>https://pinkhello.me/about/</link><pubDate>Tue, 09 Feb 2021 10:36:43 +0800</pubDate><guid>https://pinkhello.me/about/</guid><description>PinkHello https://pinkhello.me/about/ -&lt;p>Hi there 👷 I&amp;rsquo;m pinkhello &lt;img src="https://views.whatilearened.today/views/github/pinkhello/pinkhello.svg" alt="views">&lt;/p>
&lt;ul>
&lt;li>💻 I&amp;rsquo;m a BackEnd Developer&lt;/li>
&lt;li>📖 Mainly &lt;img src="https://img.shields.io/badge/-Java-black?style=flat-square&amp;amp;logo=Java" alt="Java"> &lt;img src="https://img.shields.io/badge/-Go-black?style=flat-square&amp;amp;logo=Go" alt="Go">&lt;/li>
&lt;li>🍎 Also Code in &lt;img src="https://img.shields.io/badge/-Python-black?style=flat-square&amp;amp;logo=Python" alt="Python"> &lt;img src="https://img.shields.io/badge/-JavaScript-black?style=flat-square&amp;amp;logo=JavaScript" alt="JavaScript"> &lt;img src="https://img.shields.io/badge/-kotlin-black?style=flat-square&amp;amp;logo=kotlin" alt="Kotlin">&lt;/li>
&lt;li>📮 How to reach me: &lt;a href="mailto:lee123lee123@163.com">&lt;img src="https://img.shields.io/badge/-pinkhello-black?style=plastic&amp;amp;logo=Gmail&amp;amp;logoColor=white&amp;amp;link=mailto:lee123lee123@163.com" alt="Gmail Badge">&lt;/a>
&lt;a href="https://pinkhello.me">&lt;img src="https://img.shields.io/badge/-pinkhello-black?style=plastic&amp;amp;logo=blog&amp;amp;logoColor=blue&amp;amp;link=https://pinkhello.me" alt="Gmail Badge">&lt;/a>. Wechat: chess_1&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://github-readme-stats.vercel.app/api?username=pinkhello&amp;amp;show_icons=true&amp;amp;theme=vue&amp;amp;hide_border=true&amp;amp;line_height=20&amp;amp;count_private=true" alt="">
&lt;img src="https://github-readme-stats.vercel.app/api/top-langs/?username=pinkhello&amp;amp;layout=compact&amp;amp;hide_border=true&amp;amp;hide=html,vim&amp;amp;count_private=true" alt="">&lt;/p>
&lt;p>🐳 个人开源项目&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">项目&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://github.com/pinkhello/gopush">GoPush&lt;/a>&lt;/td>
&lt;td style="text-align:left">一个实时推送组件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://github.com/pinkhello/spring-boot-starter-dubbo">spring-boot-starter-dubbo&lt;/a>&lt;/td>
&lt;td style="text-align:left">dubbo-spring-boot-脚手架&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="https://github.com/pinkhello/go-starter">go-starter&lt;/a>&lt;/td>
&lt;td style="text-align:left">Go服务开发脚手架&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>⚡ Technologies&lt;/p>
&lt;p>Framework&lt;br>
&lt;img src="https://img.shields.io/badge/-Vue.js-000000?style=flat-square&amp;amp;logo=vue-dot-js" alt="Vue">
&lt;img src="https://img.shields.io/badge/-Spring-black?style=flat-square&amp;amp;logo=Spring" alt="Spring">
&lt;img src="https://img.shields.io/badge/-springboot-black?style=flat-square&amp;amp;logo=springboot" alt="SpringBoot">
&lt;img src="https://img.shields.io/badge/-Dubbo-black?style=flat-square&amp;amp;logo=Dubbo" alt="Dubbo">
&lt;img src="https://img.shields.io/badge/-Flask-black?style=flat-square&amp;amp;logo=Flask" alt="Flask">
&lt;img src="https://img.shields.io/badge/-Echo-black?style=flat-square&amp;amp;logo=Echo" alt="Echo">
&lt;img src="https://img.shields.io/badge/-Gin-black?style=flat-square&amp;amp;logo=Gin" alt="Gin">
&lt;img src="https://img.shields.io/badge/-Grpc-black?style=flat-square&amp;amp;logo=Grpc" alt="Grpc">&lt;/p>
&lt;p>Tools&lt;br>
&lt;img src="https://img.shields.io/badge/-Redis-black?style=flat-square&amp;amp;logo=Redis" alt="Redis">
&lt;img src="https://img.shields.io/badge/-MySQL-black?style=flat-square&amp;amp;logo=mysql" alt="MySQL">
&lt;img src="https://img.shields.io/badge/-Nginx-black?style=flat-square&amp;amp;logo=Nginx" alt="Nginx">
&lt;img src="https://img.shields.io/badge/-MongoDB-black?style=flat-square&amp;amp;logo=MongoDB" alt="MongoDB">
&lt;img src="https://img.shields.io/badge/-Pulsar-black?style=flat-square&amp;amp;logo=apache-pulsar" alt="Pulsar">
&lt;img src="https://img.shields.io/badge/-Kafka-black?style=flat-square&amp;amp;logo=apache-kafka" alt="Kafka">
&lt;img src="https://img.shields.io/badge/-RocketMQ-black?style=flat-square&amp;amp;logo=apache-rocketmq" alt="RocketMQ">
&lt;img src="https://img.shields.io/badge/-Nsq-black?style=flat-square&amp;amp;logo=Nsq" alt="Nsq">
&lt;img src="https://img.shields.io/badge/-RabbitMQ-black?style=flat-square&amp;amp;logo=RabbitMQ" alt="RabbitMQ">
&lt;img src="https://img.shields.io/badge/-GitHub-181717?style=flat-square&amp;amp;logo=github" alt="GitHub">
&lt;img src="https://img.shields.io/badge/-Maven-black?style=flat-square&amp;amp;logo=apache-maven" alt="Maven">
&lt;img src="https://img.shields.io/badge/-Gradle-black?style=flat-square&amp;amp;logo=gradle" alt="Gradle">
&lt;img src="https://img.shields.io/badge/-Airflow-black?style=flat-square&amp;amp;logo=apache-airflow" alt="Airflow">&lt;/p>
&lt;p>Others&lt;br>
&lt;img src="https://img.shields.io/badge/-Kubernetes-black?style=flat-square&amp;amp;logo=Kubernetes" alt="Kubernetes">
&lt;img src="https://img.shields.io/badge/-Docker-black?style=flat-square&amp;amp;logo=Docker" alt="Docker">
&lt;img src="https://img.shields.io/badge/-Rancher-black?style=flat-square&amp;amp;logo=Rancher" alt="Rancher">
&lt;img src="https://img.shields.io/badge/-Linux-black?style=flat-square&amp;amp;logo=Linux" alt="Linux">
&lt;img src="https://img.shields.io/badge/-Deepin-007CFF?style=flat-square&amp;amp;logo=deepin" alt="Deepin">
&lt;img src="https://img.shields.io/badge/-Centos-262577?style=flat-square&amp;amp;logo=Centos" alt="Centos">
&lt;img src="https://img.shields.io/badge/-Raspberry%20Pi-C51A4A?style=flat-square&amp;amp;logo=Raspberry-Pi" alt="Raspberry Pi">&lt;/p>
&lt;p>🚀 2021 OKR 进度&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">动作&lt;/th>
&lt;th style="text-align:left">进度&lt;/th>
&lt;th style="text-align:left">目标&lt;/th>
&lt;th style="text-align:left">缺陷&lt;/th>
&lt;th style="text-align:left">其他&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">👯 Go服务开发脚手架&lt;/td>
&lt;td style="text-align:left">done&lt;/td>
&lt;td style="text-align:left">&lt;a href="https://github.com/pinkhello/go-starter">go-starter&lt;/a>&lt;/td>
&lt;td style="text-align:left">ut&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">💵 Go服务开发脚手架开发一个简单前后端系统&lt;/td>
&lt;td style="text-align:left">done&lt;/td>
&lt;td style="text-align:left">&lt;a href="http://121.4.242.26">房产CRM信息系统&lt;/a> test/123456&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">BE采用的&lt;a href="https://github.com/pinkhello/go-starter">go-starter&lt;/a>, FE 采用的&lt;a href="https://pro.antdv.com/">ant-design-vue-pro&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">🐳 K8S原理&lt;/td>
&lt;td style="text-align:left">running&lt;/td>
&lt;td style="text-align:left">&lt;a href="https://pinkhello.me/categories/k8s/">K8S博客成档&lt;/a>&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">🚀 RocketMQ 源代码阅读(Java)&lt;/td>
&lt;td style="text-align:left">running&lt;/td>
&lt;td style="text-align:left">&lt;a href="https://pinkhello.me/categories/rocketmq/">RocketMQ博客成档&lt;/a>&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">🚀 RocketMQ 客户端代码阅读(Compare Go/Java)&lt;/td>
&lt;td style="text-align:left">running&lt;/td>
&lt;td style="text-align:left">&lt;a href="https://pinkhello.me/categories/rocketmq/">RocketMQ博客成档&lt;/a>&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">😄 MySQL实现原理解析&lt;/td>
&lt;td style="text-align:left">prepare&lt;/td>
&lt;td style="text-align:left">博客成档&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">🏫 数据结构与算法之美&lt;/td>
&lt;td style="text-align:left">prepare&lt;/td>
&lt;td style="text-align:left">博客成档&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:left">-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
- https://pinkhello.me/about/ - PinkHello, All Rights Reserved</description></item><item><title>老司机聊聊BatChat</title><link>https://pinkhello.me/posts/12-%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0chat/</link><pubDate>Sun, 31 Jan 2021 21:37:07 +0000</pubDate><guid>https://pinkhello.me/posts/12-%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0chat/</guid><description>PinkHello https://pinkhello.me/posts/12-%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0chat/ -&lt;!-- raw HTML omitted -->
&lt;p>今天，在浏览&lt;code>小众软件&lt;/code>的时候，突然看见一个早期小编的推广～～～蝙蝠APP，联想到之前新闻中看到的有个贩卖个人信息的人说在蝙蝠APP上，勾起了我的好奇心，作为一个程序🐶，默默的想探究一下这个蝙蝠APP玩的什么套路。&lt;/p>
&lt;h1 id="什么是蝙蝠batchat">什么是蝙蝠（BatChat）&lt;/h1>
&lt;p>一款免费的端到端加密的蝙蝠APP，随时畅聊！
应用 IOS、Android
&lt;a href="https://batchat.com">https://batchat.com&lt;/a>&lt;/p>
&lt;h1 id="它的特性">它的特性&lt;/h1>
&lt;ul>
&lt;li>安全 ｜ 畅聊时、端到端加密（所有消息经过端到端加密，任何聊天记录不进行云存储，让你的信息想象中更安全）&lt;/li>
&lt;li>隐私 ｜ 畅聊时、双向撤回（聊天记录一键双向撤回，同时删除你和对方设备上所有的聊天记录，撤回数据多次覆盖删除、不可恢复、保证双方的隐私安全）&lt;/li>
&lt;li>匿名群聊 ｜ 开启匿名群聊，群里面的每一个成员都可以&amp;quot;变身&amp;quot;，隐藏真实身份，群内不受身份约束&lt;/li>
&lt;/ul>
&lt;h1 id="什么是端到端加密">什么是端到端加密？&lt;/h1>
&lt;p>端到端加密是在源结点和目的结点中对传送的数据进行加密和解密， 因此数据的安全性不会因中间结点的不可靠而受到影响。&lt;code> 蝙蝠APP的所有数据都通过用户端生成的私钥进行加密后再发送，任何第三方包括开发者都不能解开此数据&lt;/code>.&lt;/p>
&lt;h1 id="蝙蝠app采用的安全层级">蝙蝠APP采用的安全层级？&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>通道加密
通道加密中采用了哪些加密算法？
通道加密中使用到的 RSA, ECDHE, AES256_CBC, SHA256, SHA1等等(如下图)。&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E9%80%9A%E9%81%93%E5%8A%A0%E5%AF%86.png" alt="通道加密">
步骤:&lt;/p>
&lt;ul>
&lt;li>(1. 客户端和服务器先产生随机数&lt;/li>
&lt;li>(2. 服务器下发随机数。&lt;/li>
&lt;li>(3. 客户端用 RSA 对客户端随机数进行加密，并发送给服务器。&lt;/li>
&lt;li>(4. 服务器用 RSA 解密客户端随机数（使用 RSA 的目的是防止中间人攻击）。&lt;/li>
&lt;li>(5. 客户端，服务器用自己的随机数加上对方的随机数生成临时密钥 TempKey 和临时偏移量 TempIV (此时双方均持有相同的 TempKey和TempIV)。&lt;/li>
&lt;li>(6. 客户端服务器均使用 ECDHE 生成各自的公私钥对。&lt;/li>
&lt;li>(7. 客户端用 TempKey, TempIV 对自己的 ECDHE 公钥进行加密，并将密文发送给服务器。&lt;/li>
&lt;li>(8. 服务器收到客户端的 ECDHE 公钥密文，并解密。&lt;/li>
&lt;li>(9. 服务器使用 TempKey, TempIV 对自己的 ECDHE 公钥进行加密，并使用 RSA 对 ECDHE。&lt;/li>
&lt;li>(10. 服务器使用 ECDHE 算法，使用客户端 ECDHE 公钥明文+服务器 ECDHE 私钥明文生成ShareKey。&lt;/li>
&lt;li>(11. 客户端收到服务器的 ECDHE 公钥密文和签名，然后进行解密和验证签名，如果没有问题，就使用客户端 ECDHE 私钥明文+服务器ECDHE 公钥明文生成 ShareKey。&lt;/li>
&lt;li>(12. 服务器初始化各个参数，下发给客户端,参数包含：
&lt;ul>
&lt;li>
&lt;p>AuthKeyID： 服务器随机生成的客户端临时标识符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MsgKey： 由 ShareKey, AuthkeyID, MsgID, SessionID, Salt, SeqNo 以及真实的消息内容相加后进行 Sha256 后的值&lt;/p>
&lt;blockquote>
&lt;p>本参数用于：&lt;/p>
&lt;blockquote>
&lt;p>(a. 进行防止数据篡改的验证&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>(b. 与 ShareKey 一起使用，生成 Aes256 key, IV，用来对各条消息进行加密。&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>MsgID：时间相关的消息 ID，用于防止重放和去重。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SessionID：每次登录唯一的会话 ID。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Salt：每次登录唯一的盐值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SeqNo：用于防止重放。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>(13. 后续每条消息均会有不同的 MsgID, SessionID, Salt, SeqNo 和真实的消息内容；这些变化的值会导致 MsgKey 每次都不同。 这个每次都 不同的 MsgKey 加上 ShareKey 可以为每一条消息生成对应的 32 字节密钥和偏移量。&lt;/li>
&lt;li>(14. ShareKey 会过期，过期后需要重新进行密钥协商。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>内容加密&lt;/p>
&lt;ul>
&lt;li>(1. 用户生成 ECDHE 公私钥，保存在本地。&lt;/li>
&lt;li>(2. 将公钥发送到服务器，私钥保存在本地。&lt;/li>
&lt;li>(3. 用户登录，获取所有好友信息的更新，包含每个好友的公钥。&lt;/li>
&lt;li>(4. 发送消息，和接收消息时均采用自己的私钥+对方的公钥生成 ShareKey。&lt;/li>
&lt;li>(5. 使用 ShareKey 生成 AES256 的密钥，进行加密和解密。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png" alt="内容加密">&lt;/p>
&lt;p>蝙蝠 双棘轮算法 如下：
Alice(A)发送的消息传送了她的新公钥。 最终，Bob(B)将收到以下消息之一，并执行第二个DH棘轮步骤； 在每个DH棘轮步骤中生成的DH 输出用于导出新的发送和接收链密钥。当各方轮流执行DH棘轮步骤时，他们轮流引入新的发送链，依此类推。&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E5%8F%8C%E6%A3%98%E8%BD%AE%E7%AE%97%E6%B3%95.png" alt="双棘轮算法">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务器数据库安全&lt;/p>
&lt;ul>
&lt;li>(1. 数据库有签名字段。&lt;/li>
&lt;li>(2. 服务器上生成 ECDSA 公私钥。&lt;/li>
&lt;li>(3. 服务器代码中对数据库敏感字段，比如：password, userID, friend 等做增删改操作时均通过 ECDSA 生成签名，并更新到签名字段。&lt;/li>
&lt;li>(4. 服务器代码对 password, userID, friend 等数据进行读取，判断等操作时进行 ECDSA验证签名，只有通过验证才能进行后续流程，否则 给客户端报错。&lt;/li>
&lt;li>(5. 服务端程序进行加密和签名保护。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="好了上面的都是摘自-batchat-官网介绍现在进入正题">好了，上面的都是摘自 BatChat 官网介绍！现在进入正题！&lt;/h1>
&lt;p>先来一个重磅&lt;/p>
&lt;blockquote>
&lt;p>《网络安全法》 第二十一条规定，网络运营者应当按照网络安全等级保护制度的要求,履行安全保护义务,保障网络免受干扰、破坏或者未经授权的访问,防止网络数据泄露或者被窃取、篡改。网络运营者的安全义务包括采取监测、记录网络运行状态、网络安全事件的技术措施,并按照规定留存相关的网络日志不少于六个月。&lt;/p>
&lt;/blockquote>
&lt;p>嘿嘿 ，按照小弟的理解，&lt;code>BatChat&lt;/code> 号称端到端加密，那么信息加密和国内备案明显冲突了，所以要么这其中有一个是假的，要么就是在违&lt;code>法&lt;/code>的边缘疯狂试探。&lt;/p>
&lt;p>正因为看到这些，所以小弟默默的 &lt;code>Download&lt;/code> 了下来, 然后默默的 &lt;code>Install&lt;/code>, 然后默默的注册登录进入了 😯 💐 ～～～～&lt;/p>
&lt;p>进入是基础Tab功能菜单&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/app-%E6%88%91%E7%9A%84.png" alt="app">&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/app-%E8%81%94%E7%B3%BB%E4%BA%BA.jpeg" alt="app">&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/app-%E8%9D%99%E8%9D%A0%E6%88%91%E7%9A%84.png" alt="app">&lt;/p>
&lt;p>进入瞬间的内容，我呵呵咯～～&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E7%9E%AC%E9%97%B4-%E8%BF%9D%E8%A7%84.jpeg" alt="app">&lt;/p>
&lt;p>有没有看出来什么，人脸识别自动识别造假（黑灰产业链）&lt;/p>
&lt;p>下面是我的一些截图，你们自己看咯&lt;/p>
&lt;ul>
&lt;li>
&lt;p>标签搜索 点击换一组，这是官方的推荐的。&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E6%A0%87%E7%AD%BE%E6%90%9C%E7%B4%A21.jpeg" alt="标签">&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E6%A0%87%E7%AD%BE%E6%90%9C%E7%B4%A22.jpeg" alt="标签">&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E6%A0%87%E7%AD%BE%E6%90%9C%E7%B4%A23.jpeg" alt="标签">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>搜索敏感词群&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E7%BE%A4%E6%90%9C%E7%B4%A2%E6%94%AF%E4%BB%98.jpeg" alt="群搜索">&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E7%BE%A4%E6%90%9C%E7%B4%A2%E7%A6%8F%E5%88%A9.jpeg" alt="群搜索">&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E7%BE%A4%E6%90%9C%E7%B4%A2%E8%8F%A0%E8%8F%9C%E5%A4%9A.jpeg" alt="群搜索">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我默默的加了一个看似正常的群，进群后我风化了！！！！&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E7%BE%A4%E8%BF%9D%E8%A7%84%E5%86%85%E5%AE%B91.jpeg" alt="进群信息">&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E7%BE%A4%E8%BF%9D%E8%A7%84%E5%86%85%E5%AE%B92.jpeg" alt="进群信息">&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E8%BF%9D%E8%A7%84%E7%BE%A4%E5%86%85%E5%AE%B95.png" alt="进群信息">&lt;/p>
&lt;p>下面是防骗官方群里的&lt;/p>
&lt;p>&lt;img src="https://pinkhello.me/%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0Chat/%E5%AE%A3%E4%BC%A0%E7%BE%A4%E8%BF%9D%E8%A7%843.jpeg" alt="进群信息">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="好了总结一下batchat">好了，总结一下BatChat！&lt;/h1>
&lt;p>蝙蝠APP聚合了哪些人？&lt;/p>
&lt;ul>
&lt;li>绝大部分黑灰产业链上下游人员！&lt;/li>
&lt;li>极小部分尝鲜的小白&lt;/li>
&lt;li>当然因为陌生人聊天，我能进入的只有群搜索，应该还有更深的。&lt;/li>
&lt;/ul>
&lt;p>当然个人认为，此平台竟然能运行到现在，后面想象的空间很大啊&lt;/p>
&lt;p>补个刀，知乎专栏 &lt;a href="https://zhuanlan.zhihu.com/p/158261618">https://zhuanlan.zhihu.com/p/158261618&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>这尼玛就是为黑灰产业搭建聚合平台啊！虽说你不想，但是就宣传的端到端加密以及消息撤回，这个不正是他们在意的么？
当然某腾也宣称不存储**啥的？你信？&lt;/p>
&lt;/blockquote>
&lt;p>现在我要郑重声明：我默默的删除了此款APP！！！&lt;/p>
- https://pinkhello.me/posts/12-%E8%81%8A%E8%81%8A%E8%9D%99%E8%9D%A0chat/ - PinkHello, All Rights Reserved</description></item><item><title>回望K8S 持久化存储</title><link>https://pinkhello.me/posts/22-%E5%9B%9E%E6%9C%9Bk8s-%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/</link><pubDate>Sat, 21 Mar 2020 17:17:13 +0800</pubDate><guid>https://pinkhello.me/posts/22-%E5%9B%9E%E6%9C%9Bk8s-%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/</guid><description>PinkHello https://pinkhello.me/posts/22-%E5%9B%9E%E6%9C%9Bk8s-%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/ -&lt;h1 id="pvpvcstorageclass-说的啥">&lt;code>PV&lt;/code>、&lt;code>PVC&lt;/code>、&lt;code>StorageClass&lt;/code> 说的啥？&lt;/h1>
&lt;p>&lt;code>PV&lt;/code>: 持久化存储数据卷，这个 API 主要定义的是一个持久化存储在宿主机上的一个目录。一般由运维人员进行定义，比如定义一个 NFS 类型的 PV&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>PersistentVolume&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>nfs&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">storageClassName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>manual&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">capacity&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">storage&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>1Gi&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">accessModes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- ReadWriteMany&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">nfs&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">server&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">10.244.1.5&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">path&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PVC&lt;/code>: POD 所希望使用的持久化存储的属性. 比如 &lt;code>Volume&lt;/code> 的存储大小、可读写权限等.
&lt;code>PVC&lt;/code> 一般由开发人员创建、或者由 &lt;code>PVC&lt;/code>模板的方式成为&lt;code>StatefulSet&lt;/code>的一部分，由&lt;code>StatefulSet&lt;/code>控制器负责创建带编号的&lt;code>PVC&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#228b22"># 创建一个 1 GB 大小的PVC&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">---&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>PersistentVolumeClaim&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>nfs&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">accessModes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- ReadWriteMany&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">storageClassName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>manual&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">requests&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">storage&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>1Gi&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#008b45;text-decoration:underline">...&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用户创建的&lt;code>PVC&lt;/code>要真正的被容器使用的化，需要于心和某个符合条件的&lt;code>PV&lt;/code>进行绑定：&lt;/p>
&lt;ul>
&lt;li>第一个条件，&lt;code>PV&lt;/code> 和 &lt;code>PVC&lt;/code> 的 &lt;code>spec&lt;/code> 字段。例如: &lt;code>PV&lt;/code> 的存储(&lt;code>storage&lt;/code>)大小就必须满足 &lt;code>PVC&lt;/code> 的要求&lt;/li>
&lt;li>第二个条件，&lt;code>PV&lt;/code> 和 &lt;code>PVC&lt;/code> 的 &lt;code>storageClassName&lt;/code> 字段名称必须一样。&lt;/li>
&lt;/ul>
&lt;p>下面是去使用这个&lt;code>PVC&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Pod&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">role&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>web-frontend&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">spec&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">containers&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>web&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>nginx&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>web&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">containerPort&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b452cd">80&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">volumeMounts&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>nfs&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">mountPath&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#cd5555">&amp;#34;/usr/share/nginx/html&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>nfs&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">persistentVolumeClaim&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">claimName&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>nfs&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PVC&lt;/code> 理解为持久化存储的 接口，它提供了对某种持久化存储的描述，但不提供具体的实现，而这个持久化的实现部分由 &lt;code>PV&lt;/code> 完成。&lt;/p>
&lt;p>假设，我们在创建 &lt;code>POD&lt;/code> 的时候，系统内并没有合适的 &lt;code>PV&lt;/code> 跟它定义的 &lt;code>PVC&lt;/code> 绑定，这个时候容器想要使用的 &lt;code>Volume&lt;/code> 不存在，怎么办呢？&lt;/p>
&lt;p>在 &lt;code>Kubernetes&lt;/code> 内，时机存在一个专门处理持久化存储的控制器，叫做 &lt;code>VolumeController&lt;/code>。这个&lt;code>VolumeController&lt;/code>维护着多个控制循环,
其中有个循环就是用来撮合 &lt;code>PV&lt;/code> 和 &lt;code>PVC&lt;/code> 进行绑定的角色，名字叫 &lt;code>PersistentVolumeController&lt;/code>. 它会不断的查看当前的每一个 &lt;code>PVC&lt;/code>， 是否处于 &lt;code>Bound&lt;/code> 状态
如果不是，它会遍历所以的、可用的 &lt;code>PV&lt;/code>，并尝试将其与这个声明的PVC进行绑定。这样，&lt;code>Kubernetes&lt;/code> 就可以保证用户提交的每一个 &lt;code>PVC&lt;/code>，只要有合适的 &lt;code>PV&lt;/code> 出现，它能快速的进入绑定状态。
而所谓的绑定，其实就是将这个 &lt;code>PV&lt;/code> 对象的名字填充在了 &lt;code>PVC&lt;/code> 对象的 &lt;code>spec.volumeName&lt;/code> 字段上。接下来 &lt;code>Kubernetes&lt;/code> 只要获取到这个 &lt;code>PVC&lt;/code> 对象，就一定能够找到它所绑定的 &lt;code>PV&lt;/code>.&lt;/p>
&lt;p>&lt;code>PV&lt;/code> 对象如何变成容器里的一个持久化存储的呢？&lt;/p>
&lt;p>所谓容器的 &lt;code>Volume&lt;/code> ，其实就是将一个宿主机上的目录，跟容器里的目录进行绑定挂载在一起的，
所谓的 &lt;code>持久化Volume&lt;/code> ，指的就是这个宿主机上的目录，具备&lt;code>持久化&lt;/code>,即当目录里面的内容，既不会因为容器的删除而被清理、也不会跟当前的宿主机绑定，当容器进行重启或者在其他节点上重建之后，依然能够挂载到这个 &lt;code>Volume&lt;/code>, 访问这些内容，
所以，大多数情况下，持久化的 &lt;code>Volume&lt;/code> 的实现，往往依赖一个远程存储服务，比如远程文件存储（&lt;code>NFS&lt;/code>、&lt;code>GlusterFS&lt;/code>），远程块存储（公有云的远程磁盘）。&lt;/p>
&lt;p>&lt;code>持久化&lt;/code>宿主机目录的过程，这个形象的成为 &lt;code>两阶段处理&lt;/code>&lt;/p>
&lt;p>当一个 &lt;code>POD&lt;/code> 调度到一个节点上后, &lt;code>Kubelet&lt;/code> 就要为这个 &lt;code>POD&lt;/code> 创建一个 &lt;code>Volume&lt;/code> 目录, 默认情况下 &lt;code>Kubelet&lt;/code> 为 &lt;code>Volume&lt;/code> 创建的目录如下所示（在宿主机上）&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">/var/lib/kubelet/pods/&amp;lt;Pod的ID&amp;gt;/volumes/kubernetes.io~&amp;lt;Volume类型&amp;gt;/&amp;lt;Volume名字&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来, &lt;code>Kubelet&lt;/code> 要做的操作取决于 &lt;code>Volume&lt;/code> 类型.
如果 &lt;code>Volume&lt;/code> 类型是远程块存储，比如 &lt;code>Google CLoud&lt;/code> 的 &lt;code>Persistent Disk&lt;/code>, 那么 &lt;code>Kubelet&lt;/code> 就需要先调用 &lt;code>Google Cloud&lt;/code> 的 &lt;code>API&lt;/code>, 将它所提供的 &lt;code>Persistent Disk&lt;/code> 挂载到 &lt;code>Pod&lt;/code> 所在的宿主机上。
相当于执行了&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">gcloud compute instances attach-disk &amp;lt;虚拟机名字&amp;gt; --disk &amp;lt;远程磁盘名字&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为虚拟机挂载远程磁盘的操作，对应的正是 &lt;code>两阶段处理&lt;/code> 的第一段。即在 &lt;code>Kubernetes&lt;/code> 中的 &lt;code>Attach&lt;/code> 阶段。&lt;/p>
&lt;p>&lt;code>Attach&lt;/code> 阶段后,要能够使用这个远程磁盘, &lt;code>Kubelet&lt;/code> 需要进行第二个操作: 即使会这个磁盘设备, 然后将它挂载到宿主机知道的挂载点上。 这一步相当于执行:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#228b22"># 通过lsblk命令获取磁盘设备ID&lt;/span>
sudo lsblk
&lt;span style="color:#228b22"># 格式化成ext4格式&lt;/span>
sudo mkfs.ext4 -m &lt;span style="color:#b452cd">0&lt;/span> -F -E &lt;span style="color:#00688b">lazy_itable_init&lt;/span>=0,lazy_journal_init=0,discard /dev/&amp;lt;磁盘设备ID&amp;gt;
&lt;span style="color:#228b22"># 挂载到挂载点&lt;/span>
sudo mkdir -p /var/lib/kubelet/pods/&amp;lt;Pod的ID&amp;gt;/volumes/kubernetes.io~&amp;lt;Volume类型&amp;gt;/&amp;lt;Volume名字&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个将磁盘设备格式化并挂载到 &lt;code>Volume&lt;/code> 宿主机目录的操作,对应的正是 &amp;ldquo;两阶段处理&amp;rdquo; 的第二段: &lt;code>Mount&lt;/code>&lt;/p>
&lt;p>&lt;code>Kubernetes&lt;/code> 如何定义和区分这两个阶段的？
在具体的 &lt;code>Volume&lt;/code> 插件的实现接口上, &lt;code>Kubernetes&lt;/code> 分别给这两个阶段提供了两种不同的参数列表:&lt;/p>
&lt;ul>
&lt;li>第一阶段 &lt;code>Attach&lt;/code>, &lt;code>Kubernetes&lt;/code> 提供的可用参数是 &lt;code>nodeName&lt;/code>, 即宿主机的名字&lt;/li>
&lt;li>第二阶段 &lt;code>Mount&lt;/code>, &lt;code>Kubernetes&lt;/code> 提供的可用参数是 &lt;code>dir&lt;/code>, 即 &lt;code>Volume&lt;/code> 的宿主机目录&lt;/li>
&lt;/ul>
&lt;p>在经过 &amp;ldquo;两阶段处理&amp;rdquo;, 我们得到了一个 &lt;code>持久化&lt;/code> 的 &lt;code>Volume&lt;/code> 宿主机目录, 然后, &lt;code>Kubelet&lt;/code> 只要把这个 &lt;code>Volume&lt;/code> 目录通过 &lt;code>CRI&lt;/code> 里的 &lt;code>Mounts&lt;/code> 参数,传递给 &lt;code>Docker&lt;/code>, 然后就可以为 &lt;code>POD&lt;/code> 里的容器挂载这个 &amp;ldquo;持久化&amp;rdquo; 的 &lt;code>Volume&lt;/code>。&lt;/p>
&lt;p>另外还有一个核心的概念 &lt;code>StorageClass&lt;/code>, &lt;code>Kubernetes&lt;/code> 为我们提供了一套可以自动创建 &lt;code>PV&lt;/code> 的机制, 即 &lt;code>Dynamic Provisioning&lt;/code>, 前面人工管理的 &lt;code>PV&lt;/code> 方式叫做 &lt;code>Static Provisioning&lt;/code>。&lt;/p>
&lt;p>&lt;code>Dynamic Provisioning&lt;/code> 机制工作的核心, 在于一个名叫 &lt;code>StorageClass&lt;/code> 的API对象。而这个对象的作用，就是创建 PV 的模板。&lt;code>StorageClass&lt;/code>对象会定义如下两个部分内容:&lt;/p>
&lt;ul>
&lt;li>第一, &lt;code>PV&lt;/code> 的属性。比如 存储类型、&lt;code>Volume&lt;/code> 大小等&lt;/li>
&lt;li>第二, 创建这种 &lt;code>PV&lt;/code> 需要用到的存储插件。比如 &lt;code>Ceph&lt;/code> 等
有这两个信息后, &lt;code>Kubernetes&lt;/code> 就可以根据用户提交的 &lt;code>PVC&lt;/code>,找到一个对应的 &lt;code>StorageClass&lt;/code>，然后 &lt;code>Kubernetes&lt;/code> 就好调用该 &lt;code>StorageClass&lt;/code> 声明的存储插件, 创建出需要的 &lt;code>PV&lt;/code>。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#228b22">#在这个 YAML 文件里，我们定义了一个名叫 block-service 的 StorageClass。&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">apiVersion&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>storage.k8s.io/v1&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">kind&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>StorageClass&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">metadata&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>block-service&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">provisioner&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>kubernetes.io/gce-pd&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># GCE PD 存储插件的名字&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">parameters&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>pd-ssd&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#228b22"># SSD格式的GCE远程磁盘&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="kubernetes-pv-和-pvc-体系是不是多此一样">Kubernetes PV 和 PVC 体系是不是多此一样&lt;/h1>
&lt;p>Kubernetes 支持多种的持久化 &lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes">Kubernetes内置的持久化数据卷实现&lt;/a>&lt;/p>
&lt;p>在通过 &lt;code>PV&lt;/code> 和 &lt;code>PVC&lt;/code>, 以及 &lt;code>StorageClass&lt;/code> 这套存储体系, 为后来添加持久化存储方案,对已有的 &lt;code>Kubernetes&lt;/code> 的影响,几乎可以忽略不及。作位用户, &lt;code>POD&lt;/code> 的 &lt;code>YAML&lt;/code> 和 &lt;code>PVC&lt;/code> 的 &lt;code>YAML&lt;/code> 并没有任何特殊的改变.&lt;/p>
&lt;h1 id="总结">总结&lt;/h1>
&lt;p>&lt;img src="https://pinkhello.me/%E5%9B%9E%E6%9C%9BK8S/pvc-pv-storageclass-check.png" alt="PVC-PV设计">&lt;/p>
&lt;ul>
&lt;li>&lt;code>PVC&lt;/code> 描述 &lt;code>POD&lt;/code> 想要使用的持久化存储的属性，比如存储的大小、读写权限。&lt;/li>
&lt;li>&lt;code>PV&lt;/code> 描述的 一个具体的 &lt;code>Volume&lt;/code> 的属性、比如 &lt;code>Volume&lt;/code> 的类型、挂载目录、远程存储服务器地址&lt;/li>
&lt;li>&lt;code>StorageClass&lt;/code> 作用，充当 &lt;code>PV&lt;/code> 的模板，只要同属于一个 &lt;code>StorageClass&lt;/code> 的 &lt;code>PV&lt;/code> 和 &lt;code>PVC&lt;/code>，才可以绑定在一起。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://pinkhello.me/%E5%9B%9E%E6%9C%9BK8S/pvc-pv.png" alt="Kubernetes持久化存储的原理">
&lt;img src="https://pinkhello.me/%E5%9B%9E%E6%9C%9BK8S/CSI.png" alt="Kubernetes持久化存储的通过CSI插件操作原理">&lt;/p>
&lt;ul>
&lt;li>&lt;code>Driver Registrar&lt;/code> 组件负责将插件注册到 &lt;code>kubelet&lt;/code> 阶段，请求&lt;code>CSI&lt;/code>插件的 &lt;code>Identity服务&lt;/code> 获取插件信息&lt;/li>
&lt;li>&lt;code>External Provisioner&lt;/code> 组件 &lt;code>Provision 阶段&lt;/code>, &lt;code>External Provisioner&lt;/code> 监听（&lt;code>Watch&lt;/code>）了 &lt;code>APIServer&lt;/code> 里的 &lt;code>PVC对象&lt;/code>。当一个 &lt;code>PVC&lt;/code> 被创建时，它就会调用 &lt;code>CSI Controller&lt;/code> 的 &lt;code>CreateVolume&lt;/code> 方法，为你创建对应 &lt;code>PV&lt;/code>&lt;/li>
&lt;li>&lt;code>External Attacher&lt;/code> 组件负责正是 &amp;ldquo;&lt;code>Attach 阶段&lt;/code>&amp;rdquo;, 它监听了 &lt;code>APIServer&lt;/code> 里的 &lt;code>VolumeAttachment 对象&lt;/code>的变化, &lt;code>VolumeAttachment 对象&lt;/code>是 &lt;code>Kubernetes&lt;/code> 确认一个 &lt;code>Volume&lt;/code> 可以进入 &lt;code>Attach 阶段&lt;/code> 的重要标志&lt;/li>
&lt;/ul>
- https://pinkhello.me/posts/22-%E5%9B%9E%E6%9C%9Bk8s-%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/ - PinkHello, All Rights Reserved</description></item></channel></rss>